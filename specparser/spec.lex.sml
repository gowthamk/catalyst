(*#line 15.10 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)functor SpecLexFun (structure Tokens : Spec_TOKENS)(*#line 1.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)structure Tokens = Tokens
type pos = int
type ('a,'b) token = ('a,'b) Tokens.token
type svalue = Tokens.svalue
type lexresult = (svalue,pos) token
val line = ref 1
val debugFlag = ref false
val eof = fn () => Tokens.EOF(!line,!line)
val debug = fn s => if (!debugFlag) then print s else () 
(*
  Spec_TOKENS defined using term declaration in grm
*)
(*#line 18.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\000\000\000\000\000\000\000\000\000\073\075\000\000\074\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\073\000\000\000\000\000\000\000\071\070\069\068\067\065\064\062\
\\061\061\061\061\061\061\061\061\061\061\060\059\056\054\000\000\
\\000\008\008\052\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\051\008\008\050\008\008\049\047\046\000\008\
\\000\040\008\008\008\008\035\008\008\008\008\008\008\008\032\008\
\\023\008\015\008\011\008\008\008\008\008\008\007\006\005\000\000\
\\000"
),
 (3, 
"\076\076\076\076\076\076\076\076\076\079\082\076\076\081\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\079\076\076\076\076\076\076\076\076\076\077\076\076\076\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076"
),
 (8, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (9, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\012\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\013\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\014\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\016\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\017\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\018\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\019\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\020\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\021\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\022\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\024\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\025\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\026\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\027\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\028\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\029\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\030\008\008\008\008\000\000\000\000\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\031\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\033\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\034\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\036\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\037\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\038\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\039\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\041\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\042\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (42, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\043\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\044\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\045\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\053\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\057\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\061\061\061\061\061\061\061\061\061\061\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (62, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\063\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (65, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (71, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\072\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (73, 
"\000\000\000\000\000\000\000\000\000\073\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\073\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (74, 
"\000\000\000\000\000\000\000\000\000\000\075\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (77, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\078\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (79, 
"\000\000\000\000\000\000\000\000\000\080\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\080\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (81, 
"\000\000\000\000\000\000\000\000\000\000\082\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [(N 96)], trans = 0},
{fin = [(N 121)], trans = 0},
{fin = [(N 94)], trans = 0},
{fin = [(N 128)], trans = 8},
{fin = [(N 128)], trans = 9},
{fin = [(N 128)], trans = 10},
{fin = [(N 128)], trans = 11},
{fin = [(N 128)], trans = 12},
{fin = [(N 128)], trans = 13},
{fin = [(N 31),(N 128)], trans = 8},
{fin = [(N 128)], trans = 15},
{fin = [(N 128)], trans = 16},
{fin = [(N 128)], trans = 17},
{fin = [(N 128)], trans = 18},
{fin = [(N 128)], trans = 19},
{fin = [(N 128)], trans = 20},
{fin = [(N 128)], trans = 21},
{fin = [(N 26),(N 128)], trans = 8},
{fin = [(N 128)], trans = 23},
{fin = [(N 128)], trans = 24},
{fin = [(N 128)], trans = 25},
{fin = [(N 128)], trans = 26},
{fin = [(N 128)], trans = 27},
{fin = [(N 128)], trans = 28},
{fin = [(N 128)], trans = 29},
{fin = [(N 128)], trans = 30},
{fin = [(N 17),(N 128)], trans = 8},
{fin = [(N 128)], trans = 32},
{fin = [(N 128)], trans = 33},
{fin = [(N 48),(N 128)], trans = 8},
{fin = [(N 128)], trans = 35},
{fin = [(N 128)], trans = 36},
{fin = [(N 128)], trans = 37},
{fin = [(N 128)], trans = 38},
{fin = [(N 44),(N 128)], trans = 8},
{fin = [(N 128)], trans = 40},
{fin = [(N 128)], trans = 41},
{fin = [(N 128)], trans = 42},
{fin = [(N 128)], trans = 43},
{fin = [(N 128)], trans = 44},
{fin = [(N 38),(N 128)], trans = 8},
{fin = [(N 100)], trans = 0},
{fin = [(N 50)], trans = 47},
{fin = [(N 80)], trans = 0},
{fin = [(N 98)], trans = 0},
{fin = [(N 60),(N 128)], trans = 8},
{fin = [(N 58),(N 128)], trans = 8},
{fin = [(N 65),(N 128)], trans = 52},
{fin = [(N 63)], trans = 0},
{fin = [(N 67)], trans = 54},
{fin = [(N 70)], trans = 0},
{fin = [], trans = 56},
{fin = [], trans = 57},
{fin = [(N 74)], trans = 0},
{fin = [(N 84)], trans = 0},
{fin = [(N 82)], trans = 0},
{fin = [(N 131)], trans = 61},
{fin = [], trans = 62},
{fin = [(N 77)], trans = 0},
{fin = [(N 52)], trans = 0},
{fin = [(N 56)], trans = 65},
{fin = [(N 103)], trans = 0},
{fin = [(N 86)], trans = 0},
{fin = [(N 54)], trans = 0},
{fin = [(N 88)], trans = 0},
{fin = [(N 92)], trans = 0},
{fin = [(N 90)], trans = 71},
{fin = [(N 106)], trans = 0},
{fin = [(N 7)], trans = 73},
{fin = [(N 4)], trans = 74},
{fin = [(N 4)], trans = 0},
{fin = [(N 108)], trans = 0},
{fin = [(N 108)], trans = 77},
{fin = [(N 119)], trans = 0},
{fin = [(N 108),(N 111)], trans = 79},
{fin = [(N 111)], trans = 79},
{fin = [(N 108),(N 116)], trans = 81},
{fin = [(N 116)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val COMMENT = STARTSTATE 3;
val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  100 => ((*#line 54.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "rbrace\n"; Tokens.RBRACE(!line,yypos)(*#line 702.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 103 => ((*#line 55.21 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "arrow\n"; Tokens.ARROW(!line,yypos)(*#line 704.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 106 => ((*#line 56.21 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "comment begin\n"; YYBEGIN COMMENT; continue ()(*#line 706.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 108 => ((*#line 57.16 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)continue()(*#line 708.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 111 => ((*#line 58.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)continue()(*#line 710.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 116 => ((*#line 59.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)line := (!line)+1; continue()(*#line 712.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 119 => ((*#line 60.21 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "comment end\n"; YYBEGIN INITIAL; continue ()(*#line 714.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 121 => ((*#line 61.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "pipe\n"; Tokens.PIPE(!line,yypos)(*#line 716.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 128 => let val yytext=yymktext() in (*#line 62.25 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug ("var: "^yytext^"\n"); Tokens.ID(yytext,!line,yypos)(*#line 718.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
 end
| 131 => let val yytext=yymktext() in (*#line 63.23 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug ("int: "^yytext^"\n"); 
                      case Int.fromString yytext of
                          SOME n => Tokens.INT(n,!line,yypos) 
                        | NONE => raise (Fail "Number couldn't be obtained")
                     (*#line 724.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
 end
| 17 => ((*#line 26.28 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "primitive"; Tokens.PRIMITIVE(!line,yypos)(*#line 726.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 26 => ((*#line 27.27 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "relation"; Tokens.RELATION(!line,yypos)(*#line 728.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 31 => ((*#line 28.23 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "true"; Tokens.TRUE(!line,yypos)(*#line 730.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 38 => ((*#line 29.25 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "assume"; Tokens.ASSUME(!line,yypos)(*#line 732.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 4 => ((*#line 24.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)line := (!line)+1; lex()(*#line 734.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 44 => ((*#line 30.24 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "false"; Tokens.FALSE(!line,yypos)(*#line 736.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 48 => ((*#line 31.22 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "not"; Tokens.NOT(!line,yypos)(*#line 738.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 50 => ((*#line 32.21 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "lambda"; Tokens.LAMBDA(!line,yypos)(*#line 740.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 52 => ((*#line 33.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "dot"; Tokens.DOT(!line,yypos)(*#line 742.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 54 => ((*#line 34.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "plus"; Tokens.PLUS(!line,yypos)(*#line 744.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 56 => ((*#line 35.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "minus"; Tokens.MINUS(!line,yypos)(*#line 746.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 58 => ((*#line 36.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "union"; Tokens.UNION(!line,yypos)(*#line 748.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 60 => ((*#line 37.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "crossprd"; Tokens.CROSSPRD(!line,yypos)(*#line 750.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 63 => ((*#line 38.21 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "subseteq"; Tokens.SUBSETEQ(!line,yypos)(*#line 752.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 65 => ((*#line 39.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "subset"; Tokens.SUBSET(!line,yypos)(*#line 754.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 67 => ((*#line 40.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "equalop";Tokens.EQUALOP(!line,yypos)(*#line 756.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 7 => ((*#line 25.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "whitespace"; lex()(*#line 758.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 70 => ((*#line 41.21 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "implies";Tokens.IMP(!line,yypos)(*#line 760.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 74 => ((*#line 42.22 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "iff";Tokens.IFF(!line,yypos)(*#line 762.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 77 => ((*#line 43.22 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "conj";Tokens.CONJ(!line,yypos)(*#line 764.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 80 => ((*#line 44.22 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "disj";Tokens.DISJ(!line,yypos)(*#line 766.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 82 => ((*#line 45.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "colon\n";Tokens.COLON(!line,yypos)(*#line 768.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 84 => ((*#line 46.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "semicolon\n";Tokens.SEMICOLON(!line,yypos)(*#line 770.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 86 => ((*#line 47.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "comma\n";Tokens.COMMA(!line,yypos)(*#line 772.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 88 => ((*#line 48.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "star\n";Tokens.STAR(!line,yypos)(*#line 774.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 90 => ((*#line 49.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "lparen\n"; Tokens.LPAREN(!line,yypos)(*#line 776.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 92 => ((*#line 50.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "rparen\n"; Tokens.RPAREN(!line,yypos)(*#line 778.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 94 => ((*#line 51.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "lcurly\n"; Tokens.LCURLY(!line,yypos)(*#line 780.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 96 => ((*#line 52.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "rcurly\n"; Tokens.RCURLY(!line,yypos)(*#line 782.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| 98 => ((*#line 53.20 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex"*)debug "lbrace\n"; Tokens.LBRACE(!line,yypos)(*#line 784.1 "/Users/gowtham/git/catalyst-fo/catalyst/specparser/spec.lex.sml"*)
)
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
