(declare-const v Bool)
(declare-sort T0)
(declare-const x T0)
(declare-sort T1)
(declare-const sv_4103 T1)
(declare-const xs T1)
(declare-const x T0)
(declare-const l T1)
(declare-const anc_0 T1)
(declare-const x_0 T1)
(declare-fun Rhd1 (T1 T0) Bool)
(declare-fun Rmem0 (T1 T0) Bool)
(declare-sort T2)
(declare-fun R1 (T0 T2) Bool)
(declare-fun set0 (T0) Bool)
(assert (forall ((bv0 T0)) (! (= (set0 bv0) (and (= bv0 x))) :pattern ((set0 bv0)))))
(declare-fun set1 (T0) Bool)
(assert (forall ((bv0 T0))
  (! (= (set1 bv0) (or (set0 bv0) (Rmem0 xs bv0)))
     :pattern ((set1 bv0))
     :pattern ((set0 bv0))
     :pattern ((Rmem0 xs bv0)))))
(assert (forall ((bv0 T0))
  (! (= (Rmem0 l bv0) (set1 bv0))
     :pattern ((Rmem0 l bv0))
     :pattern ((set1 bv0)))))
(declare-fun set2 (T0) Bool)
(assert (forall ((bv0 T0)) (! (= (set2 bv0) (and (= bv0 x))) :pattern ((set2 bv0)))))
(assert (forall ((bv0 T0))
  (! (= (Rhd1 l bv0) (set2 bv0)) :pattern ((Rhd1 l bv0)) :pattern ((set2 bv0)))))
(assert (= l x_0))
(assert (= l anc_0))
(assert (= anc_0 x_0))
(declare-fun set3 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set3 bv0) false) :pattern ((set3 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T2))
                  (! (= (R1 x bv0) (set3 bv0))
                     :pattern ((R1 x bv0))
                     :pattern ((set3 bv0)))))))
  (= (= v true) a!1)))
(declare-fun set4 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set4 bv0) false) :pattern ((set4 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T2))
                  (! (= (R1 x bv0) (set4 bv0))
                     :pattern ((R1 x bv0))
                     :pattern ((set4 bv0)))))))
  (not (= (= v true) a!1))))
(check-sat)

(declare-const v Bool)
(declare-sort T3)
(declare-const x_0 T3)
(declare-const anc_0 T3)
(declare-const l T3)
(declare-const sv_4100 T3)
(declare-sort T4)
(declare-fun Rmem2 (T3 T4) Bool)
(declare-sort T5)
(declare-fun Rhd1 (T3 T5) Bool)
(declare-fun Rmem0 (T3 T5) Bool)
(declare-fun R1 (T5 T4) Bool)
(declare-fun set5 (T5 T4) Bool)
(assert (forall ((bv1 T4) (bv0 T5))
  (! (= (set5 bv0 bv1) (and (R1 bv0 bv1)))
     :pattern ((set5 bv0 bv1))
     :pattern ((R1 bv0 bv1)))))
(declare-fun set6 (T3 T5 T4) Bool)
(assert (forall ((bv2 T4) (bv1 T5) (bv0 T3))
  (! (= (set6 bv0 bv1 bv2) (and (Rmem0 bv0 bv1) (set5 bv1 bv2)))
     :pattern ((set6 bv0 bv1 bv2))
     :pattern ((Rmem0 bv0 bv1) (set5 bv1 bv2)))))
(assert (forall ((bv2 T4) (bv1 T5) (bv0 T3))
  (! (=> (set6 bv0 bv1 bv2) (Rmem2 bv0 bv2))
     :pattern ((set6 bv0 bv1 bv2) (Rmem2 bv0 bv2)))))
(assert (forall ((bv2 T4) (bv1 T3))
  (exists ((ev0 T5))
    (! (=> (Rmem2 bv1 bv2) (set6 bv1 ev0 bv2))
       :pattern ((Rmem2 bv1 bv2) (set6 bv1 ev0 bv2))))))
(assert (= anc_0 x_0))
(assert (= l x_0))
(assert (= l anc_0))
(declare-fun set7 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set7 bv0) false) :pattern ((set7 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rmem0 l bv0) (set7 bv0))
     :pattern ((Rmem0 l bv0))
     :pattern ((set7 bv0)))))
(declare-fun set8 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set8 bv0) false) :pattern ((set8 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rhd1 l bv0) (set8 bv0)) :pattern ((Rhd1 l bv0)) :pattern ((set8 bv0)))))
(assert (= v false))
(assert (= v false))
(declare-fun set9 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set9 bv0) false) :pattern ((set9 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T4))
                  (! (= (Rmem2 x_0 bv0) (set9 bv0))
                     :pattern ((Rmem2 x_0 bv0))
                     :pattern ((set9 bv0)))))))
  (not (= (= v true) a!1))))
(check-sat)

(declare-const v Bool)
(declare-sort T6)
(declare-const x_0 T6)
(declare-const anc_0 T6)
(declare-const l T6)
(declare-sort T7)
(declare-const x T7)
(declare-const xs T6)
(declare-const sv_4103 T6)
(declare-const v1 Bool)
(declare-const v2 Bool)
(declare-const v3 Bool)
(declare-const sv_4107 Bool)
(declare-const sv_4107 Bool)
(declare-sort T8)
(declare-fun Rmem2 (T6 T8) Bool)
(declare-fun Rhd1 (T6 T7) Bool)
(declare-fun Rmem0 (T6 T7) Bool)
(declare-fun R1 (T7 T8) Bool)
(declare-fun set10 (T7 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T7))
  (! (= (set10 bv0 bv1) (and (R1 bv0 bv1)))
     :pattern ((set10 bv0 bv1))
     :pattern ((R1 bv0 bv1)))))
(declare-fun set11 (T6 T7 T8) Bool)
(assert (forall ((bv2 T8) (bv1 T7) (bv0 T6))
  (! (= (set11 bv0 bv1 bv2) (and (Rmem0 bv0 bv1) (set10 bv1 bv2)))
     :pattern ((set11 bv0 bv1 bv2))
     :pattern ((Rmem0 bv0 bv1) (set10 bv1 bv2)))))
(assert (forall ((bv2 T8) (bv1 T7) (bv0 T6))
  (! (=> (set11 bv0 bv1 bv2) (Rmem2 bv0 bv2))
     :pattern ((set11 bv0 bv1 bv2) (Rmem2 bv0 bv2)))))
(assert (forall ((bv2 T8) (bv1 T6))
  (exists ((ev0 T7))
    (! (=> (Rmem2 bv1 bv2) (set11 bv1 ev0 bv2))
       :pattern ((Rmem2 bv1 bv2) (set11 bv1 ev0 bv2))))))
(assert (= anc_0 x_0))
(assert (= l x_0))
(assert (= l anc_0))
(declare-fun set12 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set12 bv0) (and (= bv0 x))) :pattern ((set12 bv0)))))
(declare-fun set13 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set13 bv0) (or (set12 bv0) (Rmem0 xs bv0)))
     :pattern ((set13 bv0))
     :pattern ((set12 bv0))
     :pattern ((Rmem0 xs bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rmem0 l bv0) (set13 bv0))
     :pattern ((Rmem0 l bv0))
     :pattern ((set13 bv0)))))
(declare-fun set14 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set14 bv0) (and (= bv0 x))) :pattern ((set14 bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rhd1 l bv0) (set14 bv0))
     :pattern ((Rhd1 l bv0))
     :pattern ((set14 bv0)))))
(assert (= v1 true))
(assert (= v3 true))
(assert (= v3 true))
(declare-fun set15 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set15 bv0) false) :pattern ((set15 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T8))
                  (! (= (R1 x bv0) (set15 bv0))
                     :pattern ((R1 x bv0))
                     :pattern ((set15 bv0)))))))
  (= (= v2 true) a!1)))
(declare-fun set16 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set16 bv0) false) :pattern ((set16 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T8))
                  (! (= (Rmem2 xs bv0) (set16 bv0))
                     :pattern ((Rmem2 xs bv0))
                     :pattern ((set16 bv0)))))))
  (= (= v1 true) a!1)))
(assert (= v1 true))
(assert (= v true))
(assert (= v true))
(assert (= v v3))
(declare-fun set17 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set17 bv0) false) :pattern ((set17 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T8))
                  (! (= (Rmem2 x_0 bv0) (set17 bv0))
                     :pattern ((Rmem2 x_0 bv0))
                     :pattern ((set17 bv0)))))))
  (not (= (= v true) a!1))))
(check-sat)

(declare-const v Bool)
(declare-sort T9)
(declare-const x_0 T9)
(declare-const anc_0 T9)
(declare-const l T9)
(declare-sort T10)
(declare-const x T10)
(declare-const xs T9)
(declare-const sv_4103 T9)
(declare-const v1 Bool)
(declare-const v2 Bool)
(declare-const v3 Bool)
(declare-const sv_4107 Bool)
(declare-const sv_4110 Bool)
(declare-sort T11)
(declare-fun Rmem2 (T9 T11) Bool)
(declare-fun Rhd1 (T9 T10) Bool)
(declare-fun Rmem0 (T9 T10) Bool)
(declare-fun R1 (T10 T11) Bool)
(declare-fun set18 (T10 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T10))
  (! (= (set18 bv0 bv1) (and (R1 bv0 bv1)))
     :pattern ((set18 bv0 bv1))
     :pattern ((R1 bv0 bv1)))))
(declare-fun set19 (T9 T10 T11) Bool)
(assert (forall ((bv2 T11) (bv1 T10) (bv0 T9))
  (! (= (set19 bv0 bv1 bv2) (and (Rmem0 bv0 bv1) (set18 bv1 bv2)))
     :pattern ((set19 bv0 bv1 bv2))
     :pattern ((Rmem0 bv0 bv1) (set18 bv1 bv2)))))
(assert (forall ((bv2 T11) (bv1 T10) (bv0 T9))
  (! (=> (set19 bv0 bv1 bv2) (Rmem2 bv0 bv2))
     :pattern ((set19 bv0 bv1 bv2) (Rmem2 bv0 bv2)))))
(assert (forall ((bv2 T11) (bv1 T9))
  (exists ((ev0 T10))
    (! (=> (Rmem2 bv1 bv2) (set19 bv1 ev0 bv2))
       :pattern ((Rmem2 bv1 bv2) (set19 bv1 ev0 bv2))))))
(assert (= anc_0 x_0))
(assert (= l x_0))
(assert (= l anc_0))
(declare-fun set20 (T10) Bool)
(assert (forall ((bv0 T10)) (! (= (set20 bv0) (and (= bv0 x))) :pattern ((set20 bv0)))))
(declare-fun set21 (T10) Bool)
(assert (forall ((bv0 T10))
  (! (= (set21 bv0) (or (set20 bv0) (Rmem0 xs bv0)))
     :pattern ((set21 bv0))
     :pattern ((set20 bv0))
     :pattern ((Rmem0 xs bv0)))))
(assert (forall ((bv0 T10))
  (! (= (Rmem0 l bv0) (set21 bv0))
     :pattern ((Rmem0 l bv0))
     :pattern ((set21 bv0)))))
(declare-fun set22 (T10) Bool)
(assert (forall ((bv0 T10)) (! (= (set22 bv0) (and (= bv0 x))) :pattern ((set22 bv0)))))
(assert (forall ((bv0 T10))
  (! (= (Rhd1 l bv0) (set22 bv0))
     :pattern ((Rhd1 l bv0))
     :pattern ((set22 bv0)))))
(assert (= v1 true))
(assert (= v3 true))
(assert (= v3 true))
(declare-fun set23 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set23 bv0) false) :pattern ((set23 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T11))
                  (! (= (R1 x bv0) (set23 bv0))
                     :pattern ((R1 x bv0))
                     :pattern ((set23 bv0)))))))
  (= (= v2 true) a!1)))
(declare-fun set24 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set24 bv0) false) :pattern ((set24 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T11))
                  (! (= (Rmem2 xs bv0) (set24 bv0))
                     :pattern ((Rmem2 xs bv0))
                     :pattern ((set24 bv0)))))))
  (= (= v1 true) a!1)))
(assert (= v1 false))
(declare-fun set25 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set25 bv0) false) :pattern ((set25 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T11))
                  (! (= (R1 x bv0) (set25 bv0))
                     :pattern ((R1 x bv0))
                     :pattern ((set25 bv0)))))))
  (= (= v true) a!1)))
(assert (= v v2))
(assert (= v v3))
(declare-fun set26 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set26 bv0) false) :pattern ((set26 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T11))
                  (! (= (Rmem2 x_0 bv0) (set26 bv0))
                     :pattern ((Rmem2 x_0 bv0))
                     :pattern ((set26 bv0)))))))
  (not (= (= v true) a!1))))
(check-sat)

(declare-const v Bool)
(declare-sort T12)
(declare-const x_0 T12)
(declare-const anc_0 T12)
(declare-const l T12)
(declare-sort T13)
(declare-const x T13)
(declare-const xs T12)
(declare-const sv_4103 T12)
(declare-const v1 Bool)
(declare-const v2 Bool)
(declare-const v3 Bool)
(declare-const sv_4110 Bool)
(declare-const sv_4107 Bool)
(declare-sort T14)
(declare-fun Rmem2 (T12 T14) Bool)
(declare-fun Rhd1 (T12 T13) Bool)
(declare-fun Rmem0 (T12 T13) Bool)
(declare-fun R1 (T13 T14) Bool)
(declare-fun set27 (T13 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T13))
  (! (= (set27 bv0 bv1) (and (R1 bv0 bv1)))
     :pattern ((set27 bv0 bv1))
     :pattern ((R1 bv0 bv1)))))
(declare-fun set28 (T12 T13 T14) Bool)
(assert (forall ((bv2 T14) (bv1 T13) (bv0 T12))
  (! (= (set28 bv0 bv1 bv2) (and (Rmem0 bv0 bv1) (set27 bv1 bv2)))
     :pattern ((set28 bv0 bv1 bv2))
     :pattern ((Rmem0 bv0 bv1) (set27 bv1 bv2)))))
(assert (forall ((bv2 T14) (bv1 T13) (bv0 T12))
  (! (=> (set28 bv0 bv1 bv2) (Rmem2 bv0 bv2))
     :pattern ((set28 bv0 bv1 bv2) (Rmem2 bv0 bv2)))))
(assert (forall ((bv2 T14) (bv1 T12))
  (exists ((ev0 T13))
    (! (=> (Rmem2 bv1 bv2) (set28 bv1 ev0 bv2))
       :pattern ((Rmem2 bv1 bv2) (set28 bv1 ev0 bv2))))))
(assert (= anc_0 x_0))
(assert (= l x_0))
(assert (= l anc_0))
(declare-fun set29 (T13) Bool)
(assert (forall ((bv0 T13)) (! (= (set29 bv0) (and (= bv0 x))) :pattern ((set29 bv0)))))
(declare-fun set30 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set30 bv0) (or (set29 bv0) (Rmem0 xs bv0)))
     :pattern ((set30 bv0))
     :pattern ((set29 bv0))
     :pattern ((Rmem0 xs bv0)))))
(assert (forall ((bv0 T13))
  (! (= (Rmem0 l bv0) (set30 bv0))
     :pattern ((Rmem0 l bv0))
     :pattern ((set30 bv0)))))
(declare-fun set31 (T13) Bool)
(assert (forall ((bv0 T13)) (! (= (set31 bv0) (and (= bv0 x))) :pattern ((set31 bv0)))))
(assert (forall ((bv0 T13))
  (! (= (Rhd1 l bv0) (set31 bv0))
     :pattern ((Rhd1 l bv0))
     :pattern ((set31 bv0)))))
(assert (= v1 false))
(declare-fun set32 (T14) Bool)
(assert (forall ((bv0 T14)) (! (= (set32 bv0) false) :pattern ((set32 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T14))
                  (! (= (R1 x bv0) (set32 bv0))
                     :pattern ((R1 x bv0))
                     :pattern ((set32 bv0)))))))
  (= (= v3 true) a!1)))
(assert (= v3 v2))
(declare-fun set33 (T14) Bool)
(assert (forall ((bv0 T14)) (! (= (set33 bv0) false) :pattern ((set33 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T14))
                  (! (= (R1 x bv0) (set33 bv0))
                     :pattern ((R1 x bv0))
                     :pattern ((set33 bv0)))))))
  (= (= v2 true) a!1)))
(declare-fun set34 (T14) Bool)
(assert (forall ((bv0 T14)) (! (= (set34 bv0) false) :pattern ((set34 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T14))
                  (! (= (Rmem2 xs bv0) (set34 bv0))
                     :pattern ((Rmem2 xs bv0))
                     :pattern ((set34 bv0)))))))
  (= (= v1 true) a!1)))
(assert (= v1 true))
(assert (= v true))
(assert (= v true))
(assert (= v v3))
(declare-fun set35 (T14) Bool)
(assert (forall ((bv0 T14)) (! (= (set35 bv0) false) :pattern ((set35 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T14))
                  (! (= (Rmem2 x_0 bv0) (set35 bv0))
                     :pattern ((Rmem2 x_0 bv0))
                     :pattern ((set35 bv0)))))))
  (not (= (= v true) a!1))))
(check-sat)

(declare-const v Bool)
(declare-sort T15)
(declare-const x_0 T15)
(declare-const anc_0 T15)
(declare-const l T15)
(declare-sort T16)
(declare-const x T16)
(declare-const xs T15)
(declare-const sv_4103 T15)
(declare-const v1 Bool)
(declare-const v2 Bool)
(declare-const v3 Bool)
(declare-const sv_4110 Bool)
(declare-const sv_4110 Bool)
(declare-sort T17)
(declare-fun Rmem2 (T15 T17) Bool)
(declare-fun Rhd1 (T15 T16) Bool)
(declare-fun Rmem0 (T15 T16) Bool)
(declare-fun R1 (T16 T17) Bool)
(declare-fun set36 (T16 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T16))
  (! (= (set36 bv0 bv1) (and (R1 bv0 bv1)))
     :pattern ((set36 bv0 bv1))
     :pattern ((R1 bv0 bv1)))))
(declare-fun set37 (T15 T16 T17) Bool)
(assert (forall ((bv2 T17) (bv1 T16) (bv0 T15))
  (! (= (set37 bv0 bv1 bv2) (and (Rmem0 bv0 bv1) (set36 bv1 bv2)))
     :pattern ((set37 bv0 bv1 bv2))
     :pattern ((Rmem0 bv0 bv1) (set36 bv1 bv2)))))
(assert (forall ((bv2 T17) (bv1 T16) (bv0 T15))
  (! (=> (set37 bv0 bv1 bv2) (Rmem2 bv0 bv2))
     :pattern ((set37 bv0 bv1 bv2) (Rmem2 bv0 bv2)))))
(assert (forall ((bv2 T17) (bv1 T15))
  (exists ((ev0 T16))
    (! (=> (Rmem2 bv1 bv2) (set37 bv1 ev0 bv2))
       :pattern ((Rmem2 bv1 bv2) (set37 bv1 ev0 bv2))))))
(assert (= anc_0 x_0))
(assert (= l x_0))
(assert (= l anc_0))
(declare-fun set38 (T16) Bool)
(assert (forall ((bv0 T16)) (! (= (set38 bv0) (and (= bv0 x))) :pattern ((set38 bv0)))))
(declare-fun set39 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set39 bv0) (or (set38 bv0) (Rmem0 xs bv0)))
     :pattern ((set39 bv0))
     :pattern ((set38 bv0))
     :pattern ((Rmem0 xs bv0)))))
(assert (forall ((bv0 T16))
  (! (= (Rmem0 l bv0) (set39 bv0))
     :pattern ((Rmem0 l bv0))
     :pattern ((set39 bv0)))))
(declare-fun set40 (T16) Bool)
(assert (forall ((bv0 T16)) (! (= (set40 bv0) (and (= bv0 x))) :pattern ((set40 bv0)))))
(assert (forall ((bv0 T16))
  (! (= (Rhd1 l bv0) (set40 bv0))
     :pattern ((Rhd1 l bv0))
     :pattern ((set40 bv0)))))
(assert (= v1 false))
(declare-fun set41 (T17) Bool)
(assert (forall ((bv0 T17)) (! (= (set41 bv0) false) :pattern ((set41 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T17))
                  (! (= (R1 x bv0) (set41 bv0))
                     :pattern ((R1 x bv0))
                     :pattern ((set41 bv0)))))))
  (= (= v3 true) a!1)))
(assert (= v3 v2))
(declare-fun set42 (T17) Bool)
(assert (forall ((bv0 T17)) (! (= (set42 bv0) false) :pattern ((set42 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T17))
                  (! (= (R1 x bv0) (set42 bv0))
                     :pattern ((R1 x bv0))
                     :pattern ((set42 bv0)))))))
  (= (= v2 true) a!1)))
(declare-fun set43 (T17) Bool)
(assert (forall ((bv0 T17)) (! (= (set43 bv0) false) :pattern ((set43 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T17))
                  (! (= (Rmem2 xs bv0) (set43 bv0))
                     :pattern ((Rmem2 xs bv0))
                     :pattern ((set43 bv0)))))))
  (= (= v1 true) a!1)))
(assert (= v1 false))
(declare-fun set44 (T17) Bool)
(assert (forall ((bv0 T17)) (! (= (set44 bv0) false) :pattern ((set44 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T17))
                  (! (= (R1 x bv0) (set44 bv0))
                     :pattern ((R1 x bv0))
                     :pattern ((set44 bv0)))))))
  (= (= v true) a!1)))
(assert (= v v2))
(assert (= v v3))
(declare-fun set45 (T17) Bool)
(assert (forall ((bv0 T17)) (! (= (set45 bv0) false) :pattern ((set45 bv0)))))
(assert (let ((a!1 (not (forall ((bv0 T17))
                  (! (= (Rmem2 x_0 bv0) (set45 bv0))
                     :pattern ((Rmem2 x_0 bv0))
                     :pattern ((set45 bv0)))))))
  (not (= (= v true) a!1))))
(check-sat)

