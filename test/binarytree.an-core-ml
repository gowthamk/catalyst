Catalyst rexported (built Mon Nov 18 13:24:17 EST 2013 on pal-nat184-206-107.itap.purdue.edu)
  created this file on Mon Nov 18 16:02:29 2013.
Do not edit this file.
Flag settings: 
   align: 4
   atMLtons: ()
   chunk: coalesce 4096
   closureConvertGlobalize: true
   closureConvertShrink: true
   codegen: x86
   contifyIntoMain: false
   debug: false
   defaultChar: char8
   defaultWideChar: widechar32
   defaultInt: int32
   defaultReal: real64
   defaultWord: word32
   diag passes: []
   drop passes: []
   elaborate allowConstant (default): false
   elaborate allowConstant (enabled): true
   elaborate allowFFI (default): false
   elaborate allowFFI (enabled): true
   elaborate allowPrim (default): false
   elaborate allowPrim (enabled): true
   elaborate allowOverload (default): false
   elaborate allowOverload (enabled): true
   elaborate allowRebindEquals (default): false
   elaborate allowRebindEquals (enabled): true
   elaborate deadCode (default): false
   elaborate deadCode (enabled): true
   elaborate forceUsed (default): false
   elaborate forceUsed (enabled): true
   elaborate ffiStr (default): 
   elaborate ffiStr (enabled): true
   elaborate nonexhaustiveExnMatch (default): default
   elaborate nonexhaustiveExnMatch (enabled): true
   elaborate nonexhaustiveMatch (default): warn
   elaborate nonexhaustiveMatch (enabled): true
   elaborate redundantMatch (default): warn
   elaborate redundantMatch (enabled): true
   elaborate resolveScope (default): strdec
   elaborate resolveScope (enabled): true
   elaborate sequenceNonUnit (default): ignore
   elaborate sequenceNonUnit (enabled): true
   elaborate warnUnused (default): false
   elaborate warnUnused (enabled): true
   elaborate only: false
   emit main: true
   export header: None
   exn history: false
   generated output format: executable
   gc check: Limit
   indentation: 3
   inlineIntoMain: true
   inlineLeafA: {loops = true, repeat = true, size = Some 20}
   inlineLeafB: {loops = true, repeat = true, size = Some 40}
   inlineNonRec: {small = 60, product = 320}
   input file: binarytree.an-core-ml
   spec file: test/binarytree.spec
   keep CoreML: true
   keep Env: false
   keep def use: true
   keep dot: false
   keep Machine: false
   keep passes: []
   keep RSSA: false
   keep SSA: false
   keep SSA2: false
   keep SXML: false
   keep XML: false
   extra_: false
   lib dir: /Users/gowtham/git/mlton/newexecs/usr/local/lib/mlton
   lib target dir: /Users/gowtham/git/mlton/newexecs/usr/local/lib/mlton/targets/self
   loop passes: 1
   mark cards: true
   max function size: 10000
   mlb path vars: [{var = MLTON_ROOT, path = $(LIB_MLTON_DIR)/sml}, {var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}]
   native commented: 0
   native live stack: false
   native optimize: 1
   native move hoist: true
   native copy prop: true
   native copy prop cutoff: 1000
   native cutoff: 100
   native live transfer: 8
   native shuffle: true
   native ieee fp: false
   native split: Some 20000
   optimizationPasses: []
   polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300}
   prefer abs paths: false
   prof passes: []
   profile: None
   profile branch: false
   profile C: []
   profile IL: ProfileSource
   profile include/exclude: []
   profile raise: false
   profile stack: false
   profile val: false
   show basis: None
   show def-use: None
   show types: true
   target: self
   target arch: X86
   target OS: Linux
   type check: false
   verbosity: Pass
   warn unrecognized annotation: true
   warn deprecated features: true
   zone cut depth: 100


Decs:
datatype 'a_2 list = nil
		     | :: of 'a_2 * 'a_2 list
		     | cons of 'a_2 * 'a_2 list
datatype 'a tree = Leaf of 'a
		   | Node of 'a tree * 'a * 'a tree
val rec 'a_4258
   concat: 'a_4258 list -> 'a_4258 list -> 'a_4258 list = 
      (fn x_0: 'a_4258 list =>
       (fn x_1: 'a_4258 list =>
	let val anc_1056 =. x_0
	    val anc_1057 =. x_1
	in
	   case (anc_1056, anc_1057) of
	     (l1, l2) =>
	     case l1 of
	       nil['a_4258] => l2
	     | ::['a_4258](x, xs) =>
	       let val anc_1058 =. :: ('a_4258)
		   val anc_1059 =. x
		   val anc_1060 =. concat ('a_4258)
		   val anc_1061 =. (anc_1060 xs)
		   val anc_1062 =. (anc_1061 l2)
	       in
		  (anc_1058 (anc_1059, anc_1062))
	       end
	end))
val rec 'a_4259
   preOrder: 'a_4259 tree -> 'a_4259 list = 
      (fn x_2: 'a_4259 tree =>
       case x_2 of
	 (t) =>
	 case t of
	   Leaf['a_4259]x =>
	   let val anc_1040 =. :: ('a_4259)
	       val anc_1041 =. x
	       val anc_1042 =. nil ('a_4259)
	   in
	      (anc_1040 (anc_1041, anc_1042))
	   end
	 | Node['a_4259](l, x, r) =>
	   let val anc_1043 =. concat ('a_4259)
	       val anc_1044 =. concat ('a_4259)
	       val anc_1045 =. preOrder ('a_4259)
	       val anc_1046 =. (anc_1045 l)
	       val anc_1047 =. (anc_1044 anc_1046)
	       val anc_1048 =. :: ('a_4259)
	       val anc_1049 =. x
	       val anc_1050 =. nil ('a_4259)
	       val anc_1051 =. (anc_1048 (anc_1049, anc_1050))
	       val anc_1052 =. (anc_1047 anc_1051)
	       val anc_1053 =. (anc_1043 anc_1052)
	       val anc_1054 =. preOrder ('a_4259)
	       val anc_1055 =. (anc_1054 r)
	   in
	      (anc_1053 anc_1055)
	   end)
val rec 'a_4260
   postOrder: 'a_4260 tree -> 'a_4260 list = 
      (fn x_3: 'a_4260 tree =>
       case x_3 of
	 (t) =>
	 case t of
	   Leaf['a_4260]x =>
	   let val anc_1024 =. :: ('a_4260)
	       val anc_1025 =. x
	       val anc_1026 =. nil ('a_4260)
	   in
	      (anc_1024 (anc_1025, anc_1026))
	   end
	 | Node['a_4260](l, x, r) =>
	   let val anc_1027 =. concat ('a_4260)
	       val anc_1028 =. concat ('a_4260)
	       val anc_1029 =. postOrder ('a_4260)
	       val anc_1030 =. (anc_1029 l)
	       val anc_1031 =. (anc_1028 anc_1030)
	       val anc_1032 =. postOrder ('a_4260)
	       val anc_1033 =. (anc_1032 r)
	       val anc_1034 =. (anc_1031 anc_1033)
	       val anc_1035 =. (anc_1027 anc_1034)
	       val anc_1036 =. :: ('a_4260)
	       val anc_1037 =. x
	       val anc_1038 =. nil ('a_4260)
	       val anc_1039 =. (anc_1036 (anc_1037, anc_1038))
	   in
	      (anc_1035 anc_1039)
	   end)
