(declare-sort T0)
(declare-const v_6 T0)
(declare-const x_1 T0)
(declare-const x_0 T0)
(declare-const anc_1032I T0)
(declare-const anc_1033I T0)
(declare-const l1 T0)
(declare-const l2 T0)
(declare-sort T1)
(declare-fun Rhd1 (T0 T1) Bool)
(declare-fun Rmem0 (T0 T1) Bool)
(assert (= anc_1033I x_1))
(assert (= anc_1032I x_0))
(assert (= l2 x_1))
(assert (= l2 anc_1033I))
(assert (= l1 x_0))
(assert (= l1 anc_1032I))
(declare-fun set0 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set0 bv0) false) :pattern ((set0 bv0)))))
(assert (forall ((bv0 T1))
  (! (= (Rmem0 l1 bv0) (set0 bv0))
     :pattern ((Rmem0 l1 bv0))
     :pattern ((set0 bv0)))))
(declare-fun set1 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set1 bv0) false) :pattern ((set1 bv0)))))
(assert (forall ((bv0 T1))
  (! (= (Rhd1 l1 bv0) (set1 bv0))
     :pattern ((Rhd1 l1 bv0))
     :pattern ((set1 bv0)))))
(assert (= v_6 x_1))
(assert (= v_6 anc_1033I))
(assert (= v_6 l2))
(declare-fun set2 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set2 bv0) (or (Rmem0 x_0 bv0) (Rmem0 x_1 bv0)))
     :pattern ((set2 bv0))
     :pattern ((Rmem0 x_0 bv0))
     :pattern ((Rmem0 x_1 bv0)))))
(assert (not (forall ((bv0 T1))
       (! (= (Rmem0 v_6 bv0) (set2 bv0))
          :pattern ((Rmem0 v_6 bv0))
          :pattern ((set2 bv0))))))
(check-sat)

(declare-sort T2)
(declare-const v_6 T2)
(declare-const x_1 T2)
(declare-const x_0 T2)
(declare-const anc_1032I T2)
(declare-const anc_1033I T2)
(declare-const l1 T2)
(declare-const l2 T2)
(declare-sort T3)
(declare-const x T3)
(declare-const xs T2)
(declare-const sv_4103 T2)
(declare-const anc_1035I T3)
(declare-const anc_1038I T2)
(declare-fun Rhd1 (T2 T3) Bool)
(declare-fun Rmem0 (T2 T3) Bool)
(assert (= anc_1033I x_1))
(assert (= anc_1032I x_0))
(assert (= l2 x_1))
(assert (= l2 anc_1033I))
(assert (= l1 x_0))
(assert (= l1 anc_1032I))
(declare-fun set3 (T3) Bool)
(assert (forall ((bv0 T3)) (! (= (set3 bv0) (and (= bv0 x))) :pattern ((set3 bv0)))))
(declare-fun set4 (T3) Bool)
(assert (forall ((bv0 T3))
  (! (= (set4 bv0) (or (set3 bv0) (Rmem0 xs bv0)))
     :pattern ((set4 bv0))
     :pattern ((set3 bv0))
     :pattern ((Rmem0 xs bv0)))))
(assert (forall ((bv0 T3))
  (! (= (Rmem0 l1 bv0) (set4 bv0))
     :pattern ((Rmem0 l1 bv0))
     :pattern ((set4 bv0)))))
(declare-fun set5 (T3) Bool)
(assert (forall ((bv0 T3)) (! (= (set5 bv0) (and (= bv0 x))) :pattern ((set5 bv0)))))
(assert (forall ((bv0 T3))
  (! (= (Rhd1 l1 bv0) (set5 bv0))
     :pattern ((Rhd1 l1 bv0))
     :pattern ((set5 bv0)))))
(declare-fun set6 (T3) Bool)
(assert (forall ((bv0 T3))
  (! (= (set6 bv0) (or (Rmem0 xs bv0) (Rmem0 l2 bv0)))
     :pattern ((set6 bv0))
     :pattern ((Rmem0 xs bv0))
     :pattern ((Rmem0 l2 bv0)))))
(assert (forall ((bv0 T3))
  (! (= (Rmem0 anc_1038I bv0) (set6 bv0))
     :pattern ((Rmem0 anc_1038I bv0))
     :pattern ((set6 bv0)))))
(assert (= anc_1035I x))
(declare-fun set7 (T3) Bool)
(assert (forall ((bv0 T3))
  (! (= (set7 bv0) (and (= bv0 anc_1035I))) :pattern ((set7 bv0)))))
(declare-fun set8 (T3) Bool)
(assert (forall ((bv0 T3))
  (! (= (set8 bv0) (or (set7 bv0) (Rmem0 anc_1038I bv0)))
     :pattern ((set8 bv0))
     :pattern ((set7 bv0))
     :pattern ((Rmem0 anc_1038I bv0)))))
(assert (forall ((bv0 T3))
  (! (= (Rmem0 v_6 bv0) (set8 bv0))
     :pattern ((Rmem0 v_6 bv0))
     :pattern ((set8 bv0)))))
(declare-fun set9 (T3) Bool)
(assert (forall ((bv0 T3))
  (! (= (set9 bv0) (and (= bv0 anc_1035I))) :pattern ((set9 bv0)))))
(assert (forall ((bv0 T3))
  (! (= (Rhd1 v_6 bv0) (set9 bv0))
     :pattern ((Rhd1 v_6 bv0))
     :pattern ((set9 bv0)))))
(declare-fun set10 (T3) Bool)
(assert (forall ((bv0 T3))
  (! (= (set10 bv0) (or (Rmem0 x_0 bv0) (Rmem0 x_1 bv0)))
     :pattern ((set10 bv0))
     :pattern ((Rmem0 x_0 bv0))
     :pattern ((Rmem0 x_1 bv0)))))
(assert (not (forall ((bv0 T3))
       (! (= (Rmem0 v_6 bv0) (set10 bv0))
          :pattern ((Rmem0 v_6 bv0))
          :pattern ((set10 bv0))))))
(check-sat)

(declare-sort T4)
(declare-const l T4)
(declare-const x_2 T4)
(declare-const l T4)
(declare-sort T5)
(declare-fun Rhd1 (T4 T5) Bool)
(declare-fun Rmem0 (T4 T5) Bool)
(assert (= l x_2))
(declare-fun set11 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set11 bv0) false) :pattern ((set11 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rmem0 l bv0) (set11 bv0))
     :pattern ((Rmem0 l bv0))
     :pattern ((set11 bv0)))))
(declare-fun set12 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set12 bv0) false) :pattern ((set12 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rhd1 l bv0) (set12 bv0))
     :pattern ((Rhd1 l bv0))
     :pattern ((set12 bv0)))))
(declare-fun set13 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set13 bv0) false) :pattern ((set13 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rmem0 l bv0) (set13 bv0))
     :pattern ((Rmem0 l bv0))
     :pattern ((set13 bv0)))))
(declare-fun set14 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set14 bv0) false) :pattern ((set14 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rhd1 l bv0) (set14 bv0))
     :pattern ((Rhd1 l bv0))
     :pattern ((set14 bv0)))))
(assert (not (forall ((bv0 T5))
       (! (= (Rmem0 l bv0) (Rmem0 x_2 bv0))
          :pattern ((Rmem0 l bv0))
          :pattern ((Rmem0 x_2 bv0))))))
(check-sat)

(declare-sort T6)
(declare-const l T6)
(declare-const x_2 T6)
(declare-const l T6)
(declare-sort T7)
(declare-const x T7)
(declare-const xs T6)
(declare-const sv_4111 T6)
(declare-const anc_1026I T6)
(declare-const anc_1029I T7)
(declare-const anc_1030I T6)
(declare-const anc_1031I T6)
(declare-fun Rhd1 (T6 T7) Bool)
(declare-fun Rmem0 (T6 T7) Bool)
(assert (= l x_2))
(declare-fun set15 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set15 bv0) (and (= bv0 x))) :pattern ((set15 bv0)))))
(declare-fun set16 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set16 bv0) (or (set15 bv0) (Rmem0 xs bv0)))
     :pattern ((set16 bv0))
     :pattern ((set15 bv0))
     :pattern ((Rmem0 xs bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rmem0 l bv0) (set16 bv0))
     :pattern ((Rmem0 l bv0))
     :pattern ((set16 bv0)))))
(declare-fun set17 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set17 bv0) (and (= bv0 x))) :pattern ((set17 bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rhd1 l bv0) (set17 bv0))
     :pattern ((Rhd1 l bv0))
     :pattern ((set17 bv0)))))
(declare-fun set18 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set18 bv0) (and (= bv0 anc_1029I))) :pattern ((set18 bv0)))))
(declare-fun set19 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set19 bv0) (or (set18 bv0) (Rmem0 anc_1030I bv0)))
     :pattern ((set19 bv0))
     :pattern ((set18 bv0))
     :pattern ((Rmem0 anc_1030I bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rmem0 anc_1031I bv0) (set19 bv0))
     :pattern ((Rmem0 anc_1031I bv0))
     :pattern ((set19 bv0)))))
(declare-fun set20 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set20 bv0) (and (= bv0 anc_1029I))) :pattern ((set20 bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rhd1 anc_1031I bv0) (set20 bv0))
     :pattern ((Rhd1 anc_1031I bv0))
     :pattern ((set20 bv0)))))
(declare-fun set21 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set21 bv0) false) :pattern ((set21 bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rmem0 anc_1030I bv0) (set21 bv0))
     :pattern ((Rmem0 anc_1030I bv0))
     :pattern ((set21 bv0)))))
(declare-fun set22 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set22 bv0) false) :pattern ((set22 bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rhd1 anc_1030I bv0) (set22 bv0))
     :pattern ((Rhd1 anc_1030I bv0))
     :pattern ((set22 bv0)))))
(assert (= anc_1029I x))
(assert (forall ((bv0 T7))
  (! (= (Rmem0 anc_1026I bv0) (Rmem0 xs bv0))
     :pattern ((Rmem0 anc_1026I bv0))
     :pattern ((Rmem0 xs bv0)))))
(declare-fun set23 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set23 bv0) (or (Rmem0 anc_1026I bv0) (Rmem0 anc_1031I bv0)))
     :pattern ((set23 bv0))
     :pattern ((Rmem0 anc_1026I bv0))
     :pattern ((Rmem0 anc_1031I bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rmem0 l bv0) (set23 bv0))
     :pattern ((Rmem0 l bv0))
     :pattern ((set23 bv0)))))
(assert (not (forall ((bv0 T7))
       (! (= (Rmem0 l bv0) (Rmem0 x_2 bv0))
          :pattern ((Rmem0 l bv0))
          :pattern ((Rmem0 x_2 bv0))))))
(check-sat)

