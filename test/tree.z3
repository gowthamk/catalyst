(declare-sort T0)
(declare-const v_15 T0)
(declare-const x_0 T0)
(declare-sort T1)
(declare-const B T1)
(declare-const R T1)
(declare-const t T0)
(declare-const anc_1088I T1)
(declare-const a T0)
(declare-sort T2)
(declare-const x T2)
(declare-const anc_1087I T0)
(declare-const sv_4141 T0)
(declare-const sv_4144 T1)
(declare-const anc_1086I T1)
(declare-const b T0)
(declare-const y T2)
(declare-const anc_1085I T0)
(declare-const sv_4146 T0)
(declare-const sv_4148 T1)
(declare-const anc_1084I T1)
(declare-const c T0)
(declare-const z T2)
(declare-const d T0)
(declare-const sv_4150 T0)
(declare-const sv_4152 T1)
(declare-const anc_1090I T1)
(declare-const anc_1092I T1)
(declare-const anc_1093I T0)
(declare-const anc_1094I T2)
(declare-const anc_1095I T0)
(declare-const anc_1096I T0)
(declare-const anc_1097I T2)
(declare-const anc_1099I T1)
(declare-const anc_1100I T0)
(declare-const anc_1101I T2)
(declare-const anc_1102I T0)
(declare-const anc_1103I T0)
(declare-fun Rroot3 (T0 T2) Bool)
(declare-fun Rto2 (T0 T2 T2) Bool)
(declare-fun Rmem1 (T0 T2) Bool)
(declare-fun Rtos0 (T0 T2 T2) Bool)
(assert (= t x_0))
(declare-fun set0 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set0 bv0) (and (= bv0 x))) :pattern ((set0 bv0)))))
(declare-fun set1 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set1 bv0 bv1) (and (Rmem1 a bv0) (set0 bv1)))
     :pattern ((set1 bv0 bv1))
     :pattern ((Rmem1 a bv0) (set0 bv1)))))
(declare-fun set2 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set2 bv0) (and (= bv0 x))) :pattern ((set2 bv0)))))
(declare-fun set3 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set3 bv0 bv1) (and (set2 bv0) (Rmem1 anc_1087I bv1)))
     :pattern ((set3 bv0 bv1))
     :pattern ((set2 bv0) (Rmem1 anc_1087I bv1)))))
(declare-fun set4 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set4 bv0 bv1) (and (Rmem1 a bv0) (Rmem1 anc_1087I bv1)))
     :pattern ((set4 bv0 bv1))
     :pattern ((Rmem1 a bv0) (Rmem1 anc_1087I bv1)))))
(declare-fun set5 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set5 bv0 bv1) (or (set3 bv0 bv1) (set4 bv0 bv1)))
     :pattern ((set5 bv0 bv1))
     :pattern ((set3 bv0 bv1))
     :pattern ((set4 bv0 bv1)))))
(declare-fun set6 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set6 bv0 bv1) (or (set1 bv0 bv1) (set5 bv0 bv1)))
     :pattern ((set6 bv0 bv1))
     :pattern ((set1 bv0 bv1))
     :pattern ((set5 bv0 bv1)))))
(declare-fun set7 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set7 bv0 bv1) (or (Rtos0 anc_1087I bv0 bv1) (Rtos0 a bv0 bv1)))
     :pattern ((set7 bv0 bv1))
     :pattern ((Rtos0 anc_1087I bv0 bv1))
     :pattern ((Rtos0 a bv0 bv1)))))
(declare-fun set8 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set8 bv0 bv1) (or (set6 bv0 bv1) (set7 bv0 bv1)))
     :pattern ((set8 bv0 bv1))
     :pattern ((set6 bv0 bv1))
     :pattern ((set7 bv0 bv1)))))
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (Rtos0 t bv0 bv1) (set8 bv0 bv1))
     :pattern ((Rtos0 t bv0 bv1))
     :pattern ((set8 bv0 bv1)))))
(declare-fun set9 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set9 bv0) (and (= bv0 x))) :pattern ((set9 bv0)))))
(declare-fun set10 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set10 bv0 bv1) (and (Rmem1 a bv0) (set9 bv1)))
     :pattern ((set10 bv0 bv1))
     :pattern ((Rmem1 a bv0) (set9 bv1)))))
(declare-fun set11 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set11 bv0) (and (= bv0 x))) :pattern ((set11 bv0)))))
(declare-fun set12 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set12 bv0 bv1) (and (set11 bv0) (Rmem1 anc_1087I bv1)))
     :pattern ((set12 bv0 bv1))
     :pattern ((set11 bv0) (Rmem1 anc_1087I bv1)))))
(declare-fun set13 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set13 bv0 bv1) (and (Rmem1 a bv0) (Rmem1 anc_1087I bv1)))
     :pattern ((set13 bv0 bv1))
     :pattern ((Rmem1 a bv0) (Rmem1 anc_1087I bv1)))))
(declare-fun set14 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set14 bv0 bv1) (or (set12 bv0 bv1) (set13 bv0 bv1)))
     :pattern ((set14 bv0 bv1))
     :pattern ((set12 bv0 bv1))
     :pattern ((set13 bv0 bv1)))))
(declare-fun set15 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set15 bv0 bv1) (or (set10 bv0 bv1) (set14 bv0 bv1)))
     :pattern ((set15 bv0 bv1))
     :pattern ((set10 bv0 bv1))
     :pattern ((set14 bv0 bv1)))))
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (Rto2 t bv0 bv1) (set15 bv0 bv1))
     :pattern ((Rto2 t bv0 bv1))
     :pattern ((set15 bv0 bv1)))))
(declare-fun set16 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set16 bv0) (and (= bv0 x))) :pattern ((set16 bv0)))))
(declare-fun set17 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set17 bv0) (or (Rmem1 anc_1087I bv0) (Rmem1 a bv0)))
     :pattern ((set17 bv0))
     :pattern ((Rmem1 anc_1087I bv0))
     :pattern ((Rmem1 a bv0)))))
(declare-fun set18 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set18 bv0) (or (set16 bv0) (set17 bv0)))
     :pattern ((set18 bv0))
     :pattern ((set16 bv0))
     :pattern ((set17 bv0)))))
(assert (forall ((bv0 T2))
  (! (= (Rmem1 t bv0) (set18 bv0))
     :pattern ((Rmem1 t bv0))
     :pattern ((set18 bv0)))))
(declare-fun set19 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set19 bv0) (and (= bv0 x))) :pattern ((set19 bv0)))))
(assert (forall ((bv0 T2))
  (! (= (Rroot3 t bv0) (set19 bv0))
     :pattern ((Rroot3 t bv0))
     :pattern ((set19 bv0)))))
(declare-fun set20 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set20 bv0) (and (= bv0 anc_1101I))) :pattern ((set20 bv0)))))
(declare-fun set21 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set21 bv0 bv1) (and (Rmem1 anc_1100I bv0) (set20 bv1)))
     :pattern ((set21 bv0 bv1))
     :pattern ((Rmem1 anc_1100I bv0) (set20 bv1)))))
(declare-fun set22 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set22 bv0) (and (= bv0 anc_1101I))) :pattern ((set22 bv0)))))
(declare-fun set23 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set23 bv0 bv1) (and (set22 bv0) (Rmem1 anc_1102I bv1)))
     :pattern ((set23 bv0 bv1))
     :pattern ((set22 bv0) (Rmem1 anc_1102I bv1)))))
(declare-fun set24 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set24 bv0 bv1) (and (Rmem1 anc_1100I bv0) (Rmem1 anc_1102I bv1)))
     :pattern ((set24 bv0 bv1))
     :pattern ((Rmem1 anc_1100I bv0) (Rmem1 anc_1102I bv1)))))
(declare-fun set25 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set25 bv0 bv1) (or (set23 bv0 bv1) (set24 bv0 bv1)))
     :pattern ((set25 bv0 bv1))
     :pattern ((set23 bv0 bv1))
     :pattern ((set24 bv0 bv1)))))
(declare-fun set26 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set26 bv0 bv1) (or (set21 bv0 bv1) (set25 bv0 bv1)))
     :pattern ((set26 bv0 bv1))
     :pattern ((set21 bv0 bv1))
     :pattern ((set25 bv0 bv1)))))
(declare-fun set27 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set27 bv0 bv1)
        (or (Rtos0 anc_1102I bv0 bv1) (Rtos0 anc_1100I bv0 bv1)))
     :pattern ((set27 bv0 bv1))
     :pattern ((Rtos0 anc_1102I bv0 bv1))
     :pattern ((Rtos0 anc_1100I bv0 bv1)))))
(declare-fun set28 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set28 bv0 bv1) (or (set26 bv0 bv1) (set27 bv0 bv1)))
     :pattern ((set28 bv0 bv1))
     :pattern ((set26 bv0 bv1))
     :pattern ((set27 bv0 bv1)))))
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (Rtos0 anc_1103I bv0 bv1) (set28 bv0 bv1))
     :pattern ((Rtos0 anc_1103I bv0 bv1))
     :pattern ((set28 bv0 bv1)))))
(declare-fun set29 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set29 bv0) (and (= bv0 anc_1101I))) :pattern ((set29 bv0)))))
(declare-fun set30 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set30 bv0 bv1) (and (Rmem1 anc_1100I bv0) (set29 bv1)))
     :pattern ((set30 bv0 bv1))
     :pattern ((Rmem1 anc_1100I bv0) (set29 bv1)))))
(declare-fun set31 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set31 bv0) (and (= bv0 anc_1101I))) :pattern ((set31 bv0)))))
(declare-fun set32 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set32 bv0 bv1) (and (set31 bv0) (Rmem1 anc_1102I bv1)))
     :pattern ((set32 bv0 bv1))
     :pattern ((set31 bv0) (Rmem1 anc_1102I bv1)))))
(declare-fun set33 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set33 bv0 bv1) (and (Rmem1 anc_1100I bv0) (Rmem1 anc_1102I bv1)))
     :pattern ((set33 bv0 bv1))
     :pattern ((Rmem1 anc_1100I bv0) (Rmem1 anc_1102I bv1)))))
(declare-fun set34 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set34 bv0 bv1) (or (set32 bv0 bv1) (set33 bv0 bv1)))
     :pattern ((set34 bv0 bv1))
     :pattern ((set32 bv0 bv1))
     :pattern ((set33 bv0 bv1)))))
(declare-fun set35 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set35 bv0 bv1) (or (set30 bv0 bv1) (set34 bv0 bv1)))
     :pattern ((set35 bv0 bv1))
     :pattern ((set30 bv0 bv1))
     :pattern ((set34 bv0 bv1)))))
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (Rto2 anc_1103I bv0 bv1) (set35 bv0 bv1))
     :pattern ((Rto2 anc_1103I bv0 bv1))
     :pattern ((set35 bv0 bv1)))))
(declare-fun set36 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set36 bv0) (and (= bv0 anc_1101I))) :pattern ((set36 bv0)))))
(declare-fun set37 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set37 bv0) (or (Rmem1 anc_1102I bv0) (Rmem1 anc_1100I bv0)))
     :pattern ((set37 bv0))
     :pattern ((Rmem1 anc_1102I bv0))
     :pattern ((Rmem1 anc_1100I bv0)))))
(declare-fun set38 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set38 bv0) (or (set36 bv0) (set37 bv0)))
     :pattern ((set38 bv0))
     :pattern ((set36 bv0))
     :pattern ((set37 bv0)))))
(assert (forall ((bv0 T2))
  (! (= (Rmem1 anc_1103I bv0) (set38 bv0))
     :pattern ((Rmem1 anc_1103I bv0))
     :pattern ((set38 bv0)))))
(declare-fun set39 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set39 bv0) (and (= bv0 anc_1101I))) :pattern ((set39 bv0)))))
(assert (forall ((bv0 T2))
  (! (= (Rroot3 anc_1103I bv0) (set39 bv0))
     :pattern ((Rroot3 anc_1103I bv0))
     :pattern ((set39 bv0)))))
(assert (= anc_1102I d))
(assert (= anc_1101I z))
(assert (= anc_1100I c))
(assert (= anc_1099I B))
(assert (= anc_1097I y))
(declare-fun set40 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set40 bv0) (and (= bv0 anc_1094I))) :pattern ((set40 bv0)))))
(declare-fun set41 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set41 bv0 bv1) (and (Rmem1 anc_1093I bv0) (set40 bv1)))
     :pattern ((set41 bv0 bv1))
     :pattern ((Rmem1 anc_1093I bv0) (set40 bv1)))))
(declare-fun set42 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set42 bv0) (and (= bv0 anc_1094I))) :pattern ((set42 bv0)))))
(declare-fun set43 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set43 bv0 bv1) (and (set42 bv0) (Rmem1 anc_1095I bv1)))
     :pattern ((set43 bv0 bv1))
     :pattern ((set42 bv0) (Rmem1 anc_1095I bv1)))))
(declare-fun set44 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set44 bv0 bv1) (and (Rmem1 anc_1093I bv0) (Rmem1 anc_1095I bv1)))
     :pattern ((set44 bv0 bv1))
     :pattern ((Rmem1 anc_1093I bv0) (Rmem1 anc_1095I bv1)))))
(declare-fun set45 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set45 bv0 bv1) (or (set43 bv0 bv1) (set44 bv0 bv1)))
     :pattern ((set45 bv0 bv1))
     :pattern ((set43 bv0 bv1))
     :pattern ((set44 bv0 bv1)))))
(declare-fun set46 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set46 bv0 bv1) (or (set41 bv0 bv1) (set45 bv0 bv1)))
     :pattern ((set46 bv0 bv1))
     :pattern ((set41 bv0 bv1))
     :pattern ((set45 bv0 bv1)))))
(declare-fun set47 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set47 bv0 bv1)
        (or (Rtos0 anc_1095I bv0 bv1) (Rtos0 anc_1093I bv0 bv1)))
     :pattern ((set47 bv0 bv1))
     :pattern ((Rtos0 anc_1095I bv0 bv1))
     :pattern ((Rtos0 anc_1093I bv0 bv1)))))
(declare-fun set48 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set48 bv0 bv1) (or (set46 bv0 bv1) (set47 bv0 bv1)))
     :pattern ((set48 bv0 bv1))
     :pattern ((set46 bv0 bv1))
     :pattern ((set47 bv0 bv1)))))
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (Rtos0 anc_1096I bv0 bv1) (set48 bv0 bv1))
     :pattern ((Rtos0 anc_1096I bv0 bv1))
     :pattern ((set48 bv0 bv1)))))
(declare-fun set49 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set49 bv0) (and (= bv0 anc_1094I))) :pattern ((set49 bv0)))))
(declare-fun set50 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set50 bv0 bv1) (and (Rmem1 anc_1093I bv0) (set49 bv1)))
     :pattern ((set50 bv0 bv1))
     :pattern ((Rmem1 anc_1093I bv0) (set49 bv1)))))
(declare-fun set51 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set51 bv0) (and (= bv0 anc_1094I))) :pattern ((set51 bv0)))))
(declare-fun set52 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set52 bv0 bv1) (and (set51 bv0) (Rmem1 anc_1095I bv1)))
     :pattern ((set52 bv0 bv1))
     :pattern ((set51 bv0) (Rmem1 anc_1095I bv1)))))
(declare-fun set53 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set53 bv0 bv1) (and (Rmem1 anc_1093I bv0) (Rmem1 anc_1095I bv1)))
     :pattern ((set53 bv0 bv1))
     :pattern ((Rmem1 anc_1093I bv0) (Rmem1 anc_1095I bv1)))))
(declare-fun set54 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set54 bv0 bv1) (or (set52 bv0 bv1) (set53 bv0 bv1)))
     :pattern ((set54 bv0 bv1))
     :pattern ((set52 bv0 bv1))
     :pattern ((set53 bv0 bv1)))))
(declare-fun set55 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set55 bv0 bv1) (or (set50 bv0 bv1) (set54 bv0 bv1)))
     :pattern ((set55 bv0 bv1))
     :pattern ((set50 bv0 bv1))
     :pattern ((set54 bv0 bv1)))))
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (Rto2 anc_1096I bv0 bv1) (set55 bv0 bv1))
     :pattern ((Rto2 anc_1096I bv0 bv1))
     :pattern ((set55 bv0 bv1)))))
(declare-fun set56 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set56 bv0) (and (= bv0 anc_1094I))) :pattern ((set56 bv0)))))
(declare-fun set57 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set57 bv0) (or (Rmem1 anc_1095I bv0) (Rmem1 anc_1093I bv0)))
     :pattern ((set57 bv0))
     :pattern ((Rmem1 anc_1095I bv0))
     :pattern ((Rmem1 anc_1093I bv0)))))
(declare-fun set58 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set58 bv0) (or (set56 bv0) (set57 bv0)))
     :pattern ((set58 bv0))
     :pattern ((set56 bv0))
     :pattern ((set57 bv0)))))
(assert (forall ((bv0 T2))
  (! (= (Rmem1 anc_1096I bv0) (set58 bv0))
     :pattern ((Rmem1 anc_1096I bv0))
     :pattern ((set58 bv0)))))
(declare-fun set59 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set59 bv0) (and (= bv0 anc_1094I))) :pattern ((set59 bv0)))))
(assert (forall ((bv0 T2))
  (! (= (Rroot3 anc_1096I bv0) (set59 bv0))
     :pattern ((Rroot3 anc_1096I bv0))
     :pattern ((set59 bv0)))))
(assert (= anc_1095I b))
(assert (= anc_1094I x))
(assert (= anc_1093I a))
(assert (= anc_1092I B))
(assert (= anc_1090I R))
(declare-fun set60 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set60 bv0) (and (= bv0 z))) :pattern ((set60 bv0)))))
(declare-fun set61 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set61 bv0 bv1) (and (Rmem1 c bv0) (set60 bv1)))
     :pattern ((set61 bv0 bv1))
     :pattern ((Rmem1 c bv0) (set60 bv1)))))
(declare-fun set62 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set62 bv0) (and (= bv0 z))) :pattern ((set62 bv0)))))
(declare-fun set63 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set63 bv0 bv1) (and (set62 bv0) (Rmem1 d bv1)))
     :pattern ((set63 bv0 bv1))
     :pattern ((set62 bv0) (Rmem1 d bv1)))))
(declare-fun set64 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set64 bv0 bv1) (and (Rmem1 c bv0) (Rmem1 d bv1)))
     :pattern ((set64 bv0 bv1))
     :pattern ((Rmem1 c bv0) (Rmem1 d bv1)))))
(declare-fun set65 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set65 bv0 bv1) (or (set63 bv0 bv1) (set64 bv0 bv1)))
     :pattern ((set65 bv0 bv1))
     :pattern ((set63 bv0 bv1))
     :pattern ((set64 bv0 bv1)))))
(declare-fun set66 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set66 bv0 bv1) (or (set61 bv0 bv1) (set65 bv0 bv1)))
     :pattern ((set66 bv0 bv1))
     :pattern ((set61 bv0 bv1))
     :pattern ((set65 bv0 bv1)))))
(declare-fun set67 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set67 bv0 bv1) (or (Rtos0 d bv0 bv1) (Rtos0 c bv0 bv1)))
     :pattern ((set67 bv0 bv1))
     :pattern ((Rtos0 d bv0 bv1))
     :pattern ((Rtos0 c bv0 bv1)))))
(declare-fun set68 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set68 bv0 bv1) (or (set66 bv0 bv1) (set67 bv0 bv1)))
     :pattern ((set68 bv0 bv1))
     :pattern ((set66 bv0 bv1))
     :pattern ((set67 bv0 bv1)))))
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (Rtos0 anc_1085I bv0 bv1) (set68 bv0 bv1))
     :pattern ((Rtos0 anc_1085I bv0 bv1))
     :pattern ((set68 bv0 bv1)))))
(declare-fun set69 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set69 bv0) (and (= bv0 z))) :pattern ((set69 bv0)))))
(declare-fun set70 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set70 bv0 bv1) (and (Rmem1 c bv0) (set69 bv1)))
     :pattern ((set70 bv0 bv1))
     :pattern ((Rmem1 c bv0) (set69 bv1)))))
(declare-fun set71 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set71 bv0) (and (= bv0 z))) :pattern ((set71 bv0)))))
(declare-fun set72 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set72 bv0 bv1) (and (set71 bv0) (Rmem1 d bv1)))
     :pattern ((set72 bv0 bv1))
     :pattern ((set71 bv0) (Rmem1 d bv1)))))
(declare-fun set73 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set73 bv0 bv1) (and (Rmem1 c bv0) (Rmem1 d bv1)))
     :pattern ((set73 bv0 bv1))
     :pattern ((Rmem1 c bv0) (Rmem1 d bv1)))))
(declare-fun set74 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set74 bv0 bv1) (or (set72 bv0 bv1) (set73 bv0 bv1)))
     :pattern ((set74 bv0 bv1))
     :pattern ((set72 bv0 bv1))
     :pattern ((set73 bv0 bv1)))))
(declare-fun set75 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set75 bv0 bv1) (or (set70 bv0 bv1) (set74 bv0 bv1)))
     :pattern ((set75 bv0 bv1))
     :pattern ((set70 bv0 bv1))
     :pattern ((set74 bv0 bv1)))))
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (Rto2 anc_1085I bv0 bv1) (set75 bv0 bv1))
     :pattern ((Rto2 anc_1085I bv0 bv1))
     :pattern ((set75 bv0 bv1)))))
(declare-fun set76 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set76 bv0) (and (= bv0 z))) :pattern ((set76 bv0)))))
(declare-fun set77 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set77 bv0) (or (Rmem1 d bv0) (Rmem1 c bv0)))
     :pattern ((set77 bv0))
     :pattern ((Rmem1 d bv0))
     :pattern ((Rmem1 c bv0)))))
(declare-fun set78 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set78 bv0) (or (set76 bv0) (set77 bv0)))
     :pattern ((set78 bv0))
     :pattern ((set76 bv0))
     :pattern ((set77 bv0)))))
(assert (forall ((bv0 T2))
  (! (= (Rmem1 anc_1085I bv0) (set78 bv0))
     :pattern ((Rmem1 anc_1085I bv0))
     :pattern ((set78 bv0)))))
(declare-fun set79 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set79 bv0) (and (= bv0 z))) :pattern ((set79 bv0)))))
(assert (forall ((bv0 T2))
  (! (= (Rroot3 anc_1085I bv0) (set79 bv0))
     :pattern ((Rroot3 anc_1085I bv0))
     :pattern ((set79 bv0)))))
(declare-fun set80 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set80 bv0) (and (= bv0 y))) :pattern ((set80 bv0)))))
(declare-fun set81 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set81 bv0 bv1) (and (Rmem1 b bv0) (set80 bv1)))
     :pattern ((set81 bv0 bv1))
     :pattern ((Rmem1 b bv0) (set80 bv1)))))
(declare-fun set82 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set82 bv0) (and (= bv0 y))) :pattern ((set82 bv0)))))
(declare-fun set83 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set83 bv0 bv1) (and (set82 bv0) (Rmem1 anc_1085I bv1)))
     :pattern ((set83 bv0 bv1))
     :pattern ((set82 bv0) (Rmem1 anc_1085I bv1)))))
(declare-fun set84 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set84 bv0 bv1) (and (Rmem1 b bv0) (Rmem1 anc_1085I bv1)))
     :pattern ((set84 bv0 bv1))
     :pattern ((Rmem1 b bv0) (Rmem1 anc_1085I bv1)))))
(declare-fun set85 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set85 bv0 bv1) (or (set83 bv0 bv1) (set84 bv0 bv1)))
     :pattern ((set85 bv0 bv1))
     :pattern ((set83 bv0 bv1))
     :pattern ((set84 bv0 bv1)))))
(declare-fun set86 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set86 bv0 bv1) (or (set81 bv0 bv1) (set85 bv0 bv1)))
     :pattern ((set86 bv0 bv1))
     :pattern ((set81 bv0 bv1))
     :pattern ((set85 bv0 bv1)))))
(declare-fun set87 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set87 bv0 bv1) (or (Rtos0 anc_1085I bv0 bv1) (Rtos0 b bv0 bv1)))
     :pattern ((set87 bv0 bv1))
     :pattern ((Rtos0 anc_1085I bv0 bv1))
     :pattern ((Rtos0 b bv0 bv1)))))
(declare-fun set88 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set88 bv0 bv1) (or (set86 bv0 bv1) (set87 bv0 bv1)))
     :pattern ((set88 bv0 bv1))
     :pattern ((set86 bv0 bv1))
     :pattern ((set87 bv0 bv1)))))
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (Rtos0 anc_1087I bv0 bv1) (set88 bv0 bv1))
     :pattern ((Rtos0 anc_1087I bv0 bv1))
     :pattern ((set88 bv0 bv1)))))
(declare-fun set89 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set89 bv0) (and (= bv0 y))) :pattern ((set89 bv0)))))
(declare-fun set90 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set90 bv0 bv1) (and (Rmem1 b bv0) (set89 bv1)))
     :pattern ((set90 bv0 bv1))
     :pattern ((Rmem1 b bv0) (set89 bv1)))))
(declare-fun set91 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set91 bv0) (and (= bv0 y))) :pattern ((set91 bv0)))))
(declare-fun set92 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set92 bv0 bv1) (and (set91 bv0) (Rmem1 anc_1085I bv1)))
     :pattern ((set92 bv0 bv1))
     :pattern ((set91 bv0) (Rmem1 anc_1085I bv1)))))
(declare-fun set93 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set93 bv0 bv1) (and (Rmem1 b bv0) (Rmem1 anc_1085I bv1)))
     :pattern ((set93 bv0 bv1))
     :pattern ((Rmem1 b bv0) (Rmem1 anc_1085I bv1)))))
(declare-fun set94 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set94 bv0 bv1) (or (set92 bv0 bv1) (set93 bv0 bv1)))
     :pattern ((set94 bv0 bv1))
     :pattern ((set92 bv0 bv1))
     :pattern ((set93 bv0 bv1)))))
(declare-fun set95 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set95 bv0 bv1) (or (set90 bv0 bv1) (set94 bv0 bv1)))
     :pattern ((set95 bv0 bv1))
     :pattern ((set90 bv0 bv1))
     :pattern ((set94 bv0 bv1)))))
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (Rto2 anc_1087I bv0 bv1) (set95 bv0 bv1))
     :pattern ((Rto2 anc_1087I bv0 bv1))
     :pattern ((set95 bv0 bv1)))))
(declare-fun set96 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set96 bv0) (and (= bv0 y))) :pattern ((set96 bv0)))))
(declare-fun set97 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set97 bv0) (or (Rmem1 anc_1085I bv0) (Rmem1 b bv0)))
     :pattern ((set97 bv0))
     :pattern ((Rmem1 anc_1085I bv0))
     :pattern ((Rmem1 b bv0)))))
(declare-fun set98 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set98 bv0) (or (set96 bv0) (set97 bv0)))
     :pattern ((set98 bv0))
     :pattern ((set96 bv0))
     :pattern ((set97 bv0)))))
(assert (forall ((bv0 T2))
  (! (= (Rmem1 anc_1087I bv0) (set98 bv0))
     :pattern ((Rmem1 anc_1087I bv0))
     :pattern ((set98 bv0)))))
(declare-fun set99 (T2) Bool)
(assert (forall ((bv0 T2)) (! (= (set99 bv0) (and (= bv0 y))) :pattern ((set99 bv0)))))
(assert (forall ((bv0 T2))
  (! (= (Rroot3 anc_1087I bv0) (set99 bv0))
     :pattern ((Rroot3 anc_1087I bv0))
     :pattern ((set99 bv0)))))
(declare-fun set100 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set100 bv0) (and (= bv0 anc_1097I))) :pattern ((set100 bv0)))))
(declare-fun set101 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set101 bv0 bv1) (and (Rmem1 anc_1096I bv0) (set100 bv1)))
     :pattern ((set101 bv0 bv1))
     :pattern ((Rmem1 anc_1096I bv0) (set100 bv1)))))
(declare-fun set102 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set102 bv0) (and (= bv0 anc_1097I))) :pattern ((set102 bv0)))))
(declare-fun set103 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set103 bv0 bv1) (and (set102 bv0) (Rmem1 anc_1103I bv1)))
     :pattern ((set103 bv0 bv1))
     :pattern ((set102 bv0) (Rmem1 anc_1103I bv1)))))
(declare-fun set104 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set104 bv0 bv1) (and (Rmem1 anc_1096I bv0) (Rmem1 anc_1103I bv1)))
     :pattern ((set104 bv0 bv1))
     :pattern ((Rmem1 anc_1096I bv0) (Rmem1 anc_1103I bv1)))))
(declare-fun set105 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set105 bv0 bv1) (or (set103 bv0 bv1) (set104 bv0 bv1)))
     :pattern ((set105 bv0 bv1))
     :pattern ((set103 bv0 bv1))
     :pattern ((set104 bv0 bv1)))))
(declare-fun set106 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set106 bv0 bv1) (or (set101 bv0 bv1) (set105 bv0 bv1)))
     :pattern ((set106 bv0 bv1))
     :pattern ((set101 bv0 bv1))
     :pattern ((set105 bv0 bv1)))))
(declare-fun set107 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set107 bv0 bv1)
        (or (Rtos0 anc_1103I bv0 bv1) (Rtos0 anc_1096I bv0 bv1)))
     :pattern ((set107 bv0 bv1))
     :pattern ((Rtos0 anc_1103I bv0 bv1))
     :pattern ((Rtos0 anc_1096I bv0 bv1)))))
(declare-fun set108 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set108 bv0 bv1) (or (set106 bv0 bv1) (set107 bv0 bv1)))
     :pattern ((set108 bv0 bv1))
     :pattern ((set106 bv0 bv1))
     :pattern ((set107 bv0 bv1)))))
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (Rtos0 v_15 bv0 bv1) (set108 bv0 bv1))
     :pattern ((Rtos0 v_15 bv0 bv1))
     :pattern ((set108 bv0 bv1)))))
(declare-fun set109 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set109 bv0) (and (= bv0 anc_1097I))) :pattern ((set109 bv0)))))
(declare-fun set110 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set110 bv0 bv1) (and (Rmem1 anc_1096I bv0) (set109 bv1)))
     :pattern ((set110 bv0 bv1))
     :pattern ((Rmem1 anc_1096I bv0) (set109 bv1)))))
(declare-fun set111 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set111 bv0) (and (= bv0 anc_1097I))) :pattern ((set111 bv0)))))
(declare-fun set112 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set112 bv0 bv1) (and (set111 bv0) (Rmem1 anc_1103I bv1)))
     :pattern ((set112 bv0 bv1))
     :pattern ((set111 bv0) (Rmem1 anc_1103I bv1)))))
(declare-fun set113 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set113 bv0 bv1) (and (Rmem1 anc_1096I bv0) (Rmem1 anc_1103I bv1)))
     :pattern ((set113 bv0 bv1))
     :pattern ((Rmem1 anc_1096I bv0) (Rmem1 anc_1103I bv1)))))
(declare-fun set114 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set114 bv0 bv1) (or (set112 bv0 bv1) (set113 bv0 bv1)))
     :pattern ((set114 bv0 bv1))
     :pattern ((set112 bv0 bv1))
     :pattern ((set113 bv0 bv1)))))
(declare-fun set115 (T2 T2) Bool)
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (set115 bv0 bv1) (or (set110 bv0 bv1) (set114 bv0 bv1)))
     :pattern ((set115 bv0 bv1))
     :pattern ((set110 bv0 bv1))
     :pattern ((set114 bv0 bv1)))))
(assert (forall ((bv1 T2) (bv0 T2))
  (! (= (Rto2 v_15 bv0 bv1) (set115 bv0 bv1))
     :pattern ((Rto2 v_15 bv0 bv1))
     :pattern ((set115 bv0 bv1)))))
(declare-fun set116 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set116 bv0) (and (= bv0 anc_1097I))) :pattern ((set116 bv0)))))
(declare-fun set117 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set117 bv0) (or (Rmem1 anc_1103I bv0) (Rmem1 anc_1096I bv0)))
     :pattern ((set117 bv0))
     :pattern ((Rmem1 anc_1103I bv0))
     :pattern ((Rmem1 anc_1096I bv0)))))
(declare-fun set118 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set118 bv0) (or (set116 bv0) (set117 bv0)))
     :pattern ((set118 bv0))
     :pattern ((set116 bv0))
     :pattern ((set117 bv0)))))
(assert (forall ((bv0 T2))
  (! (= (Rmem1 v_15 bv0) (set118 bv0))
     :pattern ((Rmem1 v_15 bv0))
     :pattern ((set118 bv0)))))
(declare-fun set119 (T2) Bool)
(assert (forall ((bv0 T2))
  (! (= (set119 bv0) (and (= bv0 anc_1097I))) :pattern ((set119 bv0)))))
(assert (forall ((bv0 T2))
  (! (= (Rroot3 v_15 bv0) (set119 bv0))
     :pattern ((Rroot3 v_15 bv0))
     :pattern ((set119 bv0)))))
(assert (not (forall ((bv1 T2) (bv0 T2))
       (! (= (Rtos0 v_15 bv0 bv1) (Rtos0 x_0 bv0 bv1))
          :pattern ((Rtos0 v_15 bv0 bv1))
          :pattern ((Rtos0 x_0 bv0 bv1))))))
(check-sat)

(declare-sort T3)
(declare-const v_15 T3)
(declare-const x_0 T3)
(declare-sort T4)
(declare-const B T4)
(declare-const R T4)
(declare-const t T3)
(declare-const anc_1088I T4)
(declare-const a T3)
(declare-sort T5)
(declare-const x T5)
(declare-const anc_1087I T3)
(declare-const sv_4141 T3)
(declare-const sv_4144 T4)
(declare-const anc_1086I T4)
(declare-const b T3)
(declare-const y T5)
(declare-const anc_1085I T3)
(declare-const sv_4146 T3)
(declare-const sv_4148 T4)
(declare-const anc_1084I T4)
(declare-const c T3)
(declare-const z T5)
(declare-const d T3)
(declare-const sv_4150 T3)
(declare-const sv_4152 T4)
(declare-const anc_1090I T4)
(declare-const anc_1092I T4)
(declare-const anc_1093I T3)
(declare-const anc_1094I T5)
(declare-const anc_1095I T3)
(declare-const anc_1096I T3)
(declare-const anc_1097I T5)
(declare-const anc_1099I T4)
(declare-const anc_1100I T3)
(declare-const anc_1101I T5)
(declare-const anc_1102I T3)
(declare-const anc_1103I T3)
(declare-fun Rroot3 (T3 T5) Bool)
(declare-fun Rto2 (T3 T5 T5) Bool)
(declare-fun Rmem1 (T3 T5) Bool)
(declare-fun Rtos0 (T3 T5 T5) Bool)
(assert (= t x_0))
(declare-fun set120 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set120 bv0) (and (= bv0 x))) :pattern ((set120 bv0)))))
(declare-fun set121 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set121 bv0 bv1) (and (Rmem1 a bv0) (set120 bv1)))
     :pattern ((set121 bv0 bv1))
     :pattern ((Rmem1 a bv0) (set120 bv1)))))
(declare-fun set122 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set122 bv0) (and (= bv0 x))) :pattern ((set122 bv0)))))
(declare-fun set123 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set123 bv0 bv1) (and (set122 bv0) (Rmem1 anc_1087I bv1)))
     :pattern ((set123 bv0 bv1))
     :pattern ((set122 bv0) (Rmem1 anc_1087I bv1)))))
(declare-fun set124 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set124 bv0 bv1) (and (Rmem1 a bv0) (Rmem1 anc_1087I bv1)))
     :pattern ((set124 bv0 bv1))
     :pattern ((Rmem1 a bv0) (Rmem1 anc_1087I bv1)))))
(declare-fun set125 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set125 bv0 bv1) (or (set123 bv0 bv1) (set124 bv0 bv1)))
     :pattern ((set125 bv0 bv1))
     :pattern ((set123 bv0 bv1))
     :pattern ((set124 bv0 bv1)))))
(declare-fun set126 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set126 bv0 bv1) (or (set121 bv0 bv1) (set125 bv0 bv1)))
     :pattern ((set126 bv0 bv1))
     :pattern ((set121 bv0 bv1))
     :pattern ((set125 bv0 bv1)))))
(declare-fun set127 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set127 bv0 bv1) (or (Rtos0 anc_1087I bv0 bv1) (Rtos0 a bv0 bv1)))
     :pattern ((set127 bv0 bv1))
     :pattern ((Rtos0 anc_1087I bv0 bv1))
     :pattern ((Rtos0 a bv0 bv1)))))
(declare-fun set128 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set128 bv0 bv1) (or (set126 bv0 bv1) (set127 bv0 bv1)))
     :pattern ((set128 bv0 bv1))
     :pattern ((set126 bv0 bv1))
     :pattern ((set127 bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rtos0 t bv0 bv1) (set128 bv0 bv1))
     :pattern ((Rtos0 t bv0 bv1))
     :pattern ((set128 bv0 bv1)))))
(declare-fun set129 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set129 bv0) (and (= bv0 x))) :pattern ((set129 bv0)))))
(declare-fun set130 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set130 bv0 bv1) (and (Rmem1 a bv0) (set129 bv1)))
     :pattern ((set130 bv0 bv1))
     :pattern ((Rmem1 a bv0) (set129 bv1)))))
(declare-fun set131 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set131 bv0) (and (= bv0 x))) :pattern ((set131 bv0)))))
(declare-fun set132 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set132 bv0 bv1) (and (set131 bv0) (Rmem1 anc_1087I bv1)))
     :pattern ((set132 bv0 bv1))
     :pattern ((set131 bv0) (Rmem1 anc_1087I bv1)))))
(declare-fun set133 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set133 bv0 bv1) (and (Rmem1 a bv0) (Rmem1 anc_1087I bv1)))
     :pattern ((set133 bv0 bv1))
     :pattern ((Rmem1 a bv0) (Rmem1 anc_1087I bv1)))))
(declare-fun set134 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set134 bv0 bv1) (or (set132 bv0 bv1) (set133 bv0 bv1)))
     :pattern ((set134 bv0 bv1))
     :pattern ((set132 bv0 bv1))
     :pattern ((set133 bv0 bv1)))))
(declare-fun set135 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set135 bv0 bv1) (or (set130 bv0 bv1) (set134 bv0 bv1)))
     :pattern ((set135 bv0 bv1))
     :pattern ((set130 bv0 bv1))
     :pattern ((set134 bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rto2 t bv0 bv1) (set135 bv0 bv1))
     :pattern ((Rto2 t bv0 bv1))
     :pattern ((set135 bv0 bv1)))))
(declare-fun set136 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set136 bv0) (and (= bv0 x))) :pattern ((set136 bv0)))))
(declare-fun set137 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set137 bv0) (or (Rmem1 anc_1087I bv0) (Rmem1 a bv0)))
     :pattern ((set137 bv0))
     :pattern ((Rmem1 anc_1087I bv0))
     :pattern ((Rmem1 a bv0)))))
(declare-fun set138 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set138 bv0) (or (set136 bv0) (set137 bv0)))
     :pattern ((set138 bv0))
     :pattern ((set136 bv0))
     :pattern ((set137 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rmem1 t bv0) (set138 bv0))
     :pattern ((Rmem1 t bv0))
     :pattern ((set138 bv0)))))
(declare-fun set139 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set139 bv0) (and (= bv0 x))) :pattern ((set139 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rroot3 t bv0) (set139 bv0))
     :pattern ((Rroot3 t bv0))
     :pattern ((set139 bv0)))))
(declare-fun set140 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set140 bv0) (and (= bv0 anc_1101I))) :pattern ((set140 bv0)))))
(declare-fun set141 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set141 bv0 bv1) (and (Rmem1 anc_1100I bv0) (set140 bv1)))
     :pattern ((set141 bv0 bv1))
     :pattern ((Rmem1 anc_1100I bv0) (set140 bv1)))))
(declare-fun set142 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set142 bv0) (and (= bv0 anc_1101I))) :pattern ((set142 bv0)))))
(declare-fun set143 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set143 bv0 bv1) (and (set142 bv0) (Rmem1 anc_1102I bv1)))
     :pattern ((set143 bv0 bv1))
     :pattern ((set142 bv0) (Rmem1 anc_1102I bv1)))))
(declare-fun set144 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set144 bv0 bv1) (and (Rmem1 anc_1100I bv0) (Rmem1 anc_1102I bv1)))
     :pattern ((set144 bv0 bv1))
     :pattern ((Rmem1 anc_1100I bv0) (Rmem1 anc_1102I bv1)))))
(declare-fun set145 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set145 bv0 bv1) (or (set143 bv0 bv1) (set144 bv0 bv1)))
     :pattern ((set145 bv0 bv1))
     :pattern ((set143 bv0 bv1))
     :pattern ((set144 bv0 bv1)))))
(declare-fun set146 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set146 bv0 bv1) (or (set141 bv0 bv1) (set145 bv0 bv1)))
     :pattern ((set146 bv0 bv1))
     :pattern ((set141 bv0 bv1))
     :pattern ((set145 bv0 bv1)))))
(declare-fun set147 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set147 bv0 bv1)
        (or (Rtos0 anc_1102I bv0 bv1) (Rtos0 anc_1100I bv0 bv1)))
     :pattern ((set147 bv0 bv1))
     :pattern ((Rtos0 anc_1102I bv0 bv1))
     :pattern ((Rtos0 anc_1100I bv0 bv1)))))
(declare-fun set148 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set148 bv0 bv1) (or (set146 bv0 bv1) (set147 bv0 bv1)))
     :pattern ((set148 bv0 bv1))
     :pattern ((set146 bv0 bv1))
     :pattern ((set147 bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rtos0 anc_1103I bv0 bv1) (set148 bv0 bv1))
     :pattern ((Rtos0 anc_1103I bv0 bv1))
     :pattern ((set148 bv0 bv1)))))
(declare-fun set149 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set149 bv0) (and (= bv0 anc_1101I))) :pattern ((set149 bv0)))))
(declare-fun set150 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set150 bv0 bv1) (and (Rmem1 anc_1100I bv0) (set149 bv1)))
     :pattern ((set150 bv0 bv1))
     :pattern ((Rmem1 anc_1100I bv0) (set149 bv1)))))
(declare-fun set151 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set151 bv0) (and (= bv0 anc_1101I))) :pattern ((set151 bv0)))))
(declare-fun set152 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set152 bv0 bv1) (and (set151 bv0) (Rmem1 anc_1102I bv1)))
     :pattern ((set152 bv0 bv1))
     :pattern ((set151 bv0) (Rmem1 anc_1102I bv1)))))
(declare-fun set153 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set153 bv0 bv1) (and (Rmem1 anc_1100I bv0) (Rmem1 anc_1102I bv1)))
     :pattern ((set153 bv0 bv1))
     :pattern ((Rmem1 anc_1100I bv0) (Rmem1 anc_1102I bv1)))))
(declare-fun set154 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set154 bv0 bv1) (or (set152 bv0 bv1) (set153 bv0 bv1)))
     :pattern ((set154 bv0 bv1))
     :pattern ((set152 bv0 bv1))
     :pattern ((set153 bv0 bv1)))))
(declare-fun set155 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set155 bv0 bv1) (or (set150 bv0 bv1) (set154 bv0 bv1)))
     :pattern ((set155 bv0 bv1))
     :pattern ((set150 bv0 bv1))
     :pattern ((set154 bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rto2 anc_1103I bv0 bv1) (set155 bv0 bv1))
     :pattern ((Rto2 anc_1103I bv0 bv1))
     :pattern ((set155 bv0 bv1)))))
(declare-fun set156 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set156 bv0) (and (= bv0 anc_1101I))) :pattern ((set156 bv0)))))
(declare-fun set157 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set157 bv0) (or (Rmem1 anc_1102I bv0) (Rmem1 anc_1100I bv0)))
     :pattern ((set157 bv0))
     :pattern ((Rmem1 anc_1102I bv0))
     :pattern ((Rmem1 anc_1100I bv0)))))
(declare-fun set158 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set158 bv0) (or (set156 bv0) (set157 bv0)))
     :pattern ((set158 bv0))
     :pattern ((set156 bv0))
     :pattern ((set157 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rmem1 anc_1103I bv0) (set158 bv0))
     :pattern ((Rmem1 anc_1103I bv0))
     :pattern ((set158 bv0)))))
(declare-fun set159 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set159 bv0) (and (= bv0 anc_1101I))) :pattern ((set159 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rroot3 anc_1103I bv0) (set159 bv0))
     :pattern ((Rroot3 anc_1103I bv0))
     :pattern ((set159 bv0)))))
(assert (= anc_1102I d))
(assert (= anc_1101I z))
(assert (= anc_1100I c))
(assert (= anc_1099I B))
(assert (= anc_1097I y))
(declare-fun set160 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set160 bv0) (and (= bv0 anc_1094I))) :pattern ((set160 bv0)))))
(declare-fun set161 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set161 bv0 bv1) (and (Rmem1 anc_1093I bv0) (set160 bv1)))
     :pattern ((set161 bv0 bv1))
     :pattern ((Rmem1 anc_1093I bv0) (set160 bv1)))))
(declare-fun set162 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set162 bv0) (and (= bv0 anc_1094I))) :pattern ((set162 bv0)))))
(declare-fun set163 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set163 bv0 bv1) (and (set162 bv0) (Rmem1 anc_1095I bv1)))
     :pattern ((set163 bv0 bv1))
     :pattern ((set162 bv0) (Rmem1 anc_1095I bv1)))))
(declare-fun set164 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set164 bv0 bv1) (and (Rmem1 anc_1093I bv0) (Rmem1 anc_1095I bv1)))
     :pattern ((set164 bv0 bv1))
     :pattern ((Rmem1 anc_1093I bv0) (Rmem1 anc_1095I bv1)))))
(declare-fun set165 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set165 bv0 bv1) (or (set163 bv0 bv1) (set164 bv0 bv1)))
     :pattern ((set165 bv0 bv1))
     :pattern ((set163 bv0 bv1))
     :pattern ((set164 bv0 bv1)))))
(declare-fun set166 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set166 bv0 bv1) (or (set161 bv0 bv1) (set165 bv0 bv1)))
     :pattern ((set166 bv0 bv1))
     :pattern ((set161 bv0 bv1))
     :pattern ((set165 bv0 bv1)))))
(declare-fun set167 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set167 bv0 bv1)
        (or (Rtos0 anc_1095I bv0 bv1) (Rtos0 anc_1093I bv0 bv1)))
     :pattern ((set167 bv0 bv1))
     :pattern ((Rtos0 anc_1095I bv0 bv1))
     :pattern ((Rtos0 anc_1093I bv0 bv1)))))
(declare-fun set168 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set168 bv0 bv1) (or (set166 bv0 bv1) (set167 bv0 bv1)))
     :pattern ((set168 bv0 bv1))
     :pattern ((set166 bv0 bv1))
     :pattern ((set167 bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rtos0 anc_1096I bv0 bv1) (set168 bv0 bv1))
     :pattern ((Rtos0 anc_1096I bv0 bv1))
     :pattern ((set168 bv0 bv1)))))
(declare-fun set169 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set169 bv0) (and (= bv0 anc_1094I))) :pattern ((set169 bv0)))))
(declare-fun set170 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set170 bv0 bv1) (and (Rmem1 anc_1093I bv0) (set169 bv1)))
     :pattern ((set170 bv0 bv1))
     :pattern ((Rmem1 anc_1093I bv0) (set169 bv1)))))
(declare-fun set171 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set171 bv0) (and (= bv0 anc_1094I))) :pattern ((set171 bv0)))))
(declare-fun set172 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set172 bv0 bv1) (and (set171 bv0) (Rmem1 anc_1095I bv1)))
     :pattern ((set172 bv0 bv1))
     :pattern ((set171 bv0) (Rmem1 anc_1095I bv1)))))
(declare-fun set173 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set173 bv0 bv1) (and (Rmem1 anc_1093I bv0) (Rmem1 anc_1095I bv1)))
     :pattern ((set173 bv0 bv1))
     :pattern ((Rmem1 anc_1093I bv0) (Rmem1 anc_1095I bv1)))))
(declare-fun set174 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set174 bv0 bv1) (or (set172 bv0 bv1) (set173 bv0 bv1)))
     :pattern ((set174 bv0 bv1))
     :pattern ((set172 bv0 bv1))
     :pattern ((set173 bv0 bv1)))))
(declare-fun set175 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set175 bv0 bv1) (or (set170 bv0 bv1) (set174 bv0 bv1)))
     :pattern ((set175 bv0 bv1))
     :pattern ((set170 bv0 bv1))
     :pattern ((set174 bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rto2 anc_1096I bv0 bv1) (set175 bv0 bv1))
     :pattern ((Rto2 anc_1096I bv0 bv1))
     :pattern ((set175 bv0 bv1)))))
(declare-fun set176 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set176 bv0) (and (= bv0 anc_1094I))) :pattern ((set176 bv0)))))
(declare-fun set177 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set177 bv0) (or (Rmem1 anc_1095I bv0) (Rmem1 anc_1093I bv0)))
     :pattern ((set177 bv0))
     :pattern ((Rmem1 anc_1095I bv0))
     :pattern ((Rmem1 anc_1093I bv0)))))
(declare-fun set178 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set178 bv0) (or (set176 bv0) (set177 bv0)))
     :pattern ((set178 bv0))
     :pattern ((set176 bv0))
     :pattern ((set177 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rmem1 anc_1096I bv0) (set178 bv0))
     :pattern ((Rmem1 anc_1096I bv0))
     :pattern ((set178 bv0)))))
(declare-fun set179 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set179 bv0) (and (= bv0 anc_1094I))) :pattern ((set179 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rroot3 anc_1096I bv0) (set179 bv0))
     :pattern ((Rroot3 anc_1096I bv0))
     :pattern ((set179 bv0)))))
(assert (= anc_1095I b))
(assert (= anc_1094I x))
(assert (= anc_1093I a))
(assert (= anc_1092I B))
(assert (= anc_1090I R))
(declare-fun set180 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set180 bv0) (and (= bv0 z))) :pattern ((set180 bv0)))))
(declare-fun set181 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set181 bv0 bv1) (and (Rmem1 c bv0) (set180 bv1)))
     :pattern ((set181 bv0 bv1))
     :pattern ((Rmem1 c bv0) (set180 bv1)))))
(declare-fun set182 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set182 bv0) (and (= bv0 z))) :pattern ((set182 bv0)))))
(declare-fun set183 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set183 bv0 bv1) (and (set182 bv0) (Rmem1 d bv1)))
     :pattern ((set183 bv0 bv1))
     :pattern ((set182 bv0) (Rmem1 d bv1)))))
(declare-fun set184 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set184 bv0 bv1) (and (Rmem1 c bv0) (Rmem1 d bv1)))
     :pattern ((set184 bv0 bv1))
     :pattern ((Rmem1 c bv0) (Rmem1 d bv1)))))
(declare-fun set185 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set185 bv0 bv1) (or (set183 bv0 bv1) (set184 bv0 bv1)))
     :pattern ((set185 bv0 bv1))
     :pattern ((set183 bv0 bv1))
     :pattern ((set184 bv0 bv1)))))
(declare-fun set186 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set186 bv0 bv1) (or (set181 bv0 bv1) (set185 bv0 bv1)))
     :pattern ((set186 bv0 bv1))
     :pattern ((set181 bv0 bv1))
     :pattern ((set185 bv0 bv1)))))
(declare-fun set187 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set187 bv0 bv1) (or (Rtos0 d bv0 bv1) (Rtos0 c bv0 bv1)))
     :pattern ((set187 bv0 bv1))
     :pattern ((Rtos0 d bv0 bv1))
     :pattern ((Rtos0 c bv0 bv1)))))
(declare-fun set188 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set188 bv0 bv1) (or (set186 bv0 bv1) (set187 bv0 bv1)))
     :pattern ((set188 bv0 bv1))
     :pattern ((set186 bv0 bv1))
     :pattern ((set187 bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rtos0 anc_1085I bv0 bv1) (set188 bv0 bv1))
     :pattern ((Rtos0 anc_1085I bv0 bv1))
     :pattern ((set188 bv0 bv1)))))
(declare-fun set189 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set189 bv0) (and (= bv0 z))) :pattern ((set189 bv0)))))
(declare-fun set190 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set190 bv0 bv1) (and (Rmem1 c bv0) (set189 bv1)))
     :pattern ((set190 bv0 bv1))
     :pattern ((Rmem1 c bv0) (set189 bv1)))))
(declare-fun set191 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set191 bv0) (and (= bv0 z))) :pattern ((set191 bv0)))))
(declare-fun set192 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set192 bv0 bv1) (and (set191 bv0) (Rmem1 d bv1)))
     :pattern ((set192 bv0 bv1))
     :pattern ((set191 bv0) (Rmem1 d bv1)))))
(declare-fun set193 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set193 bv0 bv1) (and (Rmem1 c bv0) (Rmem1 d bv1)))
     :pattern ((set193 bv0 bv1))
     :pattern ((Rmem1 c bv0) (Rmem1 d bv1)))))
(declare-fun set194 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set194 bv0 bv1) (or (set192 bv0 bv1) (set193 bv0 bv1)))
     :pattern ((set194 bv0 bv1))
     :pattern ((set192 bv0 bv1))
     :pattern ((set193 bv0 bv1)))))
(declare-fun set195 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set195 bv0 bv1) (or (set190 bv0 bv1) (set194 bv0 bv1)))
     :pattern ((set195 bv0 bv1))
     :pattern ((set190 bv0 bv1))
     :pattern ((set194 bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rto2 anc_1085I bv0 bv1) (set195 bv0 bv1))
     :pattern ((Rto2 anc_1085I bv0 bv1))
     :pattern ((set195 bv0 bv1)))))
(declare-fun set196 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set196 bv0) (and (= bv0 z))) :pattern ((set196 bv0)))))
(declare-fun set197 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set197 bv0) (or (Rmem1 d bv0) (Rmem1 c bv0)))
     :pattern ((set197 bv0))
     :pattern ((Rmem1 d bv0))
     :pattern ((Rmem1 c bv0)))))
(declare-fun set198 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set198 bv0) (or (set196 bv0) (set197 bv0)))
     :pattern ((set198 bv0))
     :pattern ((set196 bv0))
     :pattern ((set197 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rmem1 anc_1085I bv0) (set198 bv0))
     :pattern ((Rmem1 anc_1085I bv0))
     :pattern ((set198 bv0)))))
(declare-fun set199 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set199 bv0) (and (= bv0 z))) :pattern ((set199 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rroot3 anc_1085I bv0) (set199 bv0))
     :pattern ((Rroot3 anc_1085I bv0))
     :pattern ((set199 bv0)))))
(declare-fun set200 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set200 bv0) (and (= bv0 y))) :pattern ((set200 bv0)))))
(declare-fun set201 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set201 bv0 bv1) (and (Rmem1 b bv0) (set200 bv1)))
     :pattern ((set201 bv0 bv1))
     :pattern ((Rmem1 b bv0) (set200 bv1)))))
(declare-fun set202 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set202 bv0) (and (= bv0 y))) :pattern ((set202 bv0)))))
(declare-fun set203 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set203 bv0 bv1) (and (set202 bv0) (Rmem1 anc_1085I bv1)))
     :pattern ((set203 bv0 bv1))
     :pattern ((set202 bv0) (Rmem1 anc_1085I bv1)))))
(declare-fun set204 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set204 bv0 bv1) (and (Rmem1 b bv0) (Rmem1 anc_1085I bv1)))
     :pattern ((set204 bv0 bv1))
     :pattern ((Rmem1 b bv0) (Rmem1 anc_1085I bv1)))))
(declare-fun set205 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set205 bv0 bv1) (or (set203 bv0 bv1) (set204 bv0 bv1)))
     :pattern ((set205 bv0 bv1))
     :pattern ((set203 bv0 bv1))
     :pattern ((set204 bv0 bv1)))))
(declare-fun set206 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set206 bv0 bv1) (or (set201 bv0 bv1) (set205 bv0 bv1)))
     :pattern ((set206 bv0 bv1))
     :pattern ((set201 bv0 bv1))
     :pattern ((set205 bv0 bv1)))))
(declare-fun set207 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set207 bv0 bv1) (or (Rtos0 anc_1085I bv0 bv1) (Rtos0 b bv0 bv1)))
     :pattern ((set207 bv0 bv1))
     :pattern ((Rtos0 anc_1085I bv0 bv1))
     :pattern ((Rtos0 b bv0 bv1)))))
(declare-fun set208 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set208 bv0 bv1) (or (set206 bv0 bv1) (set207 bv0 bv1)))
     :pattern ((set208 bv0 bv1))
     :pattern ((set206 bv0 bv1))
     :pattern ((set207 bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rtos0 anc_1087I bv0 bv1) (set208 bv0 bv1))
     :pattern ((Rtos0 anc_1087I bv0 bv1))
     :pattern ((set208 bv0 bv1)))))
(declare-fun set209 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set209 bv0) (and (= bv0 y))) :pattern ((set209 bv0)))))
(declare-fun set210 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set210 bv0 bv1) (and (Rmem1 b bv0) (set209 bv1)))
     :pattern ((set210 bv0 bv1))
     :pattern ((Rmem1 b bv0) (set209 bv1)))))
(declare-fun set211 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set211 bv0) (and (= bv0 y))) :pattern ((set211 bv0)))))
(declare-fun set212 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set212 bv0 bv1) (and (set211 bv0) (Rmem1 anc_1085I bv1)))
     :pattern ((set212 bv0 bv1))
     :pattern ((set211 bv0) (Rmem1 anc_1085I bv1)))))
(declare-fun set213 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set213 bv0 bv1) (and (Rmem1 b bv0) (Rmem1 anc_1085I bv1)))
     :pattern ((set213 bv0 bv1))
     :pattern ((Rmem1 b bv0) (Rmem1 anc_1085I bv1)))))
(declare-fun set214 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set214 bv0 bv1) (or (set212 bv0 bv1) (set213 bv0 bv1)))
     :pattern ((set214 bv0 bv1))
     :pattern ((set212 bv0 bv1))
     :pattern ((set213 bv0 bv1)))))
(declare-fun set215 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set215 bv0 bv1) (or (set210 bv0 bv1) (set214 bv0 bv1)))
     :pattern ((set215 bv0 bv1))
     :pattern ((set210 bv0 bv1))
     :pattern ((set214 bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rto2 anc_1087I bv0 bv1) (set215 bv0 bv1))
     :pattern ((Rto2 anc_1087I bv0 bv1))
     :pattern ((set215 bv0 bv1)))))
(declare-fun set216 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set216 bv0) (and (= bv0 y))) :pattern ((set216 bv0)))))
(declare-fun set217 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set217 bv0) (or (Rmem1 anc_1085I bv0) (Rmem1 b bv0)))
     :pattern ((set217 bv0))
     :pattern ((Rmem1 anc_1085I bv0))
     :pattern ((Rmem1 b bv0)))))
(declare-fun set218 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set218 bv0) (or (set216 bv0) (set217 bv0)))
     :pattern ((set218 bv0))
     :pattern ((set216 bv0))
     :pattern ((set217 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rmem1 anc_1087I bv0) (set218 bv0))
     :pattern ((Rmem1 anc_1087I bv0))
     :pattern ((set218 bv0)))))
(declare-fun set219 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set219 bv0) (and (= bv0 y))) :pattern ((set219 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rroot3 anc_1087I bv0) (set219 bv0))
     :pattern ((Rroot3 anc_1087I bv0))
     :pattern ((set219 bv0)))))
(declare-fun set220 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set220 bv0) (and (= bv0 anc_1097I))) :pattern ((set220 bv0)))))
(declare-fun set221 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set221 bv0 bv1) (and (Rmem1 anc_1096I bv0) (set220 bv1)))
     :pattern ((set221 bv0 bv1))
     :pattern ((Rmem1 anc_1096I bv0) (set220 bv1)))))
(declare-fun set222 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set222 bv0) (and (= bv0 anc_1097I))) :pattern ((set222 bv0)))))
(declare-fun set223 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set223 bv0 bv1) (and (set222 bv0) (Rmem1 anc_1103I bv1)))
     :pattern ((set223 bv0 bv1))
     :pattern ((set222 bv0) (Rmem1 anc_1103I bv1)))))
(declare-fun set224 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set224 bv0 bv1) (and (Rmem1 anc_1096I bv0) (Rmem1 anc_1103I bv1)))
     :pattern ((set224 bv0 bv1))
     :pattern ((Rmem1 anc_1096I bv0) (Rmem1 anc_1103I bv1)))))
(declare-fun set225 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set225 bv0 bv1) (or (set223 bv0 bv1) (set224 bv0 bv1)))
     :pattern ((set225 bv0 bv1))
     :pattern ((set223 bv0 bv1))
     :pattern ((set224 bv0 bv1)))))
(declare-fun set226 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set226 bv0 bv1) (or (set221 bv0 bv1) (set225 bv0 bv1)))
     :pattern ((set226 bv0 bv1))
     :pattern ((set221 bv0 bv1))
     :pattern ((set225 bv0 bv1)))))
(declare-fun set227 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set227 bv0 bv1)
        (or (Rtos0 anc_1103I bv0 bv1) (Rtos0 anc_1096I bv0 bv1)))
     :pattern ((set227 bv0 bv1))
     :pattern ((Rtos0 anc_1103I bv0 bv1))
     :pattern ((Rtos0 anc_1096I bv0 bv1)))))
(declare-fun set228 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set228 bv0 bv1) (or (set226 bv0 bv1) (set227 bv0 bv1)))
     :pattern ((set228 bv0 bv1))
     :pattern ((set226 bv0 bv1))
     :pattern ((set227 bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rtos0 v_15 bv0 bv1) (set228 bv0 bv1))
     :pattern ((Rtos0 v_15 bv0 bv1))
     :pattern ((set228 bv0 bv1)))))
(declare-fun set229 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set229 bv0) (and (= bv0 anc_1097I))) :pattern ((set229 bv0)))))
(declare-fun set230 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set230 bv0 bv1) (and (Rmem1 anc_1096I bv0) (set229 bv1)))
     :pattern ((set230 bv0 bv1))
     :pattern ((Rmem1 anc_1096I bv0) (set229 bv1)))))
(declare-fun set231 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set231 bv0) (and (= bv0 anc_1097I))) :pattern ((set231 bv0)))))
(declare-fun set232 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set232 bv0 bv1) (and (set231 bv0) (Rmem1 anc_1103I bv1)))
     :pattern ((set232 bv0 bv1))
     :pattern ((set231 bv0) (Rmem1 anc_1103I bv1)))))
(declare-fun set233 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set233 bv0 bv1) (and (Rmem1 anc_1096I bv0) (Rmem1 anc_1103I bv1)))
     :pattern ((set233 bv0 bv1))
     :pattern ((Rmem1 anc_1096I bv0) (Rmem1 anc_1103I bv1)))))
(declare-fun set234 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set234 bv0 bv1) (or (set232 bv0 bv1) (set233 bv0 bv1)))
     :pattern ((set234 bv0 bv1))
     :pattern ((set232 bv0 bv1))
     :pattern ((set233 bv0 bv1)))))
(declare-fun set235 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set235 bv0 bv1) (or (set230 bv0 bv1) (set234 bv0 bv1)))
     :pattern ((set235 bv0 bv1))
     :pattern ((set230 bv0 bv1))
     :pattern ((set234 bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rto2 v_15 bv0 bv1) (set235 bv0 bv1))
     :pattern ((Rto2 v_15 bv0 bv1))
     :pattern ((set235 bv0 bv1)))))
(declare-fun set236 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set236 bv0) (and (= bv0 anc_1097I))) :pattern ((set236 bv0)))))
(declare-fun set237 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set237 bv0) (or (Rmem1 anc_1103I bv0) (Rmem1 anc_1096I bv0)))
     :pattern ((set237 bv0))
     :pattern ((Rmem1 anc_1103I bv0))
     :pattern ((Rmem1 anc_1096I bv0)))))
(declare-fun set238 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set238 bv0) (or (set236 bv0) (set237 bv0)))
     :pattern ((set238 bv0))
     :pattern ((set236 bv0))
     :pattern ((set237 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rmem1 v_15 bv0) (set238 bv0))
     :pattern ((Rmem1 v_15 bv0))
     :pattern ((set238 bv0)))))
(declare-fun set239 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set239 bv0) (and (= bv0 anc_1097I))) :pattern ((set239 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rroot3 v_15 bv0) (set239 bv0))
     :pattern ((Rroot3 v_15 bv0))
     :pattern ((set239 bv0)))))
(assert (not (forall ((bv0 T5))
       (! (= (Rmem1 v_15 bv0) (Rmem1 x_0 bv0))
          :pattern ((Rmem1 v_15 bv0))
          :pattern ((Rmem1 x_0 bv0))))))
(check-sat)

(declare-sort T6)
(declare-const v_15 T6)
(declare-const x_0 T6)
(declare-sort T7)
(declare-const B T7)
(declare-const R T7)
(declare-const t T6)
(declare-const anc_1068I T7)
(declare-const a T6)
(declare-sort T8)
(declare-const x T8)
(declare-const anc_1067I T6)
(declare-const sv_4127 T6)
(declare-const sv_4130 T7)
(declare-const anc_1066I T7)
(declare-const anc_1065I T6)
(declare-const z T8)
(declare-const d T6)
(declare-const sv_4132 T6)
(declare-const sv_4134 T7)
(declare-const anc_1064I T7)
(declare-const b T6)
(declare-const y T8)
(declare-const c T6)
(declare-const sv_4136 T6)
(declare-const sv_4138 T7)
(declare-const anc_1070I T7)
(declare-const anc_1072I T7)
(declare-const anc_1073I T6)
(declare-const anc_1074I T8)
(declare-const anc_1075I T6)
(declare-const anc_1076I T6)
(declare-const anc_1077I T8)
(declare-const anc_1079I T7)
(declare-const anc_1080I T6)
(declare-const anc_1081I T8)
(declare-const anc_1082I T6)
(declare-const anc_1083I T6)
(declare-fun Rroot3 (T6 T8) Bool)
(declare-fun Rto2 (T6 T8 T8) Bool)
(declare-fun Rmem1 (T6 T8) Bool)
(declare-fun Rtos0 (T6 T8 T8) Bool)
(assert (= t x_0))
(declare-fun set240 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set240 bv0) (and (= bv0 x))) :pattern ((set240 bv0)))))
(declare-fun set241 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set241 bv0 bv1) (and (Rmem1 a bv0) (set240 bv1)))
     :pattern ((set241 bv0 bv1))
     :pattern ((Rmem1 a bv0) (set240 bv1)))))
(declare-fun set242 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set242 bv0) (and (= bv0 x))) :pattern ((set242 bv0)))))
(declare-fun set243 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set243 bv0 bv1) (and (set242 bv0) (Rmem1 anc_1067I bv1)))
     :pattern ((set243 bv0 bv1))
     :pattern ((set242 bv0) (Rmem1 anc_1067I bv1)))))
(declare-fun set244 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set244 bv0 bv1) (and (Rmem1 a bv0) (Rmem1 anc_1067I bv1)))
     :pattern ((set244 bv0 bv1))
     :pattern ((Rmem1 a bv0) (Rmem1 anc_1067I bv1)))))
(declare-fun set245 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set245 bv0 bv1) (or (set243 bv0 bv1) (set244 bv0 bv1)))
     :pattern ((set245 bv0 bv1))
     :pattern ((set243 bv0 bv1))
     :pattern ((set244 bv0 bv1)))))
(declare-fun set246 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set246 bv0 bv1) (or (set241 bv0 bv1) (set245 bv0 bv1)))
     :pattern ((set246 bv0 bv1))
     :pattern ((set241 bv0 bv1))
     :pattern ((set245 bv0 bv1)))))
(declare-fun set247 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set247 bv0 bv1) (or (Rtos0 anc_1067I bv0 bv1) (Rtos0 a bv0 bv1)))
     :pattern ((set247 bv0 bv1))
     :pattern ((Rtos0 anc_1067I bv0 bv1))
     :pattern ((Rtos0 a bv0 bv1)))))
(declare-fun set248 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set248 bv0 bv1) (or (set246 bv0 bv1) (set247 bv0 bv1)))
     :pattern ((set248 bv0 bv1))
     :pattern ((set246 bv0 bv1))
     :pattern ((set247 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Rtos0 t bv0 bv1) (set248 bv0 bv1))
     :pattern ((Rtos0 t bv0 bv1))
     :pattern ((set248 bv0 bv1)))))
(declare-fun set249 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set249 bv0) (and (= bv0 x))) :pattern ((set249 bv0)))))
(declare-fun set250 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set250 bv0 bv1) (and (Rmem1 a bv0) (set249 bv1)))
     :pattern ((set250 bv0 bv1))
     :pattern ((Rmem1 a bv0) (set249 bv1)))))
(declare-fun set251 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set251 bv0) (and (= bv0 x))) :pattern ((set251 bv0)))))
(declare-fun set252 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set252 bv0 bv1) (and (set251 bv0) (Rmem1 anc_1067I bv1)))
     :pattern ((set252 bv0 bv1))
     :pattern ((set251 bv0) (Rmem1 anc_1067I bv1)))))
(declare-fun set253 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set253 bv0 bv1) (and (Rmem1 a bv0) (Rmem1 anc_1067I bv1)))
     :pattern ((set253 bv0 bv1))
     :pattern ((Rmem1 a bv0) (Rmem1 anc_1067I bv1)))))
(declare-fun set254 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set254 bv0 bv1) (or (set252 bv0 bv1) (set253 bv0 bv1)))
     :pattern ((set254 bv0 bv1))
     :pattern ((set252 bv0 bv1))
     :pattern ((set253 bv0 bv1)))))
(declare-fun set255 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set255 bv0 bv1) (or (set250 bv0 bv1) (set254 bv0 bv1)))
     :pattern ((set255 bv0 bv1))
     :pattern ((set250 bv0 bv1))
     :pattern ((set254 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Rto2 t bv0 bv1) (set255 bv0 bv1))
     :pattern ((Rto2 t bv0 bv1))
     :pattern ((set255 bv0 bv1)))))
(declare-fun set256 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set256 bv0) (and (= bv0 x))) :pattern ((set256 bv0)))))
(declare-fun set257 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set257 bv0) (or (Rmem1 anc_1067I bv0) (Rmem1 a bv0)))
     :pattern ((set257 bv0))
     :pattern ((Rmem1 anc_1067I bv0))
     :pattern ((Rmem1 a bv0)))))
(declare-fun set258 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set258 bv0) (or (set256 bv0) (set257 bv0)))
     :pattern ((set258 bv0))
     :pattern ((set256 bv0))
     :pattern ((set257 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rmem1 t bv0) (set258 bv0))
     :pattern ((Rmem1 t bv0))
     :pattern ((set258 bv0)))))
(declare-fun set259 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set259 bv0) (and (= bv0 x))) :pattern ((set259 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rroot3 t bv0) (set259 bv0))
     :pattern ((Rroot3 t bv0))
     :pattern ((set259 bv0)))))
(declare-fun set260 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set260 bv0) (and (= bv0 anc_1081I))) :pattern ((set260 bv0)))))
(declare-fun set261 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set261 bv0 bv1) (and (Rmem1 anc_1080I bv0) (set260 bv1)))
     :pattern ((set261 bv0 bv1))
     :pattern ((Rmem1 anc_1080I bv0) (set260 bv1)))))
(declare-fun set262 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set262 bv0) (and (= bv0 anc_1081I))) :pattern ((set262 bv0)))))
(declare-fun set263 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set263 bv0 bv1) (and (set262 bv0) (Rmem1 anc_1082I bv1)))
     :pattern ((set263 bv0 bv1))
     :pattern ((set262 bv0) (Rmem1 anc_1082I bv1)))))
(declare-fun set264 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set264 bv0 bv1) (and (Rmem1 anc_1080I bv0) (Rmem1 anc_1082I bv1)))
     :pattern ((set264 bv0 bv1))
     :pattern ((Rmem1 anc_1080I bv0) (Rmem1 anc_1082I bv1)))))
(declare-fun set265 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set265 bv0 bv1) (or (set263 bv0 bv1) (set264 bv0 bv1)))
     :pattern ((set265 bv0 bv1))
     :pattern ((set263 bv0 bv1))
     :pattern ((set264 bv0 bv1)))))
(declare-fun set266 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set266 bv0 bv1) (or (set261 bv0 bv1) (set265 bv0 bv1)))
     :pattern ((set266 bv0 bv1))
     :pattern ((set261 bv0 bv1))
     :pattern ((set265 bv0 bv1)))))
(declare-fun set267 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set267 bv0 bv1)
        (or (Rtos0 anc_1082I bv0 bv1) (Rtos0 anc_1080I bv0 bv1)))
     :pattern ((set267 bv0 bv1))
     :pattern ((Rtos0 anc_1082I bv0 bv1))
     :pattern ((Rtos0 anc_1080I bv0 bv1)))))
(declare-fun set268 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set268 bv0 bv1) (or (set266 bv0 bv1) (set267 bv0 bv1)))
     :pattern ((set268 bv0 bv1))
     :pattern ((set266 bv0 bv1))
     :pattern ((set267 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Rtos0 anc_1083I bv0 bv1) (set268 bv0 bv1))
     :pattern ((Rtos0 anc_1083I bv0 bv1))
     :pattern ((set268 bv0 bv1)))))
(declare-fun set269 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set269 bv0) (and (= bv0 anc_1081I))) :pattern ((set269 bv0)))))
(declare-fun set270 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set270 bv0 bv1) (and (Rmem1 anc_1080I bv0) (set269 bv1)))
     :pattern ((set270 bv0 bv1))
     :pattern ((Rmem1 anc_1080I bv0) (set269 bv1)))))
(declare-fun set271 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set271 bv0) (and (= bv0 anc_1081I))) :pattern ((set271 bv0)))))
(declare-fun set272 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set272 bv0 bv1) (and (set271 bv0) (Rmem1 anc_1082I bv1)))
     :pattern ((set272 bv0 bv1))
     :pattern ((set271 bv0) (Rmem1 anc_1082I bv1)))))
(declare-fun set273 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set273 bv0 bv1) (and (Rmem1 anc_1080I bv0) (Rmem1 anc_1082I bv1)))
     :pattern ((set273 bv0 bv1))
     :pattern ((Rmem1 anc_1080I bv0) (Rmem1 anc_1082I bv1)))))
(declare-fun set274 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set274 bv0 bv1) (or (set272 bv0 bv1) (set273 bv0 bv1)))
     :pattern ((set274 bv0 bv1))
     :pattern ((set272 bv0 bv1))
     :pattern ((set273 bv0 bv1)))))
(declare-fun set275 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set275 bv0 bv1) (or (set270 bv0 bv1) (set274 bv0 bv1)))
     :pattern ((set275 bv0 bv1))
     :pattern ((set270 bv0 bv1))
     :pattern ((set274 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Rto2 anc_1083I bv0 bv1) (set275 bv0 bv1))
     :pattern ((Rto2 anc_1083I bv0 bv1))
     :pattern ((set275 bv0 bv1)))))
(declare-fun set276 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set276 bv0) (and (= bv0 anc_1081I))) :pattern ((set276 bv0)))))
(declare-fun set277 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set277 bv0) (or (Rmem1 anc_1082I bv0) (Rmem1 anc_1080I bv0)))
     :pattern ((set277 bv0))
     :pattern ((Rmem1 anc_1082I bv0))
     :pattern ((Rmem1 anc_1080I bv0)))))
(declare-fun set278 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set278 bv0) (or (set276 bv0) (set277 bv0)))
     :pattern ((set278 bv0))
     :pattern ((set276 bv0))
     :pattern ((set277 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rmem1 anc_1083I bv0) (set278 bv0))
     :pattern ((Rmem1 anc_1083I bv0))
     :pattern ((set278 bv0)))))
(declare-fun set279 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set279 bv0) (and (= bv0 anc_1081I))) :pattern ((set279 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rroot3 anc_1083I bv0) (set279 bv0))
     :pattern ((Rroot3 anc_1083I bv0))
     :pattern ((set279 bv0)))))
(assert (= anc_1082I d))
(assert (= anc_1081I z))
(assert (= anc_1080I c))
(assert (= anc_1079I B))
(assert (= anc_1077I y))
(declare-fun set280 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set280 bv0) (and (= bv0 anc_1074I))) :pattern ((set280 bv0)))))
(declare-fun set281 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set281 bv0 bv1) (and (Rmem1 anc_1073I bv0) (set280 bv1)))
     :pattern ((set281 bv0 bv1))
     :pattern ((Rmem1 anc_1073I bv0) (set280 bv1)))))
(declare-fun set282 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set282 bv0) (and (= bv0 anc_1074I))) :pattern ((set282 bv0)))))
(declare-fun set283 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set283 bv0 bv1) (and (set282 bv0) (Rmem1 anc_1075I bv1)))
     :pattern ((set283 bv0 bv1))
     :pattern ((set282 bv0) (Rmem1 anc_1075I bv1)))))
(declare-fun set284 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set284 bv0 bv1) (and (Rmem1 anc_1073I bv0) (Rmem1 anc_1075I bv1)))
     :pattern ((set284 bv0 bv1))
     :pattern ((Rmem1 anc_1073I bv0) (Rmem1 anc_1075I bv1)))))
(declare-fun set285 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set285 bv0 bv1) (or (set283 bv0 bv1) (set284 bv0 bv1)))
     :pattern ((set285 bv0 bv1))
     :pattern ((set283 bv0 bv1))
     :pattern ((set284 bv0 bv1)))))
(declare-fun set286 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set286 bv0 bv1) (or (set281 bv0 bv1) (set285 bv0 bv1)))
     :pattern ((set286 bv0 bv1))
     :pattern ((set281 bv0 bv1))
     :pattern ((set285 bv0 bv1)))))
(declare-fun set287 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set287 bv0 bv1)
        (or (Rtos0 anc_1075I bv0 bv1) (Rtos0 anc_1073I bv0 bv1)))
     :pattern ((set287 bv0 bv1))
     :pattern ((Rtos0 anc_1075I bv0 bv1))
     :pattern ((Rtos0 anc_1073I bv0 bv1)))))
(declare-fun set288 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set288 bv0 bv1) (or (set286 bv0 bv1) (set287 bv0 bv1)))
     :pattern ((set288 bv0 bv1))
     :pattern ((set286 bv0 bv1))
     :pattern ((set287 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Rtos0 anc_1076I bv0 bv1) (set288 bv0 bv1))
     :pattern ((Rtos0 anc_1076I bv0 bv1))
     :pattern ((set288 bv0 bv1)))))
(declare-fun set289 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set289 bv0) (and (= bv0 anc_1074I))) :pattern ((set289 bv0)))))
(declare-fun set290 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set290 bv0 bv1) (and (Rmem1 anc_1073I bv0) (set289 bv1)))
     :pattern ((set290 bv0 bv1))
     :pattern ((Rmem1 anc_1073I bv0) (set289 bv1)))))
(declare-fun set291 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set291 bv0) (and (= bv0 anc_1074I))) :pattern ((set291 bv0)))))
(declare-fun set292 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set292 bv0 bv1) (and (set291 bv0) (Rmem1 anc_1075I bv1)))
     :pattern ((set292 bv0 bv1))
     :pattern ((set291 bv0) (Rmem1 anc_1075I bv1)))))
(declare-fun set293 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set293 bv0 bv1) (and (Rmem1 anc_1073I bv0) (Rmem1 anc_1075I bv1)))
     :pattern ((set293 bv0 bv1))
     :pattern ((Rmem1 anc_1073I bv0) (Rmem1 anc_1075I bv1)))))
(declare-fun set294 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set294 bv0 bv1) (or (set292 bv0 bv1) (set293 bv0 bv1)))
     :pattern ((set294 bv0 bv1))
     :pattern ((set292 bv0 bv1))
     :pattern ((set293 bv0 bv1)))))
(declare-fun set295 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set295 bv0 bv1) (or (set290 bv0 bv1) (set294 bv0 bv1)))
     :pattern ((set295 bv0 bv1))
     :pattern ((set290 bv0 bv1))
     :pattern ((set294 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Rto2 anc_1076I bv0 bv1) (set295 bv0 bv1))
     :pattern ((Rto2 anc_1076I bv0 bv1))
     :pattern ((set295 bv0 bv1)))))
(declare-fun set296 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set296 bv0) (and (= bv0 anc_1074I))) :pattern ((set296 bv0)))))
(declare-fun set297 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set297 bv0) (or (Rmem1 anc_1075I bv0) (Rmem1 anc_1073I bv0)))
     :pattern ((set297 bv0))
     :pattern ((Rmem1 anc_1075I bv0))
     :pattern ((Rmem1 anc_1073I bv0)))))
(declare-fun set298 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set298 bv0) (or (set296 bv0) (set297 bv0)))
     :pattern ((set298 bv0))
     :pattern ((set296 bv0))
     :pattern ((set297 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rmem1 anc_1076I bv0) (set298 bv0))
     :pattern ((Rmem1 anc_1076I bv0))
     :pattern ((set298 bv0)))))
(declare-fun set299 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set299 bv0) (and (= bv0 anc_1074I))) :pattern ((set299 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rroot3 anc_1076I bv0) (set299 bv0))
     :pattern ((Rroot3 anc_1076I bv0))
     :pattern ((set299 bv0)))))
(assert (= anc_1075I b))
(assert (= anc_1074I x))
(assert (= anc_1073I a))
(assert (= anc_1072I B))
(assert (= anc_1070I R))
(declare-fun set300 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set300 bv0) (and (= bv0 y))) :pattern ((set300 bv0)))))
(declare-fun set301 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set301 bv0 bv1) (and (Rmem1 b bv0) (set300 bv1)))
     :pattern ((set301 bv0 bv1))
     :pattern ((Rmem1 b bv0) (set300 bv1)))))
(declare-fun set302 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set302 bv0) (and (= bv0 y))) :pattern ((set302 bv0)))))
(declare-fun set303 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set303 bv0 bv1) (and (set302 bv0) (Rmem1 c bv1)))
     :pattern ((set303 bv0 bv1))
     :pattern ((set302 bv0) (Rmem1 c bv1)))))
(declare-fun set304 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set304 bv0 bv1) (and (Rmem1 b bv0) (Rmem1 c bv1)))
     :pattern ((set304 bv0 bv1))
     :pattern ((Rmem1 b bv0) (Rmem1 c bv1)))))
(declare-fun set305 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set305 bv0 bv1) (or (set303 bv0 bv1) (set304 bv0 bv1)))
     :pattern ((set305 bv0 bv1))
     :pattern ((set303 bv0 bv1))
     :pattern ((set304 bv0 bv1)))))
(declare-fun set306 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set306 bv0 bv1) (or (set301 bv0 bv1) (set305 bv0 bv1)))
     :pattern ((set306 bv0 bv1))
     :pattern ((set301 bv0 bv1))
     :pattern ((set305 bv0 bv1)))))
(declare-fun set307 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set307 bv0 bv1) (or (Rtos0 c bv0 bv1) (Rtos0 b bv0 bv1)))
     :pattern ((set307 bv0 bv1))
     :pattern ((Rtos0 c bv0 bv1))
     :pattern ((Rtos0 b bv0 bv1)))))
(declare-fun set308 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set308 bv0 bv1) (or (set306 bv0 bv1) (set307 bv0 bv1)))
     :pattern ((set308 bv0 bv1))
     :pattern ((set306 bv0 bv1))
     :pattern ((set307 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Rtos0 anc_1065I bv0 bv1) (set308 bv0 bv1))
     :pattern ((Rtos0 anc_1065I bv0 bv1))
     :pattern ((set308 bv0 bv1)))))
(declare-fun set309 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set309 bv0) (and (= bv0 y))) :pattern ((set309 bv0)))))
(declare-fun set310 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set310 bv0 bv1) (and (Rmem1 b bv0) (set309 bv1)))
     :pattern ((set310 bv0 bv1))
     :pattern ((Rmem1 b bv0) (set309 bv1)))))
(declare-fun set311 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set311 bv0) (and (= bv0 y))) :pattern ((set311 bv0)))))
(declare-fun set312 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set312 bv0 bv1) (and (set311 bv0) (Rmem1 c bv1)))
     :pattern ((set312 bv0 bv1))
     :pattern ((set311 bv0) (Rmem1 c bv1)))))
(declare-fun set313 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set313 bv0 bv1) (and (Rmem1 b bv0) (Rmem1 c bv1)))
     :pattern ((set313 bv0 bv1))
     :pattern ((Rmem1 b bv0) (Rmem1 c bv1)))))
(declare-fun set314 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set314 bv0 bv1) (or (set312 bv0 bv1) (set313 bv0 bv1)))
     :pattern ((set314 bv0 bv1))
     :pattern ((set312 bv0 bv1))
     :pattern ((set313 bv0 bv1)))))
(declare-fun set315 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set315 bv0 bv1) (or (set310 bv0 bv1) (set314 bv0 bv1)))
     :pattern ((set315 bv0 bv1))
     :pattern ((set310 bv0 bv1))
     :pattern ((set314 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Rto2 anc_1065I bv0 bv1) (set315 bv0 bv1))
     :pattern ((Rto2 anc_1065I bv0 bv1))
     :pattern ((set315 bv0 bv1)))))
(declare-fun set316 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set316 bv0) (and (= bv0 y))) :pattern ((set316 bv0)))))
(declare-fun set317 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set317 bv0) (or (Rmem1 c bv0) (Rmem1 b bv0)))
     :pattern ((set317 bv0))
     :pattern ((Rmem1 c bv0))
     :pattern ((Rmem1 b bv0)))))
(declare-fun set318 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set318 bv0) (or (set316 bv0) (set317 bv0)))
     :pattern ((set318 bv0))
     :pattern ((set316 bv0))
     :pattern ((set317 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rmem1 anc_1065I bv0) (set318 bv0))
     :pattern ((Rmem1 anc_1065I bv0))
     :pattern ((set318 bv0)))))
(declare-fun set319 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set319 bv0) (and (= bv0 y))) :pattern ((set319 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rroot3 anc_1065I bv0) (set319 bv0))
     :pattern ((Rroot3 anc_1065I bv0))
     :pattern ((set319 bv0)))))
(declare-fun set320 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set320 bv0) (and (= bv0 z))) :pattern ((set320 bv0)))))
(declare-fun set321 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set321 bv0 bv1) (and (Rmem1 anc_1065I bv0) (set320 bv1)))
     :pattern ((set321 bv0 bv1))
     :pattern ((Rmem1 anc_1065I bv0) (set320 bv1)))))
(declare-fun set322 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set322 bv0) (and (= bv0 z))) :pattern ((set322 bv0)))))
(declare-fun set323 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set323 bv0 bv1) (and (set322 bv0) (Rmem1 d bv1)))
     :pattern ((set323 bv0 bv1))
     :pattern ((set322 bv0) (Rmem1 d bv1)))))
(declare-fun set324 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set324 bv0 bv1) (and (Rmem1 anc_1065I bv0) (Rmem1 d bv1)))
     :pattern ((set324 bv0 bv1))
     :pattern ((Rmem1 anc_1065I bv0) (Rmem1 d bv1)))))
(declare-fun set325 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set325 bv0 bv1) (or (set323 bv0 bv1) (set324 bv0 bv1)))
     :pattern ((set325 bv0 bv1))
     :pattern ((set323 bv0 bv1))
     :pattern ((set324 bv0 bv1)))))
(declare-fun set326 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set326 bv0 bv1) (or (set321 bv0 bv1) (set325 bv0 bv1)))
     :pattern ((set326 bv0 bv1))
     :pattern ((set321 bv0 bv1))
     :pattern ((set325 bv0 bv1)))))
(declare-fun set327 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set327 bv0 bv1) (or (Rtos0 d bv0 bv1) (Rtos0 anc_1065I bv0 bv1)))
     :pattern ((set327 bv0 bv1))
     :pattern ((Rtos0 d bv0 bv1))
     :pattern ((Rtos0 anc_1065I bv0 bv1)))))
(declare-fun set328 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set328 bv0 bv1) (or (set326 bv0 bv1) (set327 bv0 bv1)))
     :pattern ((set328 bv0 bv1))
     :pattern ((set326 bv0 bv1))
     :pattern ((set327 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Rtos0 anc_1067I bv0 bv1) (set328 bv0 bv1))
     :pattern ((Rtos0 anc_1067I bv0 bv1))
     :pattern ((set328 bv0 bv1)))))
(declare-fun set329 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set329 bv0) (and (= bv0 z))) :pattern ((set329 bv0)))))
(declare-fun set330 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set330 bv0 bv1) (and (Rmem1 anc_1065I bv0) (set329 bv1)))
     :pattern ((set330 bv0 bv1))
     :pattern ((Rmem1 anc_1065I bv0) (set329 bv1)))))
(declare-fun set331 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set331 bv0) (and (= bv0 z))) :pattern ((set331 bv0)))))
(declare-fun set332 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set332 bv0 bv1) (and (set331 bv0) (Rmem1 d bv1)))
     :pattern ((set332 bv0 bv1))
     :pattern ((set331 bv0) (Rmem1 d bv1)))))
(declare-fun set333 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set333 bv0 bv1) (and (Rmem1 anc_1065I bv0) (Rmem1 d bv1)))
     :pattern ((set333 bv0 bv1))
     :pattern ((Rmem1 anc_1065I bv0) (Rmem1 d bv1)))))
(declare-fun set334 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set334 bv0 bv1) (or (set332 bv0 bv1) (set333 bv0 bv1)))
     :pattern ((set334 bv0 bv1))
     :pattern ((set332 bv0 bv1))
     :pattern ((set333 bv0 bv1)))))
(declare-fun set335 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set335 bv0 bv1) (or (set330 bv0 bv1) (set334 bv0 bv1)))
     :pattern ((set335 bv0 bv1))
     :pattern ((set330 bv0 bv1))
     :pattern ((set334 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Rto2 anc_1067I bv0 bv1) (set335 bv0 bv1))
     :pattern ((Rto2 anc_1067I bv0 bv1))
     :pattern ((set335 bv0 bv1)))))
(declare-fun set336 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set336 bv0) (and (= bv0 z))) :pattern ((set336 bv0)))))
(declare-fun set337 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set337 bv0) (or (Rmem1 d bv0) (Rmem1 anc_1065I bv0)))
     :pattern ((set337 bv0))
     :pattern ((Rmem1 d bv0))
     :pattern ((Rmem1 anc_1065I bv0)))))
(declare-fun set338 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set338 bv0) (or (set336 bv0) (set337 bv0)))
     :pattern ((set338 bv0))
     :pattern ((set336 bv0))
     :pattern ((set337 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rmem1 anc_1067I bv0) (set338 bv0))
     :pattern ((Rmem1 anc_1067I bv0))
     :pattern ((set338 bv0)))))
(declare-fun set339 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set339 bv0) (and (= bv0 z))) :pattern ((set339 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rroot3 anc_1067I bv0) (set339 bv0))
     :pattern ((Rroot3 anc_1067I bv0))
     :pattern ((set339 bv0)))))
(declare-fun set340 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set340 bv0) (and (= bv0 anc_1077I))) :pattern ((set340 bv0)))))
(declare-fun set341 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set341 bv0 bv1) (and (Rmem1 anc_1076I bv0) (set340 bv1)))
     :pattern ((set341 bv0 bv1))
     :pattern ((Rmem1 anc_1076I bv0) (set340 bv1)))))
(declare-fun set342 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set342 bv0) (and (= bv0 anc_1077I))) :pattern ((set342 bv0)))))
(declare-fun set343 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set343 bv0 bv1) (and (set342 bv0) (Rmem1 anc_1083I bv1)))
     :pattern ((set343 bv0 bv1))
     :pattern ((set342 bv0) (Rmem1 anc_1083I bv1)))))
(declare-fun set344 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set344 bv0 bv1) (and (Rmem1 anc_1076I bv0) (Rmem1 anc_1083I bv1)))
     :pattern ((set344 bv0 bv1))
     :pattern ((Rmem1 anc_1076I bv0) (Rmem1 anc_1083I bv1)))))
(declare-fun set345 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set345 bv0 bv1) (or (set343 bv0 bv1) (set344 bv0 bv1)))
     :pattern ((set345 bv0 bv1))
     :pattern ((set343 bv0 bv1))
     :pattern ((set344 bv0 bv1)))))
(declare-fun set346 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set346 bv0 bv1) (or (set341 bv0 bv1) (set345 bv0 bv1)))
     :pattern ((set346 bv0 bv1))
     :pattern ((set341 bv0 bv1))
     :pattern ((set345 bv0 bv1)))))
(declare-fun set347 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set347 bv0 bv1)
        (or (Rtos0 anc_1083I bv0 bv1) (Rtos0 anc_1076I bv0 bv1)))
     :pattern ((set347 bv0 bv1))
     :pattern ((Rtos0 anc_1083I bv0 bv1))
     :pattern ((Rtos0 anc_1076I bv0 bv1)))))
(declare-fun set348 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set348 bv0 bv1) (or (set346 bv0 bv1) (set347 bv0 bv1)))
     :pattern ((set348 bv0 bv1))
     :pattern ((set346 bv0 bv1))
     :pattern ((set347 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Rtos0 v_15 bv0 bv1) (set348 bv0 bv1))
     :pattern ((Rtos0 v_15 bv0 bv1))
     :pattern ((set348 bv0 bv1)))))
(declare-fun set349 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set349 bv0) (and (= bv0 anc_1077I))) :pattern ((set349 bv0)))))
(declare-fun set350 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set350 bv0 bv1) (and (Rmem1 anc_1076I bv0) (set349 bv1)))
     :pattern ((set350 bv0 bv1))
     :pattern ((Rmem1 anc_1076I bv0) (set349 bv1)))))
(declare-fun set351 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set351 bv0) (and (= bv0 anc_1077I))) :pattern ((set351 bv0)))))
(declare-fun set352 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set352 bv0 bv1) (and (set351 bv0) (Rmem1 anc_1083I bv1)))
     :pattern ((set352 bv0 bv1))
     :pattern ((set351 bv0) (Rmem1 anc_1083I bv1)))))
(declare-fun set353 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set353 bv0 bv1) (and (Rmem1 anc_1076I bv0) (Rmem1 anc_1083I bv1)))
     :pattern ((set353 bv0 bv1))
     :pattern ((Rmem1 anc_1076I bv0) (Rmem1 anc_1083I bv1)))))
(declare-fun set354 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set354 bv0 bv1) (or (set352 bv0 bv1) (set353 bv0 bv1)))
     :pattern ((set354 bv0 bv1))
     :pattern ((set352 bv0 bv1))
     :pattern ((set353 bv0 bv1)))))
(declare-fun set355 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set355 bv0 bv1) (or (set350 bv0 bv1) (set354 bv0 bv1)))
     :pattern ((set355 bv0 bv1))
     :pattern ((set350 bv0 bv1))
     :pattern ((set354 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Rto2 v_15 bv0 bv1) (set355 bv0 bv1))
     :pattern ((Rto2 v_15 bv0 bv1))
     :pattern ((set355 bv0 bv1)))))
(declare-fun set356 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set356 bv0) (and (= bv0 anc_1077I))) :pattern ((set356 bv0)))))
(declare-fun set357 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set357 bv0) (or (Rmem1 anc_1083I bv0) (Rmem1 anc_1076I bv0)))
     :pattern ((set357 bv0))
     :pattern ((Rmem1 anc_1083I bv0))
     :pattern ((Rmem1 anc_1076I bv0)))))
(declare-fun set358 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set358 bv0) (or (set356 bv0) (set357 bv0)))
     :pattern ((set358 bv0))
     :pattern ((set356 bv0))
     :pattern ((set357 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rmem1 v_15 bv0) (set358 bv0))
     :pattern ((Rmem1 v_15 bv0))
     :pattern ((set358 bv0)))))
(declare-fun set359 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set359 bv0) (and (= bv0 anc_1077I))) :pattern ((set359 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rroot3 v_15 bv0) (set359 bv0))
     :pattern ((Rroot3 v_15 bv0))
     :pattern ((set359 bv0)))))
(assert (not (forall ((bv1 T8) (bv0 T8))
       (! (= (Rtos0 v_15 bv0 bv1) (Rtos0 x_0 bv0 bv1))
          :pattern ((Rtos0 v_15 bv0 bv1))
          :pattern ((Rtos0 x_0 bv0 bv1))))))
(check-sat)

(declare-sort T9)
(declare-const v_15 T9)
(declare-const x_0 T9)
(declare-sort T10)
(declare-const B T10)
(declare-const R T10)
(declare-const t T9)
(declare-const anc_1068I T10)
(declare-const a T9)
(declare-sort T11)
(declare-const x T11)
(declare-const anc_1067I T9)
(declare-const sv_4127 T9)
(declare-const sv_4130 T10)
(declare-const anc_1066I T10)
(declare-const anc_1065I T9)
(declare-const z T11)
(declare-const d T9)
(declare-const sv_4132 T9)
(declare-const sv_4134 T10)
(declare-const anc_1064I T10)
(declare-const b T9)
(declare-const y T11)
(declare-const c T9)
(declare-const sv_4136 T9)
(declare-const sv_4138 T10)
(declare-const anc_1070I T10)
(declare-const anc_1072I T10)
(declare-const anc_1073I T9)
(declare-const anc_1074I T11)
(declare-const anc_1075I T9)
(declare-const anc_1076I T9)
(declare-const anc_1077I T11)
(declare-const anc_1079I T10)
(declare-const anc_1080I T9)
(declare-const anc_1081I T11)
(declare-const anc_1082I T9)
(declare-const anc_1083I T9)
(declare-fun Rroot3 (T9 T11) Bool)
(declare-fun Rto2 (T9 T11 T11) Bool)
(declare-fun Rmem1 (T9 T11) Bool)
(declare-fun Rtos0 (T9 T11 T11) Bool)
(assert (= t x_0))
(declare-fun set360 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set360 bv0) (and (= bv0 x))) :pattern ((set360 bv0)))))
(declare-fun set361 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set361 bv0 bv1) (and (Rmem1 a bv0) (set360 bv1)))
     :pattern ((set361 bv0 bv1))
     :pattern ((Rmem1 a bv0) (set360 bv1)))))
(declare-fun set362 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set362 bv0) (and (= bv0 x))) :pattern ((set362 bv0)))))
(declare-fun set363 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set363 bv0 bv1) (and (set362 bv0) (Rmem1 anc_1067I bv1)))
     :pattern ((set363 bv0 bv1))
     :pattern ((set362 bv0) (Rmem1 anc_1067I bv1)))))
(declare-fun set364 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set364 bv0 bv1) (and (Rmem1 a bv0) (Rmem1 anc_1067I bv1)))
     :pattern ((set364 bv0 bv1))
     :pattern ((Rmem1 a bv0) (Rmem1 anc_1067I bv1)))))
(declare-fun set365 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set365 bv0 bv1) (or (set363 bv0 bv1) (set364 bv0 bv1)))
     :pattern ((set365 bv0 bv1))
     :pattern ((set363 bv0 bv1))
     :pattern ((set364 bv0 bv1)))))
(declare-fun set366 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set366 bv0 bv1) (or (set361 bv0 bv1) (set365 bv0 bv1)))
     :pattern ((set366 bv0 bv1))
     :pattern ((set361 bv0 bv1))
     :pattern ((set365 bv0 bv1)))))
(declare-fun set367 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set367 bv0 bv1) (or (Rtos0 anc_1067I bv0 bv1) (Rtos0 a bv0 bv1)))
     :pattern ((set367 bv0 bv1))
     :pattern ((Rtos0 anc_1067I bv0 bv1))
     :pattern ((Rtos0 a bv0 bv1)))))
(declare-fun set368 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set368 bv0 bv1) (or (set366 bv0 bv1) (set367 bv0 bv1)))
     :pattern ((set368 bv0 bv1))
     :pattern ((set366 bv0 bv1))
     :pattern ((set367 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rtos0 t bv0 bv1) (set368 bv0 bv1))
     :pattern ((Rtos0 t bv0 bv1))
     :pattern ((set368 bv0 bv1)))))
(declare-fun set369 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set369 bv0) (and (= bv0 x))) :pattern ((set369 bv0)))))
(declare-fun set370 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set370 bv0 bv1) (and (Rmem1 a bv0) (set369 bv1)))
     :pattern ((set370 bv0 bv1))
     :pattern ((Rmem1 a bv0) (set369 bv1)))))
(declare-fun set371 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set371 bv0) (and (= bv0 x))) :pattern ((set371 bv0)))))
(declare-fun set372 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set372 bv0 bv1) (and (set371 bv0) (Rmem1 anc_1067I bv1)))
     :pattern ((set372 bv0 bv1))
     :pattern ((set371 bv0) (Rmem1 anc_1067I bv1)))))
(declare-fun set373 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set373 bv0 bv1) (and (Rmem1 a bv0) (Rmem1 anc_1067I bv1)))
     :pattern ((set373 bv0 bv1))
     :pattern ((Rmem1 a bv0) (Rmem1 anc_1067I bv1)))))
(declare-fun set374 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set374 bv0 bv1) (or (set372 bv0 bv1) (set373 bv0 bv1)))
     :pattern ((set374 bv0 bv1))
     :pattern ((set372 bv0 bv1))
     :pattern ((set373 bv0 bv1)))))
(declare-fun set375 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set375 bv0 bv1) (or (set370 bv0 bv1) (set374 bv0 bv1)))
     :pattern ((set375 bv0 bv1))
     :pattern ((set370 bv0 bv1))
     :pattern ((set374 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rto2 t bv0 bv1) (set375 bv0 bv1))
     :pattern ((Rto2 t bv0 bv1))
     :pattern ((set375 bv0 bv1)))))
(declare-fun set376 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set376 bv0) (and (= bv0 x))) :pattern ((set376 bv0)))))
(declare-fun set377 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set377 bv0) (or (Rmem1 anc_1067I bv0) (Rmem1 a bv0)))
     :pattern ((set377 bv0))
     :pattern ((Rmem1 anc_1067I bv0))
     :pattern ((Rmem1 a bv0)))))
(declare-fun set378 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set378 bv0) (or (set376 bv0) (set377 bv0)))
     :pattern ((set378 bv0))
     :pattern ((set376 bv0))
     :pattern ((set377 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rmem1 t bv0) (set378 bv0))
     :pattern ((Rmem1 t bv0))
     :pattern ((set378 bv0)))))
(declare-fun set379 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set379 bv0) (and (= bv0 x))) :pattern ((set379 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rroot3 t bv0) (set379 bv0))
     :pattern ((Rroot3 t bv0))
     :pattern ((set379 bv0)))))
(declare-fun set380 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set380 bv0) (and (= bv0 anc_1081I))) :pattern ((set380 bv0)))))
(declare-fun set381 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set381 bv0 bv1) (and (Rmem1 anc_1080I bv0) (set380 bv1)))
     :pattern ((set381 bv0 bv1))
     :pattern ((Rmem1 anc_1080I bv0) (set380 bv1)))))
(declare-fun set382 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set382 bv0) (and (= bv0 anc_1081I))) :pattern ((set382 bv0)))))
(declare-fun set383 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set383 bv0 bv1) (and (set382 bv0) (Rmem1 anc_1082I bv1)))
     :pattern ((set383 bv0 bv1))
     :pattern ((set382 bv0) (Rmem1 anc_1082I bv1)))))
(declare-fun set384 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set384 bv0 bv1) (and (Rmem1 anc_1080I bv0) (Rmem1 anc_1082I bv1)))
     :pattern ((set384 bv0 bv1))
     :pattern ((Rmem1 anc_1080I bv0) (Rmem1 anc_1082I bv1)))))
(declare-fun set385 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set385 bv0 bv1) (or (set383 bv0 bv1) (set384 bv0 bv1)))
     :pattern ((set385 bv0 bv1))
     :pattern ((set383 bv0 bv1))
     :pattern ((set384 bv0 bv1)))))
(declare-fun set386 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set386 bv0 bv1) (or (set381 bv0 bv1) (set385 bv0 bv1)))
     :pattern ((set386 bv0 bv1))
     :pattern ((set381 bv0 bv1))
     :pattern ((set385 bv0 bv1)))))
(declare-fun set387 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set387 bv0 bv1)
        (or (Rtos0 anc_1082I bv0 bv1) (Rtos0 anc_1080I bv0 bv1)))
     :pattern ((set387 bv0 bv1))
     :pattern ((Rtos0 anc_1082I bv0 bv1))
     :pattern ((Rtos0 anc_1080I bv0 bv1)))))
(declare-fun set388 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set388 bv0 bv1) (or (set386 bv0 bv1) (set387 bv0 bv1)))
     :pattern ((set388 bv0 bv1))
     :pattern ((set386 bv0 bv1))
     :pattern ((set387 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rtos0 anc_1083I bv0 bv1) (set388 bv0 bv1))
     :pattern ((Rtos0 anc_1083I bv0 bv1))
     :pattern ((set388 bv0 bv1)))))
(declare-fun set389 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set389 bv0) (and (= bv0 anc_1081I))) :pattern ((set389 bv0)))))
(declare-fun set390 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set390 bv0 bv1) (and (Rmem1 anc_1080I bv0) (set389 bv1)))
     :pattern ((set390 bv0 bv1))
     :pattern ((Rmem1 anc_1080I bv0) (set389 bv1)))))
(declare-fun set391 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set391 bv0) (and (= bv0 anc_1081I))) :pattern ((set391 bv0)))))
(declare-fun set392 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set392 bv0 bv1) (and (set391 bv0) (Rmem1 anc_1082I bv1)))
     :pattern ((set392 bv0 bv1))
     :pattern ((set391 bv0) (Rmem1 anc_1082I bv1)))))
(declare-fun set393 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set393 bv0 bv1) (and (Rmem1 anc_1080I bv0) (Rmem1 anc_1082I bv1)))
     :pattern ((set393 bv0 bv1))
     :pattern ((Rmem1 anc_1080I bv0) (Rmem1 anc_1082I bv1)))))
(declare-fun set394 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set394 bv0 bv1) (or (set392 bv0 bv1) (set393 bv0 bv1)))
     :pattern ((set394 bv0 bv1))
     :pattern ((set392 bv0 bv1))
     :pattern ((set393 bv0 bv1)))))
(declare-fun set395 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set395 bv0 bv1) (or (set390 bv0 bv1) (set394 bv0 bv1)))
     :pattern ((set395 bv0 bv1))
     :pattern ((set390 bv0 bv1))
     :pattern ((set394 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rto2 anc_1083I bv0 bv1) (set395 bv0 bv1))
     :pattern ((Rto2 anc_1083I bv0 bv1))
     :pattern ((set395 bv0 bv1)))))
(declare-fun set396 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set396 bv0) (and (= bv0 anc_1081I))) :pattern ((set396 bv0)))))
(declare-fun set397 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set397 bv0) (or (Rmem1 anc_1082I bv0) (Rmem1 anc_1080I bv0)))
     :pattern ((set397 bv0))
     :pattern ((Rmem1 anc_1082I bv0))
     :pattern ((Rmem1 anc_1080I bv0)))))
(declare-fun set398 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set398 bv0) (or (set396 bv0) (set397 bv0)))
     :pattern ((set398 bv0))
     :pattern ((set396 bv0))
     :pattern ((set397 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rmem1 anc_1083I bv0) (set398 bv0))
     :pattern ((Rmem1 anc_1083I bv0))
     :pattern ((set398 bv0)))))
(declare-fun set399 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set399 bv0) (and (= bv0 anc_1081I))) :pattern ((set399 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rroot3 anc_1083I bv0) (set399 bv0))
     :pattern ((Rroot3 anc_1083I bv0))
     :pattern ((set399 bv0)))))
(assert (= anc_1082I d))
(assert (= anc_1081I z))
(assert (= anc_1080I c))
(assert (= anc_1079I B))
(assert (= anc_1077I y))
(declare-fun set400 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set400 bv0) (and (= bv0 anc_1074I))) :pattern ((set400 bv0)))))
(declare-fun set401 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set401 bv0 bv1) (and (Rmem1 anc_1073I bv0) (set400 bv1)))
     :pattern ((set401 bv0 bv1))
     :pattern ((Rmem1 anc_1073I bv0) (set400 bv1)))))
(declare-fun set402 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set402 bv0) (and (= bv0 anc_1074I))) :pattern ((set402 bv0)))))
(declare-fun set403 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set403 bv0 bv1) (and (set402 bv0) (Rmem1 anc_1075I bv1)))
     :pattern ((set403 bv0 bv1))
     :pattern ((set402 bv0) (Rmem1 anc_1075I bv1)))))
(declare-fun set404 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set404 bv0 bv1) (and (Rmem1 anc_1073I bv0) (Rmem1 anc_1075I bv1)))
     :pattern ((set404 bv0 bv1))
     :pattern ((Rmem1 anc_1073I bv0) (Rmem1 anc_1075I bv1)))))
(declare-fun set405 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set405 bv0 bv1) (or (set403 bv0 bv1) (set404 bv0 bv1)))
     :pattern ((set405 bv0 bv1))
     :pattern ((set403 bv0 bv1))
     :pattern ((set404 bv0 bv1)))))
(declare-fun set406 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set406 bv0 bv1) (or (set401 bv0 bv1) (set405 bv0 bv1)))
     :pattern ((set406 bv0 bv1))
     :pattern ((set401 bv0 bv1))
     :pattern ((set405 bv0 bv1)))))
(declare-fun set407 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set407 bv0 bv1)
        (or (Rtos0 anc_1075I bv0 bv1) (Rtos0 anc_1073I bv0 bv1)))
     :pattern ((set407 bv0 bv1))
     :pattern ((Rtos0 anc_1075I bv0 bv1))
     :pattern ((Rtos0 anc_1073I bv0 bv1)))))
(declare-fun set408 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set408 bv0 bv1) (or (set406 bv0 bv1) (set407 bv0 bv1)))
     :pattern ((set408 bv0 bv1))
     :pattern ((set406 bv0 bv1))
     :pattern ((set407 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rtos0 anc_1076I bv0 bv1) (set408 bv0 bv1))
     :pattern ((Rtos0 anc_1076I bv0 bv1))
     :pattern ((set408 bv0 bv1)))))
(declare-fun set409 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set409 bv0) (and (= bv0 anc_1074I))) :pattern ((set409 bv0)))))
(declare-fun set410 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set410 bv0 bv1) (and (Rmem1 anc_1073I bv0) (set409 bv1)))
     :pattern ((set410 bv0 bv1))
     :pattern ((Rmem1 anc_1073I bv0) (set409 bv1)))))
(declare-fun set411 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set411 bv0) (and (= bv0 anc_1074I))) :pattern ((set411 bv0)))))
(declare-fun set412 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set412 bv0 bv1) (and (set411 bv0) (Rmem1 anc_1075I bv1)))
     :pattern ((set412 bv0 bv1))
     :pattern ((set411 bv0) (Rmem1 anc_1075I bv1)))))
(declare-fun set413 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set413 bv0 bv1) (and (Rmem1 anc_1073I bv0) (Rmem1 anc_1075I bv1)))
     :pattern ((set413 bv0 bv1))
     :pattern ((Rmem1 anc_1073I bv0) (Rmem1 anc_1075I bv1)))))
(declare-fun set414 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set414 bv0 bv1) (or (set412 bv0 bv1) (set413 bv0 bv1)))
     :pattern ((set414 bv0 bv1))
     :pattern ((set412 bv0 bv1))
     :pattern ((set413 bv0 bv1)))))
(declare-fun set415 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set415 bv0 bv1) (or (set410 bv0 bv1) (set414 bv0 bv1)))
     :pattern ((set415 bv0 bv1))
     :pattern ((set410 bv0 bv1))
     :pattern ((set414 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rto2 anc_1076I bv0 bv1) (set415 bv0 bv1))
     :pattern ((Rto2 anc_1076I bv0 bv1))
     :pattern ((set415 bv0 bv1)))))
(declare-fun set416 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set416 bv0) (and (= bv0 anc_1074I))) :pattern ((set416 bv0)))))
(declare-fun set417 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set417 bv0) (or (Rmem1 anc_1075I bv0) (Rmem1 anc_1073I bv0)))
     :pattern ((set417 bv0))
     :pattern ((Rmem1 anc_1075I bv0))
     :pattern ((Rmem1 anc_1073I bv0)))))
(declare-fun set418 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set418 bv0) (or (set416 bv0) (set417 bv0)))
     :pattern ((set418 bv0))
     :pattern ((set416 bv0))
     :pattern ((set417 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rmem1 anc_1076I bv0) (set418 bv0))
     :pattern ((Rmem1 anc_1076I bv0))
     :pattern ((set418 bv0)))))
(declare-fun set419 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set419 bv0) (and (= bv0 anc_1074I))) :pattern ((set419 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rroot3 anc_1076I bv0) (set419 bv0))
     :pattern ((Rroot3 anc_1076I bv0))
     :pattern ((set419 bv0)))))
(assert (= anc_1075I b))
(assert (= anc_1074I x))
(assert (= anc_1073I a))
(assert (= anc_1072I B))
(assert (= anc_1070I R))
(declare-fun set420 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set420 bv0) (and (= bv0 y))) :pattern ((set420 bv0)))))
(declare-fun set421 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set421 bv0 bv1) (and (Rmem1 b bv0) (set420 bv1)))
     :pattern ((set421 bv0 bv1))
     :pattern ((Rmem1 b bv0) (set420 bv1)))))
(declare-fun set422 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set422 bv0) (and (= bv0 y))) :pattern ((set422 bv0)))))
(declare-fun set423 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set423 bv0 bv1) (and (set422 bv0) (Rmem1 c bv1)))
     :pattern ((set423 bv0 bv1))
     :pattern ((set422 bv0) (Rmem1 c bv1)))))
(declare-fun set424 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set424 bv0 bv1) (and (Rmem1 b bv0) (Rmem1 c bv1)))
     :pattern ((set424 bv0 bv1))
     :pattern ((Rmem1 b bv0) (Rmem1 c bv1)))))
(declare-fun set425 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set425 bv0 bv1) (or (set423 bv0 bv1) (set424 bv0 bv1)))
     :pattern ((set425 bv0 bv1))
     :pattern ((set423 bv0 bv1))
     :pattern ((set424 bv0 bv1)))))
(declare-fun set426 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set426 bv0 bv1) (or (set421 bv0 bv1) (set425 bv0 bv1)))
     :pattern ((set426 bv0 bv1))
     :pattern ((set421 bv0 bv1))
     :pattern ((set425 bv0 bv1)))))
(declare-fun set427 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set427 bv0 bv1) (or (Rtos0 c bv0 bv1) (Rtos0 b bv0 bv1)))
     :pattern ((set427 bv0 bv1))
     :pattern ((Rtos0 c bv0 bv1))
     :pattern ((Rtos0 b bv0 bv1)))))
(declare-fun set428 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set428 bv0 bv1) (or (set426 bv0 bv1) (set427 bv0 bv1)))
     :pattern ((set428 bv0 bv1))
     :pattern ((set426 bv0 bv1))
     :pattern ((set427 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rtos0 anc_1065I bv0 bv1) (set428 bv0 bv1))
     :pattern ((Rtos0 anc_1065I bv0 bv1))
     :pattern ((set428 bv0 bv1)))))
(declare-fun set429 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set429 bv0) (and (= bv0 y))) :pattern ((set429 bv0)))))
(declare-fun set430 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set430 bv0 bv1) (and (Rmem1 b bv0) (set429 bv1)))
     :pattern ((set430 bv0 bv1))
     :pattern ((Rmem1 b bv0) (set429 bv1)))))
(declare-fun set431 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set431 bv0) (and (= bv0 y))) :pattern ((set431 bv0)))))
(declare-fun set432 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set432 bv0 bv1) (and (set431 bv0) (Rmem1 c bv1)))
     :pattern ((set432 bv0 bv1))
     :pattern ((set431 bv0) (Rmem1 c bv1)))))
(declare-fun set433 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set433 bv0 bv1) (and (Rmem1 b bv0) (Rmem1 c bv1)))
     :pattern ((set433 bv0 bv1))
     :pattern ((Rmem1 b bv0) (Rmem1 c bv1)))))
(declare-fun set434 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set434 bv0 bv1) (or (set432 bv0 bv1) (set433 bv0 bv1)))
     :pattern ((set434 bv0 bv1))
     :pattern ((set432 bv0 bv1))
     :pattern ((set433 bv0 bv1)))))
(declare-fun set435 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set435 bv0 bv1) (or (set430 bv0 bv1) (set434 bv0 bv1)))
     :pattern ((set435 bv0 bv1))
     :pattern ((set430 bv0 bv1))
     :pattern ((set434 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rto2 anc_1065I bv0 bv1) (set435 bv0 bv1))
     :pattern ((Rto2 anc_1065I bv0 bv1))
     :pattern ((set435 bv0 bv1)))))
(declare-fun set436 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set436 bv0) (and (= bv0 y))) :pattern ((set436 bv0)))))
(declare-fun set437 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set437 bv0) (or (Rmem1 c bv0) (Rmem1 b bv0)))
     :pattern ((set437 bv0))
     :pattern ((Rmem1 c bv0))
     :pattern ((Rmem1 b bv0)))))
(declare-fun set438 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set438 bv0) (or (set436 bv0) (set437 bv0)))
     :pattern ((set438 bv0))
     :pattern ((set436 bv0))
     :pattern ((set437 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rmem1 anc_1065I bv0) (set438 bv0))
     :pattern ((Rmem1 anc_1065I bv0))
     :pattern ((set438 bv0)))))
(declare-fun set439 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set439 bv0) (and (= bv0 y))) :pattern ((set439 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rroot3 anc_1065I bv0) (set439 bv0))
     :pattern ((Rroot3 anc_1065I bv0))
     :pattern ((set439 bv0)))))
(declare-fun set440 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set440 bv0) (and (= bv0 z))) :pattern ((set440 bv0)))))
(declare-fun set441 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set441 bv0 bv1) (and (Rmem1 anc_1065I bv0) (set440 bv1)))
     :pattern ((set441 bv0 bv1))
     :pattern ((Rmem1 anc_1065I bv0) (set440 bv1)))))
(declare-fun set442 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set442 bv0) (and (= bv0 z))) :pattern ((set442 bv0)))))
(declare-fun set443 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set443 bv0 bv1) (and (set442 bv0) (Rmem1 d bv1)))
     :pattern ((set443 bv0 bv1))
     :pattern ((set442 bv0) (Rmem1 d bv1)))))
(declare-fun set444 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set444 bv0 bv1) (and (Rmem1 anc_1065I bv0) (Rmem1 d bv1)))
     :pattern ((set444 bv0 bv1))
     :pattern ((Rmem1 anc_1065I bv0) (Rmem1 d bv1)))))
(declare-fun set445 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set445 bv0 bv1) (or (set443 bv0 bv1) (set444 bv0 bv1)))
     :pattern ((set445 bv0 bv1))
     :pattern ((set443 bv0 bv1))
     :pattern ((set444 bv0 bv1)))))
(declare-fun set446 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set446 bv0 bv1) (or (set441 bv0 bv1) (set445 bv0 bv1)))
     :pattern ((set446 bv0 bv1))
     :pattern ((set441 bv0 bv1))
     :pattern ((set445 bv0 bv1)))))
(declare-fun set447 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set447 bv0 bv1) (or (Rtos0 d bv0 bv1) (Rtos0 anc_1065I bv0 bv1)))
     :pattern ((set447 bv0 bv1))
     :pattern ((Rtos0 d bv0 bv1))
     :pattern ((Rtos0 anc_1065I bv0 bv1)))))
(declare-fun set448 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set448 bv0 bv1) (or (set446 bv0 bv1) (set447 bv0 bv1)))
     :pattern ((set448 bv0 bv1))
     :pattern ((set446 bv0 bv1))
     :pattern ((set447 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rtos0 anc_1067I bv0 bv1) (set448 bv0 bv1))
     :pattern ((Rtos0 anc_1067I bv0 bv1))
     :pattern ((set448 bv0 bv1)))))
(declare-fun set449 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set449 bv0) (and (= bv0 z))) :pattern ((set449 bv0)))))
(declare-fun set450 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set450 bv0 bv1) (and (Rmem1 anc_1065I bv0) (set449 bv1)))
     :pattern ((set450 bv0 bv1))
     :pattern ((Rmem1 anc_1065I bv0) (set449 bv1)))))
(declare-fun set451 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set451 bv0) (and (= bv0 z))) :pattern ((set451 bv0)))))
(declare-fun set452 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set452 bv0 bv1) (and (set451 bv0) (Rmem1 d bv1)))
     :pattern ((set452 bv0 bv1))
     :pattern ((set451 bv0) (Rmem1 d bv1)))))
(declare-fun set453 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set453 bv0 bv1) (and (Rmem1 anc_1065I bv0) (Rmem1 d bv1)))
     :pattern ((set453 bv0 bv1))
     :pattern ((Rmem1 anc_1065I bv0) (Rmem1 d bv1)))))
(declare-fun set454 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set454 bv0 bv1) (or (set452 bv0 bv1) (set453 bv0 bv1)))
     :pattern ((set454 bv0 bv1))
     :pattern ((set452 bv0 bv1))
     :pattern ((set453 bv0 bv1)))))
(declare-fun set455 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set455 bv0 bv1) (or (set450 bv0 bv1) (set454 bv0 bv1)))
     :pattern ((set455 bv0 bv1))
     :pattern ((set450 bv0 bv1))
     :pattern ((set454 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rto2 anc_1067I bv0 bv1) (set455 bv0 bv1))
     :pattern ((Rto2 anc_1067I bv0 bv1))
     :pattern ((set455 bv0 bv1)))))
(declare-fun set456 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set456 bv0) (and (= bv0 z))) :pattern ((set456 bv0)))))
(declare-fun set457 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set457 bv0) (or (Rmem1 d bv0) (Rmem1 anc_1065I bv0)))
     :pattern ((set457 bv0))
     :pattern ((Rmem1 d bv0))
     :pattern ((Rmem1 anc_1065I bv0)))))
(declare-fun set458 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set458 bv0) (or (set456 bv0) (set457 bv0)))
     :pattern ((set458 bv0))
     :pattern ((set456 bv0))
     :pattern ((set457 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rmem1 anc_1067I bv0) (set458 bv0))
     :pattern ((Rmem1 anc_1067I bv0))
     :pattern ((set458 bv0)))))
(declare-fun set459 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set459 bv0) (and (= bv0 z))) :pattern ((set459 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rroot3 anc_1067I bv0) (set459 bv0))
     :pattern ((Rroot3 anc_1067I bv0))
     :pattern ((set459 bv0)))))
(declare-fun set460 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set460 bv0) (and (= bv0 anc_1077I))) :pattern ((set460 bv0)))))
(declare-fun set461 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set461 bv0 bv1) (and (Rmem1 anc_1076I bv0) (set460 bv1)))
     :pattern ((set461 bv0 bv1))
     :pattern ((Rmem1 anc_1076I bv0) (set460 bv1)))))
(declare-fun set462 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set462 bv0) (and (= bv0 anc_1077I))) :pattern ((set462 bv0)))))
(declare-fun set463 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set463 bv0 bv1) (and (set462 bv0) (Rmem1 anc_1083I bv1)))
     :pattern ((set463 bv0 bv1))
     :pattern ((set462 bv0) (Rmem1 anc_1083I bv1)))))
(declare-fun set464 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set464 bv0 bv1) (and (Rmem1 anc_1076I bv0) (Rmem1 anc_1083I bv1)))
     :pattern ((set464 bv0 bv1))
     :pattern ((Rmem1 anc_1076I bv0) (Rmem1 anc_1083I bv1)))))
(declare-fun set465 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set465 bv0 bv1) (or (set463 bv0 bv1) (set464 bv0 bv1)))
     :pattern ((set465 bv0 bv1))
     :pattern ((set463 bv0 bv1))
     :pattern ((set464 bv0 bv1)))))
(declare-fun set466 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set466 bv0 bv1) (or (set461 bv0 bv1) (set465 bv0 bv1)))
     :pattern ((set466 bv0 bv1))
     :pattern ((set461 bv0 bv1))
     :pattern ((set465 bv0 bv1)))))
(declare-fun set467 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set467 bv0 bv1)
        (or (Rtos0 anc_1083I bv0 bv1) (Rtos0 anc_1076I bv0 bv1)))
     :pattern ((set467 bv0 bv1))
     :pattern ((Rtos0 anc_1083I bv0 bv1))
     :pattern ((Rtos0 anc_1076I bv0 bv1)))))
(declare-fun set468 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set468 bv0 bv1) (or (set466 bv0 bv1) (set467 bv0 bv1)))
     :pattern ((set468 bv0 bv1))
     :pattern ((set466 bv0 bv1))
     :pattern ((set467 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rtos0 v_15 bv0 bv1) (set468 bv0 bv1))
     :pattern ((Rtos0 v_15 bv0 bv1))
     :pattern ((set468 bv0 bv1)))))
(declare-fun set469 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set469 bv0) (and (= bv0 anc_1077I))) :pattern ((set469 bv0)))))
(declare-fun set470 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set470 bv0 bv1) (and (Rmem1 anc_1076I bv0) (set469 bv1)))
     :pattern ((set470 bv0 bv1))
     :pattern ((Rmem1 anc_1076I bv0) (set469 bv1)))))
(declare-fun set471 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set471 bv0) (and (= bv0 anc_1077I))) :pattern ((set471 bv0)))))
(declare-fun set472 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set472 bv0 bv1) (and (set471 bv0) (Rmem1 anc_1083I bv1)))
     :pattern ((set472 bv0 bv1))
     :pattern ((set471 bv0) (Rmem1 anc_1083I bv1)))))
(declare-fun set473 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set473 bv0 bv1) (and (Rmem1 anc_1076I bv0) (Rmem1 anc_1083I bv1)))
     :pattern ((set473 bv0 bv1))
     :pattern ((Rmem1 anc_1076I bv0) (Rmem1 anc_1083I bv1)))))
(declare-fun set474 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set474 bv0 bv1) (or (set472 bv0 bv1) (set473 bv0 bv1)))
     :pattern ((set474 bv0 bv1))
     :pattern ((set472 bv0 bv1))
     :pattern ((set473 bv0 bv1)))))
(declare-fun set475 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set475 bv0 bv1) (or (set470 bv0 bv1) (set474 bv0 bv1)))
     :pattern ((set475 bv0 bv1))
     :pattern ((set470 bv0 bv1))
     :pattern ((set474 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rto2 v_15 bv0 bv1) (set475 bv0 bv1))
     :pattern ((Rto2 v_15 bv0 bv1))
     :pattern ((set475 bv0 bv1)))))
(declare-fun set476 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set476 bv0) (and (= bv0 anc_1077I))) :pattern ((set476 bv0)))))
(declare-fun set477 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set477 bv0) (or (Rmem1 anc_1083I bv0) (Rmem1 anc_1076I bv0)))
     :pattern ((set477 bv0))
     :pattern ((Rmem1 anc_1083I bv0))
     :pattern ((Rmem1 anc_1076I bv0)))))
(declare-fun set478 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set478 bv0) (or (set476 bv0) (set477 bv0)))
     :pattern ((set478 bv0))
     :pattern ((set476 bv0))
     :pattern ((set477 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rmem1 v_15 bv0) (set478 bv0))
     :pattern ((Rmem1 v_15 bv0))
     :pattern ((set478 bv0)))))
(declare-fun set479 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set479 bv0) (and (= bv0 anc_1077I))) :pattern ((set479 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rroot3 v_15 bv0) (set479 bv0))
     :pattern ((Rroot3 v_15 bv0))
     :pattern ((set479 bv0)))))
(assert (not (forall ((bv0 T11))
       (! (= (Rmem1 v_15 bv0) (Rmem1 x_0 bv0))
          :pattern ((Rmem1 v_15 bv0))
          :pattern ((Rmem1 x_0 bv0))))))
(check-sat)

(declare-sort T12)
(declare-const v_15 T12)
(declare-const x_0 T12)
(declare-sort T13)
(declare-const B T13)
(declare-const R T13)
(declare-const t T12)
(declare-const anc_1048I T13)
(declare-const anc_1047I T12)
(declare-sort T14)
(declare-const z T14)
(declare-const d T12)
(declare-const sv_4113 T12)
(declare-const sv_4116 T13)
(declare-const anc_1046I T13)
(declare-const a T12)
(declare-const x T14)
(declare-const anc_1045I T12)
(declare-const sv_4118 T12)
(declare-const sv_4120 T13)
(declare-const anc_1044I T13)
(declare-const b T12)
(declare-const y T14)
(declare-const c T12)
(declare-const sv_4122 T12)
(declare-const sv_4124 T13)
(declare-const anc_1050I T13)
(declare-const anc_1052I T13)
(declare-const anc_1053I T12)
(declare-const anc_1054I T14)
(declare-const anc_1055I T12)
(declare-const anc_1056I T12)
(declare-const anc_1057I T14)
(declare-const anc_1059I T13)
(declare-const anc_1060I T12)
(declare-const anc_1061I T14)
(declare-const anc_1062I T12)
(declare-const anc_1063I T12)
(declare-fun Rroot3 (T12 T14) Bool)
(declare-fun Rto2 (T12 T14 T14) Bool)
(declare-fun Rmem1 (T12 T14) Bool)
(declare-fun Rtos0 (T12 T14 T14) Bool)
(assert (= t x_0))
(declare-fun set480 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set480 bv0) (and (= bv0 z))) :pattern ((set480 bv0)))))
(declare-fun set481 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set481 bv0 bv1) (and (Rmem1 anc_1047I bv0) (set480 bv1)))
     :pattern ((set481 bv0 bv1))
     :pattern ((Rmem1 anc_1047I bv0) (set480 bv1)))))
(declare-fun set482 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set482 bv0) (and (= bv0 z))) :pattern ((set482 bv0)))))
(declare-fun set483 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set483 bv0 bv1) (and (set482 bv0) (Rmem1 d bv1)))
     :pattern ((set483 bv0 bv1))
     :pattern ((set482 bv0) (Rmem1 d bv1)))))
(declare-fun set484 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set484 bv0 bv1) (and (Rmem1 anc_1047I bv0) (Rmem1 d bv1)))
     :pattern ((set484 bv0 bv1))
     :pattern ((Rmem1 anc_1047I bv0) (Rmem1 d bv1)))))
(declare-fun set485 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set485 bv0 bv1) (or (set483 bv0 bv1) (set484 bv0 bv1)))
     :pattern ((set485 bv0 bv1))
     :pattern ((set483 bv0 bv1))
     :pattern ((set484 bv0 bv1)))))
(declare-fun set486 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set486 bv0 bv1) (or (set481 bv0 bv1) (set485 bv0 bv1)))
     :pattern ((set486 bv0 bv1))
     :pattern ((set481 bv0 bv1))
     :pattern ((set485 bv0 bv1)))))
(declare-fun set487 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set487 bv0 bv1) (or (Rtos0 d bv0 bv1) (Rtos0 anc_1047I bv0 bv1)))
     :pattern ((set487 bv0 bv1))
     :pattern ((Rtos0 d bv0 bv1))
     :pattern ((Rtos0 anc_1047I bv0 bv1)))))
(declare-fun set488 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set488 bv0 bv1) (or (set486 bv0 bv1) (set487 bv0 bv1)))
     :pattern ((set488 bv0 bv1))
     :pattern ((set486 bv0 bv1))
     :pattern ((set487 bv0 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (Rtos0 t bv0 bv1) (set488 bv0 bv1))
     :pattern ((Rtos0 t bv0 bv1))
     :pattern ((set488 bv0 bv1)))))
(declare-fun set489 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set489 bv0) (and (= bv0 z))) :pattern ((set489 bv0)))))
(declare-fun set490 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set490 bv0 bv1) (and (Rmem1 anc_1047I bv0) (set489 bv1)))
     :pattern ((set490 bv0 bv1))
     :pattern ((Rmem1 anc_1047I bv0) (set489 bv1)))))
(declare-fun set491 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set491 bv0) (and (= bv0 z))) :pattern ((set491 bv0)))))
(declare-fun set492 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set492 bv0 bv1) (and (set491 bv0) (Rmem1 d bv1)))
     :pattern ((set492 bv0 bv1))
     :pattern ((set491 bv0) (Rmem1 d bv1)))))
(declare-fun set493 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set493 bv0 bv1) (and (Rmem1 anc_1047I bv0) (Rmem1 d bv1)))
     :pattern ((set493 bv0 bv1))
     :pattern ((Rmem1 anc_1047I bv0) (Rmem1 d bv1)))))
(declare-fun set494 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set494 bv0 bv1) (or (set492 bv0 bv1) (set493 bv0 bv1)))
     :pattern ((set494 bv0 bv1))
     :pattern ((set492 bv0 bv1))
     :pattern ((set493 bv0 bv1)))))
(declare-fun set495 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set495 bv0 bv1) (or (set490 bv0 bv1) (set494 bv0 bv1)))
     :pattern ((set495 bv0 bv1))
     :pattern ((set490 bv0 bv1))
     :pattern ((set494 bv0 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (Rto2 t bv0 bv1) (set495 bv0 bv1))
     :pattern ((Rto2 t bv0 bv1))
     :pattern ((set495 bv0 bv1)))))
(declare-fun set496 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set496 bv0) (and (= bv0 z))) :pattern ((set496 bv0)))))
(declare-fun set497 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set497 bv0) (or (Rmem1 d bv0) (Rmem1 anc_1047I bv0)))
     :pattern ((set497 bv0))
     :pattern ((Rmem1 d bv0))
     :pattern ((Rmem1 anc_1047I bv0)))))
(declare-fun set498 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set498 bv0) (or (set496 bv0) (set497 bv0)))
     :pattern ((set498 bv0))
     :pattern ((set496 bv0))
     :pattern ((set497 bv0)))))
(assert (forall ((bv0 T14))
  (! (= (Rmem1 t bv0) (set498 bv0))
     :pattern ((Rmem1 t bv0))
     :pattern ((set498 bv0)))))
(declare-fun set499 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set499 bv0) (and (= bv0 z))) :pattern ((set499 bv0)))))
(assert (forall ((bv0 T14))
  (! (= (Rroot3 t bv0) (set499 bv0))
     :pattern ((Rroot3 t bv0))
     :pattern ((set499 bv0)))))
(declare-fun set500 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set500 bv0) (and (= bv0 anc_1061I))) :pattern ((set500 bv0)))))
(declare-fun set501 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set501 bv0 bv1) (and (Rmem1 anc_1060I bv0) (set500 bv1)))
     :pattern ((set501 bv0 bv1))
     :pattern ((Rmem1 anc_1060I bv0) (set500 bv1)))))
(declare-fun set502 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set502 bv0) (and (= bv0 anc_1061I))) :pattern ((set502 bv0)))))
(declare-fun set503 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set503 bv0 bv1) (and (set502 bv0) (Rmem1 anc_1062I bv1)))
     :pattern ((set503 bv0 bv1))
     :pattern ((set502 bv0) (Rmem1 anc_1062I bv1)))))
(declare-fun set504 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set504 bv0 bv1) (and (Rmem1 anc_1060I bv0) (Rmem1 anc_1062I bv1)))
     :pattern ((set504 bv0 bv1))
     :pattern ((Rmem1 anc_1060I bv0) (Rmem1 anc_1062I bv1)))))
(declare-fun set505 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set505 bv0 bv1) (or (set503 bv0 bv1) (set504 bv0 bv1)))
     :pattern ((set505 bv0 bv1))
     :pattern ((set503 bv0 bv1))
     :pattern ((set504 bv0 bv1)))))
(declare-fun set506 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set506 bv0 bv1) (or (set501 bv0 bv1) (set505 bv0 bv1)))
     :pattern ((set506 bv0 bv1))
     :pattern ((set501 bv0 bv1))
     :pattern ((set505 bv0 bv1)))))
(declare-fun set507 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set507 bv0 bv1)
        (or (Rtos0 anc_1062I bv0 bv1) (Rtos0 anc_1060I bv0 bv1)))
     :pattern ((set507 bv0 bv1))
     :pattern ((Rtos0 anc_1062I bv0 bv1))
     :pattern ((Rtos0 anc_1060I bv0 bv1)))))
(declare-fun set508 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set508 bv0 bv1) (or (set506 bv0 bv1) (set507 bv0 bv1)))
     :pattern ((set508 bv0 bv1))
     :pattern ((set506 bv0 bv1))
     :pattern ((set507 bv0 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (Rtos0 anc_1063I bv0 bv1) (set508 bv0 bv1))
     :pattern ((Rtos0 anc_1063I bv0 bv1))
     :pattern ((set508 bv0 bv1)))))
(declare-fun set509 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set509 bv0) (and (= bv0 anc_1061I))) :pattern ((set509 bv0)))))
(declare-fun set510 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set510 bv0 bv1) (and (Rmem1 anc_1060I bv0) (set509 bv1)))
     :pattern ((set510 bv0 bv1))
     :pattern ((Rmem1 anc_1060I bv0) (set509 bv1)))))
(declare-fun set511 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set511 bv0) (and (= bv0 anc_1061I))) :pattern ((set511 bv0)))))
(declare-fun set512 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set512 bv0 bv1) (and (set511 bv0) (Rmem1 anc_1062I bv1)))
     :pattern ((set512 bv0 bv1))
     :pattern ((set511 bv0) (Rmem1 anc_1062I bv1)))))
(declare-fun set513 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set513 bv0 bv1) (and (Rmem1 anc_1060I bv0) (Rmem1 anc_1062I bv1)))
     :pattern ((set513 bv0 bv1))
     :pattern ((Rmem1 anc_1060I bv0) (Rmem1 anc_1062I bv1)))))
(declare-fun set514 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set514 bv0 bv1) (or (set512 bv0 bv1) (set513 bv0 bv1)))
     :pattern ((set514 bv0 bv1))
     :pattern ((set512 bv0 bv1))
     :pattern ((set513 bv0 bv1)))))
(declare-fun set515 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set515 bv0 bv1) (or (set510 bv0 bv1) (set514 bv0 bv1)))
     :pattern ((set515 bv0 bv1))
     :pattern ((set510 bv0 bv1))
     :pattern ((set514 bv0 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (Rto2 anc_1063I bv0 bv1) (set515 bv0 bv1))
     :pattern ((Rto2 anc_1063I bv0 bv1))
     :pattern ((set515 bv0 bv1)))))
(declare-fun set516 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set516 bv0) (and (= bv0 anc_1061I))) :pattern ((set516 bv0)))))
(declare-fun set517 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set517 bv0) (or (Rmem1 anc_1062I bv0) (Rmem1 anc_1060I bv0)))
     :pattern ((set517 bv0))
     :pattern ((Rmem1 anc_1062I bv0))
     :pattern ((Rmem1 anc_1060I bv0)))))
(declare-fun set518 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set518 bv0) (or (set516 bv0) (set517 bv0)))
     :pattern ((set518 bv0))
     :pattern ((set516 bv0))
     :pattern ((set517 bv0)))))
(assert (forall ((bv0 T14))
  (! (= (Rmem1 anc_1063I bv0) (set518 bv0))
     :pattern ((Rmem1 anc_1063I bv0))
     :pattern ((set518 bv0)))))
(declare-fun set519 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set519 bv0) (and (= bv0 anc_1061I))) :pattern ((set519 bv0)))))
(assert (forall ((bv0 T14))
  (! (= (Rroot3 anc_1063I bv0) (set519 bv0))
     :pattern ((Rroot3 anc_1063I bv0))
     :pattern ((set519 bv0)))))
(assert (= anc_1062I d))
(assert (= anc_1061I z))
(assert (= anc_1060I c))
(assert (= anc_1059I B))
(assert (= anc_1057I y))
(declare-fun set520 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set520 bv0) (and (= bv0 anc_1054I))) :pattern ((set520 bv0)))))
(declare-fun set521 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set521 bv0 bv1) (and (Rmem1 anc_1053I bv0) (set520 bv1)))
     :pattern ((set521 bv0 bv1))
     :pattern ((Rmem1 anc_1053I bv0) (set520 bv1)))))
(declare-fun set522 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set522 bv0) (and (= bv0 anc_1054I))) :pattern ((set522 bv0)))))
(declare-fun set523 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set523 bv0 bv1) (and (set522 bv0) (Rmem1 anc_1055I bv1)))
     :pattern ((set523 bv0 bv1))
     :pattern ((set522 bv0) (Rmem1 anc_1055I bv1)))))
(declare-fun set524 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set524 bv0 bv1) (and (Rmem1 anc_1053I bv0) (Rmem1 anc_1055I bv1)))
     :pattern ((set524 bv0 bv1))
     :pattern ((Rmem1 anc_1053I bv0) (Rmem1 anc_1055I bv1)))))
(declare-fun set525 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set525 bv0 bv1) (or (set523 bv0 bv1) (set524 bv0 bv1)))
     :pattern ((set525 bv0 bv1))
     :pattern ((set523 bv0 bv1))
     :pattern ((set524 bv0 bv1)))))
(declare-fun set526 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set526 bv0 bv1) (or (set521 bv0 bv1) (set525 bv0 bv1)))
     :pattern ((set526 bv0 bv1))
     :pattern ((set521 bv0 bv1))
     :pattern ((set525 bv0 bv1)))))
(declare-fun set527 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set527 bv0 bv1)
        (or (Rtos0 anc_1055I bv0 bv1) (Rtos0 anc_1053I bv0 bv1)))
     :pattern ((set527 bv0 bv1))
     :pattern ((Rtos0 anc_1055I bv0 bv1))
     :pattern ((Rtos0 anc_1053I bv0 bv1)))))
(declare-fun set528 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set528 bv0 bv1) (or (set526 bv0 bv1) (set527 bv0 bv1)))
     :pattern ((set528 bv0 bv1))
     :pattern ((set526 bv0 bv1))
     :pattern ((set527 bv0 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (Rtos0 anc_1056I bv0 bv1) (set528 bv0 bv1))
     :pattern ((Rtos0 anc_1056I bv0 bv1))
     :pattern ((set528 bv0 bv1)))))
(declare-fun set529 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set529 bv0) (and (= bv0 anc_1054I))) :pattern ((set529 bv0)))))
(declare-fun set530 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set530 bv0 bv1) (and (Rmem1 anc_1053I bv0) (set529 bv1)))
     :pattern ((set530 bv0 bv1))
     :pattern ((Rmem1 anc_1053I bv0) (set529 bv1)))))
(declare-fun set531 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set531 bv0) (and (= bv0 anc_1054I))) :pattern ((set531 bv0)))))
(declare-fun set532 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set532 bv0 bv1) (and (set531 bv0) (Rmem1 anc_1055I bv1)))
     :pattern ((set532 bv0 bv1))
     :pattern ((set531 bv0) (Rmem1 anc_1055I bv1)))))
(declare-fun set533 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set533 bv0 bv1) (and (Rmem1 anc_1053I bv0) (Rmem1 anc_1055I bv1)))
     :pattern ((set533 bv0 bv1))
     :pattern ((Rmem1 anc_1053I bv0) (Rmem1 anc_1055I bv1)))))
(declare-fun set534 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set534 bv0 bv1) (or (set532 bv0 bv1) (set533 bv0 bv1)))
     :pattern ((set534 bv0 bv1))
     :pattern ((set532 bv0 bv1))
     :pattern ((set533 bv0 bv1)))))
(declare-fun set535 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set535 bv0 bv1) (or (set530 bv0 bv1) (set534 bv0 bv1)))
     :pattern ((set535 bv0 bv1))
     :pattern ((set530 bv0 bv1))
     :pattern ((set534 bv0 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (Rto2 anc_1056I bv0 bv1) (set535 bv0 bv1))
     :pattern ((Rto2 anc_1056I bv0 bv1))
     :pattern ((set535 bv0 bv1)))))
(declare-fun set536 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set536 bv0) (and (= bv0 anc_1054I))) :pattern ((set536 bv0)))))
(declare-fun set537 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set537 bv0) (or (Rmem1 anc_1055I bv0) (Rmem1 anc_1053I bv0)))
     :pattern ((set537 bv0))
     :pattern ((Rmem1 anc_1055I bv0))
     :pattern ((Rmem1 anc_1053I bv0)))))
(declare-fun set538 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set538 bv0) (or (set536 bv0) (set537 bv0)))
     :pattern ((set538 bv0))
     :pattern ((set536 bv0))
     :pattern ((set537 bv0)))))
(assert (forall ((bv0 T14))
  (! (= (Rmem1 anc_1056I bv0) (set538 bv0))
     :pattern ((Rmem1 anc_1056I bv0))
     :pattern ((set538 bv0)))))
(declare-fun set539 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set539 bv0) (and (= bv0 anc_1054I))) :pattern ((set539 bv0)))))
(assert (forall ((bv0 T14))
  (! (= (Rroot3 anc_1056I bv0) (set539 bv0))
     :pattern ((Rroot3 anc_1056I bv0))
     :pattern ((set539 bv0)))))
(assert (= anc_1055I b))
(assert (= anc_1054I x))
(assert (= anc_1053I a))
(assert (= anc_1052I B))
(assert (= anc_1050I R))
(declare-fun set540 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set540 bv0) (and (= bv0 y))) :pattern ((set540 bv0)))))
(declare-fun set541 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set541 bv0 bv1) (and (Rmem1 b bv0) (set540 bv1)))
     :pattern ((set541 bv0 bv1))
     :pattern ((Rmem1 b bv0) (set540 bv1)))))
(declare-fun set542 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set542 bv0) (and (= bv0 y))) :pattern ((set542 bv0)))))
(declare-fun set543 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set543 bv0 bv1) (and (set542 bv0) (Rmem1 c bv1)))
     :pattern ((set543 bv0 bv1))
     :pattern ((set542 bv0) (Rmem1 c bv1)))))
(declare-fun set544 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set544 bv0 bv1) (and (Rmem1 b bv0) (Rmem1 c bv1)))
     :pattern ((set544 bv0 bv1))
     :pattern ((Rmem1 b bv0) (Rmem1 c bv1)))))
(declare-fun set545 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set545 bv0 bv1) (or (set543 bv0 bv1) (set544 bv0 bv1)))
     :pattern ((set545 bv0 bv1))
     :pattern ((set543 bv0 bv1))
     :pattern ((set544 bv0 bv1)))))
(declare-fun set546 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set546 bv0 bv1) (or (set541 bv0 bv1) (set545 bv0 bv1)))
     :pattern ((set546 bv0 bv1))
     :pattern ((set541 bv0 bv1))
     :pattern ((set545 bv0 bv1)))))
(declare-fun set547 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set547 bv0 bv1) (or (Rtos0 c bv0 bv1) (Rtos0 b bv0 bv1)))
     :pattern ((set547 bv0 bv1))
     :pattern ((Rtos0 c bv0 bv1))
     :pattern ((Rtos0 b bv0 bv1)))))
(declare-fun set548 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set548 bv0 bv1) (or (set546 bv0 bv1) (set547 bv0 bv1)))
     :pattern ((set548 bv0 bv1))
     :pattern ((set546 bv0 bv1))
     :pattern ((set547 bv0 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (Rtos0 anc_1045I bv0 bv1) (set548 bv0 bv1))
     :pattern ((Rtos0 anc_1045I bv0 bv1))
     :pattern ((set548 bv0 bv1)))))
(declare-fun set549 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set549 bv0) (and (= bv0 y))) :pattern ((set549 bv0)))))
(declare-fun set550 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set550 bv0 bv1) (and (Rmem1 b bv0) (set549 bv1)))
     :pattern ((set550 bv0 bv1))
     :pattern ((Rmem1 b bv0) (set549 bv1)))))
(declare-fun set551 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set551 bv0) (and (= bv0 y))) :pattern ((set551 bv0)))))
(declare-fun set552 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set552 bv0 bv1) (and (set551 bv0) (Rmem1 c bv1)))
     :pattern ((set552 bv0 bv1))
     :pattern ((set551 bv0) (Rmem1 c bv1)))))
(declare-fun set553 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set553 bv0 bv1) (and (Rmem1 b bv0) (Rmem1 c bv1)))
     :pattern ((set553 bv0 bv1))
     :pattern ((Rmem1 b bv0) (Rmem1 c bv1)))))
(declare-fun set554 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set554 bv0 bv1) (or (set552 bv0 bv1) (set553 bv0 bv1)))
     :pattern ((set554 bv0 bv1))
     :pattern ((set552 bv0 bv1))
     :pattern ((set553 bv0 bv1)))))
(declare-fun set555 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set555 bv0 bv1) (or (set550 bv0 bv1) (set554 bv0 bv1)))
     :pattern ((set555 bv0 bv1))
     :pattern ((set550 bv0 bv1))
     :pattern ((set554 bv0 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (Rto2 anc_1045I bv0 bv1) (set555 bv0 bv1))
     :pattern ((Rto2 anc_1045I bv0 bv1))
     :pattern ((set555 bv0 bv1)))))
(declare-fun set556 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set556 bv0) (and (= bv0 y))) :pattern ((set556 bv0)))))
(declare-fun set557 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set557 bv0) (or (Rmem1 c bv0) (Rmem1 b bv0)))
     :pattern ((set557 bv0))
     :pattern ((Rmem1 c bv0))
     :pattern ((Rmem1 b bv0)))))
(declare-fun set558 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set558 bv0) (or (set556 bv0) (set557 bv0)))
     :pattern ((set558 bv0))
     :pattern ((set556 bv0))
     :pattern ((set557 bv0)))))
(assert (forall ((bv0 T14))
  (! (= (Rmem1 anc_1045I bv0) (set558 bv0))
     :pattern ((Rmem1 anc_1045I bv0))
     :pattern ((set558 bv0)))))
(declare-fun set559 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set559 bv0) (and (= bv0 y))) :pattern ((set559 bv0)))))
(assert (forall ((bv0 T14))
  (! (= (Rroot3 anc_1045I bv0) (set559 bv0))
     :pattern ((Rroot3 anc_1045I bv0))
     :pattern ((set559 bv0)))))
(declare-fun set560 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set560 bv0) (and (= bv0 x))) :pattern ((set560 bv0)))))
(declare-fun set561 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set561 bv0 bv1) (and (Rmem1 a bv0) (set560 bv1)))
     :pattern ((set561 bv0 bv1))
     :pattern ((Rmem1 a bv0) (set560 bv1)))))
(declare-fun set562 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set562 bv0) (and (= bv0 x))) :pattern ((set562 bv0)))))
(declare-fun set563 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set563 bv0 bv1) (and (set562 bv0) (Rmem1 anc_1045I bv1)))
     :pattern ((set563 bv0 bv1))
     :pattern ((set562 bv0) (Rmem1 anc_1045I bv1)))))
(declare-fun set564 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set564 bv0 bv1) (and (Rmem1 a bv0) (Rmem1 anc_1045I bv1)))
     :pattern ((set564 bv0 bv1))
     :pattern ((Rmem1 a bv0) (Rmem1 anc_1045I bv1)))))
(declare-fun set565 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set565 bv0 bv1) (or (set563 bv0 bv1) (set564 bv0 bv1)))
     :pattern ((set565 bv0 bv1))
     :pattern ((set563 bv0 bv1))
     :pattern ((set564 bv0 bv1)))))
(declare-fun set566 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set566 bv0 bv1) (or (set561 bv0 bv1) (set565 bv0 bv1)))
     :pattern ((set566 bv0 bv1))
     :pattern ((set561 bv0 bv1))
     :pattern ((set565 bv0 bv1)))))
(declare-fun set567 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set567 bv0 bv1) (or (Rtos0 anc_1045I bv0 bv1) (Rtos0 a bv0 bv1)))
     :pattern ((set567 bv0 bv1))
     :pattern ((Rtos0 anc_1045I bv0 bv1))
     :pattern ((Rtos0 a bv0 bv1)))))
(declare-fun set568 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set568 bv0 bv1) (or (set566 bv0 bv1) (set567 bv0 bv1)))
     :pattern ((set568 bv0 bv1))
     :pattern ((set566 bv0 bv1))
     :pattern ((set567 bv0 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (Rtos0 anc_1047I bv0 bv1) (set568 bv0 bv1))
     :pattern ((Rtos0 anc_1047I bv0 bv1))
     :pattern ((set568 bv0 bv1)))))
(declare-fun set569 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set569 bv0) (and (= bv0 x))) :pattern ((set569 bv0)))))
(declare-fun set570 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set570 bv0 bv1) (and (Rmem1 a bv0) (set569 bv1)))
     :pattern ((set570 bv0 bv1))
     :pattern ((Rmem1 a bv0) (set569 bv1)))))
(declare-fun set571 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set571 bv0) (and (= bv0 x))) :pattern ((set571 bv0)))))
(declare-fun set572 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set572 bv0 bv1) (and (set571 bv0) (Rmem1 anc_1045I bv1)))
     :pattern ((set572 bv0 bv1))
     :pattern ((set571 bv0) (Rmem1 anc_1045I bv1)))))
(declare-fun set573 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set573 bv0 bv1) (and (Rmem1 a bv0) (Rmem1 anc_1045I bv1)))
     :pattern ((set573 bv0 bv1))
     :pattern ((Rmem1 a bv0) (Rmem1 anc_1045I bv1)))))
(declare-fun set574 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set574 bv0 bv1) (or (set572 bv0 bv1) (set573 bv0 bv1)))
     :pattern ((set574 bv0 bv1))
     :pattern ((set572 bv0 bv1))
     :pattern ((set573 bv0 bv1)))))
(declare-fun set575 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set575 bv0 bv1) (or (set570 bv0 bv1) (set574 bv0 bv1)))
     :pattern ((set575 bv0 bv1))
     :pattern ((set570 bv0 bv1))
     :pattern ((set574 bv0 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (Rto2 anc_1047I bv0 bv1) (set575 bv0 bv1))
     :pattern ((Rto2 anc_1047I bv0 bv1))
     :pattern ((set575 bv0 bv1)))))
(declare-fun set576 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set576 bv0) (and (= bv0 x))) :pattern ((set576 bv0)))))
(declare-fun set577 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set577 bv0) (or (Rmem1 anc_1045I bv0) (Rmem1 a bv0)))
     :pattern ((set577 bv0))
     :pattern ((Rmem1 anc_1045I bv0))
     :pattern ((Rmem1 a bv0)))))
(declare-fun set578 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set578 bv0) (or (set576 bv0) (set577 bv0)))
     :pattern ((set578 bv0))
     :pattern ((set576 bv0))
     :pattern ((set577 bv0)))))
(assert (forall ((bv0 T14))
  (! (= (Rmem1 anc_1047I bv0) (set578 bv0))
     :pattern ((Rmem1 anc_1047I bv0))
     :pattern ((set578 bv0)))))
(declare-fun set579 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set579 bv0) (and (= bv0 x))) :pattern ((set579 bv0)))))
(assert (forall ((bv0 T14))
  (! (= (Rroot3 anc_1047I bv0) (set579 bv0))
     :pattern ((Rroot3 anc_1047I bv0))
     :pattern ((set579 bv0)))))
(declare-fun set580 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set580 bv0) (and (= bv0 anc_1057I))) :pattern ((set580 bv0)))))
(declare-fun set581 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set581 bv0 bv1) (and (Rmem1 anc_1056I bv0) (set580 bv1)))
     :pattern ((set581 bv0 bv1))
     :pattern ((Rmem1 anc_1056I bv0) (set580 bv1)))))
(declare-fun set582 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set582 bv0) (and (= bv0 anc_1057I))) :pattern ((set582 bv0)))))
(declare-fun set583 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set583 bv0 bv1) (and (set582 bv0) (Rmem1 anc_1063I bv1)))
     :pattern ((set583 bv0 bv1))
     :pattern ((set582 bv0) (Rmem1 anc_1063I bv1)))))
(declare-fun set584 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set584 bv0 bv1) (and (Rmem1 anc_1056I bv0) (Rmem1 anc_1063I bv1)))
     :pattern ((set584 bv0 bv1))
     :pattern ((Rmem1 anc_1056I bv0) (Rmem1 anc_1063I bv1)))))
(declare-fun set585 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set585 bv0 bv1) (or (set583 bv0 bv1) (set584 bv0 bv1)))
     :pattern ((set585 bv0 bv1))
     :pattern ((set583 bv0 bv1))
     :pattern ((set584 bv0 bv1)))))
(declare-fun set586 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set586 bv0 bv1) (or (set581 bv0 bv1) (set585 bv0 bv1)))
     :pattern ((set586 bv0 bv1))
     :pattern ((set581 bv0 bv1))
     :pattern ((set585 bv0 bv1)))))
(declare-fun set587 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set587 bv0 bv1)
        (or (Rtos0 anc_1063I bv0 bv1) (Rtos0 anc_1056I bv0 bv1)))
     :pattern ((set587 bv0 bv1))
     :pattern ((Rtos0 anc_1063I bv0 bv1))
     :pattern ((Rtos0 anc_1056I bv0 bv1)))))
(declare-fun set588 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set588 bv0 bv1) (or (set586 bv0 bv1) (set587 bv0 bv1)))
     :pattern ((set588 bv0 bv1))
     :pattern ((set586 bv0 bv1))
     :pattern ((set587 bv0 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (Rtos0 v_15 bv0 bv1) (set588 bv0 bv1))
     :pattern ((Rtos0 v_15 bv0 bv1))
     :pattern ((set588 bv0 bv1)))))
(declare-fun set589 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set589 bv0) (and (= bv0 anc_1057I))) :pattern ((set589 bv0)))))
(declare-fun set590 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set590 bv0 bv1) (and (Rmem1 anc_1056I bv0) (set589 bv1)))
     :pattern ((set590 bv0 bv1))
     :pattern ((Rmem1 anc_1056I bv0) (set589 bv1)))))
(declare-fun set591 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set591 bv0) (and (= bv0 anc_1057I))) :pattern ((set591 bv0)))))
(declare-fun set592 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set592 bv0 bv1) (and (set591 bv0) (Rmem1 anc_1063I bv1)))
     :pattern ((set592 bv0 bv1))
     :pattern ((set591 bv0) (Rmem1 anc_1063I bv1)))))
(declare-fun set593 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set593 bv0 bv1) (and (Rmem1 anc_1056I bv0) (Rmem1 anc_1063I bv1)))
     :pattern ((set593 bv0 bv1))
     :pattern ((Rmem1 anc_1056I bv0) (Rmem1 anc_1063I bv1)))))
(declare-fun set594 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set594 bv0 bv1) (or (set592 bv0 bv1) (set593 bv0 bv1)))
     :pattern ((set594 bv0 bv1))
     :pattern ((set592 bv0 bv1))
     :pattern ((set593 bv0 bv1)))))
(declare-fun set595 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set595 bv0 bv1) (or (set590 bv0 bv1) (set594 bv0 bv1)))
     :pattern ((set595 bv0 bv1))
     :pattern ((set590 bv0 bv1))
     :pattern ((set594 bv0 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (Rto2 v_15 bv0 bv1) (set595 bv0 bv1))
     :pattern ((Rto2 v_15 bv0 bv1))
     :pattern ((set595 bv0 bv1)))))
(declare-fun set596 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set596 bv0) (and (= bv0 anc_1057I))) :pattern ((set596 bv0)))))
(declare-fun set597 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set597 bv0) (or (Rmem1 anc_1063I bv0) (Rmem1 anc_1056I bv0)))
     :pattern ((set597 bv0))
     :pattern ((Rmem1 anc_1063I bv0))
     :pattern ((Rmem1 anc_1056I bv0)))))
(declare-fun set598 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set598 bv0) (or (set596 bv0) (set597 bv0)))
     :pattern ((set598 bv0))
     :pattern ((set596 bv0))
     :pattern ((set597 bv0)))))
(assert (forall ((bv0 T14))
  (! (= (Rmem1 v_15 bv0) (set598 bv0))
     :pattern ((Rmem1 v_15 bv0))
     :pattern ((set598 bv0)))))
(declare-fun set599 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set599 bv0) (and (= bv0 anc_1057I))) :pattern ((set599 bv0)))))
(assert (forall ((bv0 T14))
  (! (= (Rroot3 v_15 bv0) (set599 bv0))
     :pattern ((Rroot3 v_15 bv0))
     :pattern ((set599 bv0)))))
(assert (not (forall ((bv1 T14) (bv0 T14))
       (! (= (Rtos0 v_15 bv0 bv1) (Rtos0 x_0 bv0 bv1))
          :pattern ((Rtos0 v_15 bv0 bv1))
          :pattern ((Rtos0 x_0 bv0 bv1))))))
(check-sat)

(declare-sort T15)
(declare-const v_15 T15)
(declare-const x_0 T15)
(declare-sort T16)
(declare-const B T16)
(declare-const R T16)
(declare-const t T15)
(declare-const anc_1048I T16)
(declare-const anc_1047I T15)
(declare-sort T17)
(declare-const z T17)
(declare-const d T15)
(declare-const sv_4113 T15)
(declare-const sv_4116 T16)
(declare-const anc_1046I T16)
(declare-const a T15)
(declare-const x T17)
(declare-const anc_1045I T15)
(declare-const sv_4118 T15)
(declare-const sv_4120 T16)
(declare-const anc_1044I T16)
(declare-const b T15)
(declare-const y T17)
(declare-const c T15)
(declare-const sv_4122 T15)
(declare-const sv_4124 T16)
(declare-const anc_1050I T16)
(declare-const anc_1052I T16)
(declare-const anc_1053I T15)
(declare-const anc_1054I T17)
(declare-const anc_1055I T15)
(declare-const anc_1056I T15)
(declare-const anc_1057I T17)
(declare-const anc_1059I T16)
(declare-const anc_1060I T15)
(declare-const anc_1061I T17)
(declare-const anc_1062I T15)
(declare-const anc_1063I T15)
(declare-fun Rroot3 (T15 T17) Bool)
(declare-fun Rto2 (T15 T17 T17) Bool)
(declare-fun Rmem1 (T15 T17) Bool)
(declare-fun Rtos0 (T15 T17 T17) Bool)
(assert (= t x_0))
(declare-fun set600 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set600 bv0) (and (= bv0 z))) :pattern ((set600 bv0)))))
(declare-fun set601 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set601 bv0 bv1) (and (Rmem1 anc_1047I bv0) (set600 bv1)))
     :pattern ((set601 bv0 bv1))
     :pattern ((Rmem1 anc_1047I bv0) (set600 bv1)))))
(declare-fun set602 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set602 bv0) (and (= bv0 z))) :pattern ((set602 bv0)))))
(declare-fun set603 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set603 bv0 bv1) (and (set602 bv0) (Rmem1 d bv1)))
     :pattern ((set603 bv0 bv1))
     :pattern ((set602 bv0) (Rmem1 d bv1)))))
(declare-fun set604 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set604 bv0 bv1) (and (Rmem1 anc_1047I bv0) (Rmem1 d bv1)))
     :pattern ((set604 bv0 bv1))
     :pattern ((Rmem1 anc_1047I bv0) (Rmem1 d bv1)))))
(declare-fun set605 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set605 bv0 bv1) (or (set603 bv0 bv1) (set604 bv0 bv1)))
     :pattern ((set605 bv0 bv1))
     :pattern ((set603 bv0 bv1))
     :pattern ((set604 bv0 bv1)))))
(declare-fun set606 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set606 bv0 bv1) (or (set601 bv0 bv1) (set605 bv0 bv1)))
     :pattern ((set606 bv0 bv1))
     :pattern ((set601 bv0 bv1))
     :pattern ((set605 bv0 bv1)))))
(declare-fun set607 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set607 bv0 bv1) (or (Rtos0 d bv0 bv1) (Rtos0 anc_1047I bv0 bv1)))
     :pattern ((set607 bv0 bv1))
     :pattern ((Rtos0 d bv0 bv1))
     :pattern ((Rtos0 anc_1047I bv0 bv1)))))
(declare-fun set608 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set608 bv0 bv1) (or (set606 bv0 bv1) (set607 bv0 bv1)))
     :pattern ((set608 bv0 bv1))
     :pattern ((set606 bv0 bv1))
     :pattern ((set607 bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (Rtos0 t bv0 bv1) (set608 bv0 bv1))
     :pattern ((Rtos0 t bv0 bv1))
     :pattern ((set608 bv0 bv1)))))
(declare-fun set609 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set609 bv0) (and (= bv0 z))) :pattern ((set609 bv0)))))
(declare-fun set610 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set610 bv0 bv1) (and (Rmem1 anc_1047I bv0) (set609 bv1)))
     :pattern ((set610 bv0 bv1))
     :pattern ((Rmem1 anc_1047I bv0) (set609 bv1)))))
(declare-fun set611 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set611 bv0) (and (= bv0 z))) :pattern ((set611 bv0)))))
(declare-fun set612 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set612 bv0 bv1) (and (set611 bv0) (Rmem1 d bv1)))
     :pattern ((set612 bv0 bv1))
     :pattern ((set611 bv0) (Rmem1 d bv1)))))
(declare-fun set613 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set613 bv0 bv1) (and (Rmem1 anc_1047I bv0) (Rmem1 d bv1)))
     :pattern ((set613 bv0 bv1))
     :pattern ((Rmem1 anc_1047I bv0) (Rmem1 d bv1)))))
(declare-fun set614 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set614 bv0 bv1) (or (set612 bv0 bv1) (set613 bv0 bv1)))
     :pattern ((set614 bv0 bv1))
     :pattern ((set612 bv0 bv1))
     :pattern ((set613 bv0 bv1)))))
(declare-fun set615 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set615 bv0 bv1) (or (set610 bv0 bv1) (set614 bv0 bv1)))
     :pattern ((set615 bv0 bv1))
     :pattern ((set610 bv0 bv1))
     :pattern ((set614 bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (Rto2 t bv0 bv1) (set615 bv0 bv1))
     :pattern ((Rto2 t bv0 bv1))
     :pattern ((set615 bv0 bv1)))))
(declare-fun set616 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set616 bv0) (and (= bv0 z))) :pattern ((set616 bv0)))))
(declare-fun set617 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set617 bv0) (or (Rmem1 d bv0) (Rmem1 anc_1047I bv0)))
     :pattern ((set617 bv0))
     :pattern ((Rmem1 d bv0))
     :pattern ((Rmem1 anc_1047I bv0)))))
(declare-fun set618 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set618 bv0) (or (set616 bv0) (set617 bv0)))
     :pattern ((set618 bv0))
     :pattern ((set616 bv0))
     :pattern ((set617 bv0)))))
(assert (forall ((bv0 T17))
  (! (= (Rmem1 t bv0) (set618 bv0))
     :pattern ((Rmem1 t bv0))
     :pattern ((set618 bv0)))))
(declare-fun set619 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set619 bv0) (and (= bv0 z))) :pattern ((set619 bv0)))))
(assert (forall ((bv0 T17))
  (! (= (Rroot3 t bv0) (set619 bv0))
     :pattern ((Rroot3 t bv0))
     :pattern ((set619 bv0)))))
(declare-fun set620 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set620 bv0) (and (= bv0 anc_1061I))) :pattern ((set620 bv0)))))
(declare-fun set621 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set621 bv0 bv1) (and (Rmem1 anc_1060I bv0) (set620 bv1)))
     :pattern ((set621 bv0 bv1))
     :pattern ((Rmem1 anc_1060I bv0) (set620 bv1)))))
(declare-fun set622 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set622 bv0) (and (= bv0 anc_1061I))) :pattern ((set622 bv0)))))
(declare-fun set623 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set623 bv0 bv1) (and (set622 bv0) (Rmem1 anc_1062I bv1)))
     :pattern ((set623 bv0 bv1))
     :pattern ((set622 bv0) (Rmem1 anc_1062I bv1)))))
(declare-fun set624 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set624 bv0 bv1) (and (Rmem1 anc_1060I bv0) (Rmem1 anc_1062I bv1)))
     :pattern ((set624 bv0 bv1))
     :pattern ((Rmem1 anc_1060I bv0) (Rmem1 anc_1062I bv1)))))
(declare-fun set625 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set625 bv0 bv1) (or (set623 bv0 bv1) (set624 bv0 bv1)))
     :pattern ((set625 bv0 bv1))
     :pattern ((set623 bv0 bv1))
     :pattern ((set624 bv0 bv1)))))
(declare-fun set626 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set626 bv0 bv1) (or (set621 bv0 bv1) (set625 bv0 bv1)))
     :pattern ((set626 bv0 bv1))
     :pattern ((set621 bv0 bv1))
     :pattern ((set625 bv0 bv1)))))
(declare-fun set627 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set627 bv0 bv1)
        (or (Rtos0 anc_1062I bv0 bv1) (Rtos0 anc_1060I bv0 bv1)))
     :pattern ((set627 bv0 bv1))
     :pattern ((Rtos0 anc_1062I bv0 bv1))
     :pattern ((Rtos0 anc_1060I bv0 bv1)))))
(declare-fun set628 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set628 bv0 bv1) (or (set626 bv0 bv1) (set627 bv0 bv1)))
     :pattern ((set628 bv0 bv1))
     :pattern ((set626 bv0 bv1))
     :pattern ((set627 bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (Rtos0 anc_1063I bv0 bv1) (set628 bv0 bv1))
     :pattern ((Rtos0 anc_1063I bv0 bv1))
     :pattern ((set628 bv0 bv1)))))
(declare-fun set629 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set629 bv0) (and (= bv0 anc_1061I))) :pattern ((set629 bv0)))))
(declare-fun set630 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set630 bv0 bv1) (and (Rmem1 anc_1060I bv0) (set629 bv1)))
     :pattern ((set630 bv0 bv1))
     :pattern ((Rmem1 anc_1060I bv0) (set629 bv1)))))
(declare-fun set631 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set631 bv0) (and (= bv0 anc_1061I))) :pattern ((set631 bv0)))))
(declare-fun set632 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set632 bv0 bv1) (and (set631 bv0) (Rmem1 anc_1062I bv1)))
     :pattern ((set632 bv0 bv1))
     :pattern ((set631 bv0) (Rmem1 anc_1062I bv1)))))
(declare-fun set633 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set633 bv0 bv1) (and (Rmem1 anc_1060I bv0) (Rmem1 anc_1062I bv1)))
     :pattern ((set633 bv0 bv1))
     :pattern ((Rmem1 anc_1060I bv0) (Rmem1 anc_1062I bv1)))))
(declare-fun set634 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set634 bv0 bv1) (or (set632 bv0 bv1) (set633 bv0 bv1)))
     :pattern ((set634 bv0 bv1))
     :pattern ((set632 bv0 bv1))
     :pattern ((set633 bv0 bv1)))))
(declare-fun set635 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set635 bv0 bv1) (or (set630 bv0 bv1) (set634 bv0 bv1)))
     :pattern ((set635 bv0 bv1))
     :pattern ((set630 bv0 bv1))
     :pattern ((set634 bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (Rto2 anc_1063I bv0 bv1) (set635 bv0 bv1))
     :pattern ((Rto2 anc_1063I bv0 bv1))
     :pattern ((set635 bv0 bv1)))))
(declare-fun set636 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set636 bv0) (and (= bv0 anc_1061I))) :pattern ((set636 bv0)))))
(declare-fun set637 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set637 bv0) (or (Rmem1 anc_1062I bv0) (Rmem1 anc_1060I bv0)))
     :pattern ((set637 bv0))
     :pattern ((Rmem1 anc_1062I bv0))
     :pattern ((Rmem1 anc_1060I bv0)))))
(declare-fun set638 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set638 bv0) (or (set636 bv0) (set637 bv0)))
     :pattern ((set638 bv0))
     :pattern ((set636 bv0))
     :pattern ((set637 bv0)))))
(assert (forall ((bv0 T17))
  (! (= (Rmem1 anc_1063I bv0) (set638 bv0))
     :pattern ((Rmem1 anc_1063I bv0))
     :pattern ((set638 bv0)))))
(declare-fun set639 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set639 bv0) (and (= bv0 anc_1061I))) :pattern ((set639 bv0)))))
(assert (forall ((bv0 T17))
  (! (= (Rroot3 anc_1063I bv0) (set639 bv0))
     :pattern ((Rroot3 anc_1063I bv0))
     :pattern ((set639 bv0)))))
(assert (= anc_1062I d))
(assert (= anc_1061I z))
(assert (= anc_1060I c))
(assert (= anc_1059I B))
(assert (= anc_1057I y))
(declare-fun set640 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set640 bv0) (and (= bv0 anc_1054I))) :pattern ((set640 bv0)))))
(declare-fun set641 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set641 bv0 bv1) (and (Rmem1 anc_1053I bv0) (set640 bv1)))
     :pattern ((set641 bv0 bv1))
     :pattern ((Rmem1 anc_1053I bv0) (set640 bv1)))))
(declare-fun set642 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set642 bv0) (and (= bv0 anc_1054I))) :pattern ((set642 bv0)))))
(declare-fun set643 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set643 bv0 bv1) (and (set642 bv0) (Rmem1 anc_1055I bv1)))
     :pattern ((set643 bv0 bv1))
     :pattern ((set642 bv0) (Rmem1 anc_1055I bv1)))))
(declare-fun set644 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set644 bv0 bv1) (and (Rmem1 anc_1053I bv0) (Rmem1 anc_1055I bv1)))
     :pattern ((set644 bv0 bv1))
     :pattern ((Rmem1 anc_1053I bv0) (Rmem1 anc_1055I bv1)))))
(declare-fun set645 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set645 bv0 bv1) (or (set643 bv0 bv1) (set644 bv0 bv1)))
     :pattern ((set645 bv0 bv1))
     :pattern ((set643 bv0 bv1))
     :pattern ((set644 bv0 bv1)))))
(declare-fun set646 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set646 bv0 bv1) (or (set641 bv0 bv1) (set645 bv0 bv1)))
     :pattern ((set646 bv0 bv1))
     :pattern ((set641 bv0 bv1))
     :pattern ((set645 bv0 bv1)))))
(declare-fun set647 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set647 bv0 bv1)
        (or (Rtos0 anc_1055I bv0 bv1) (Rtos0 anc_1053I bv0 bv1)))
     :pattern ((set647 bv0 bv1))
     :pattern ((Rtos0 anc_1055I bv0 bv1))
     :pattern ((Rtos0 anc_1053I bv0 bv1)))))
(declare-fun set648 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set648 bv0 bv1) (or (set646 bv0 bv1) (set647 bv0 bv1)))
     :pattern ((set648 bv0 bv1))
     :pattern ((set646 bv0 bv1))
     :pattern ((set647 bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (Rtos0 anc_1056I bv0 bv1) (set648 bv0 bv1))
     :pattern ((Rtos0 anc_1056I bv0 bv1))
     :pattern ((set648 bv0 bv1)))))
(declare-fun set649 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set649 bv0) (and (= bv0 anc_1054I))) :pattern ((set649 bv0)))))
(declare-fun set650 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set650 bv0 bv1) (and (Rmem1 anc_1053I bv0) (set649 bv1)))
     :pattern ((set650 bv0 bv1))
     :pattern ((Rmem1 anc_1053I bv0) (set649 bv1)))))
(declare-fun set651 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set651 bv0) (and (= bv0 anc_1054I))) :pattern ((set651 bv0)))))
(declare-fun set652 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set652 bv0 bv1) (and (set651 bv0) (Rmem1 anc_1055I bv1)))
     :pattern ((set652 bv0 bv1))
     :pattern ((set651 bv0) (Rmem1 anc_1055I bv1)))))
(declare-fun set653 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set653 bv0 bv1) (and (Rmem1 anc_1053I bv0) (Rmem1 anc_1055I bv1)))
     :pattern ((set653 bv0 bv1))
     :pattern ((Rmem1 anc_1053I bv0) (Rmem1 anc_1055I bv1)))))
(declare-fun set654 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set654 bv0 bv1) (or (set652 bv0 bv1) (set653 bv0 bv1)))
     :pattern ((set654 bv0 bv1))
     :pattern ((set652 bv0 bv1))
     :pattern ((set653 bv0 bv1)))))
(declare-fun set655 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set655 bv0 bv1) (or (set650 bv0 bv1) (set654 bv0 bv1)))
     :pattern ((set655 bv0 bv1))
     :pattern ((set650 bv0 bv1))
     :pattern ((set654 bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (Rto2 anc_1056I bv0 bv1) (set655 bv0 bv1))
     :pattern ((Rto2 anc_1056I bv0 bv1))
     :pattern ((set655 bv0 bv1)))))
(declare-fun set656 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set656 bv0) (and (= bv0 anc_1054I))) :pattern ((set656 bv0)))))
(declare-fun set657 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set657 bv0) (or (Rmem1 anc_1055I bv0) (Rmem1 anc_1053I bv0)))
     :pattern ((set657 bv0))
     :pattern ((Rmem1 anc_1055I bv0))
     :pattern ((Rmem1 anc_1053I bv0)))))
(declare-fun set658 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set658 bv0) (or (set656 bv0) (set657 bv0)))
     :pattern ((set658 bv0))
     :pattern ((set656 bv0))
     :pattern ((set657 bv0)))))
(assert (forall ((bv0 T17))
  (! (= (Rmem1 anc_1056I bv0) (set658 bv0))
     :pattern ((Rmem1 anc_1056I bv0))
     :pattern ((set658 bv0)))))
(declare-fun set659 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set659 bv0) (and (= bv0 anc_1054I))) :pattern ((set659 bv0)))))
(assert (forall ((bv0 T17))
  (! (= (Rroot3 anc_1056I bv0) (set659 bv0))
     :pattern ((Rroot3 anc_1056I bv0))
     :pattern ((set659 bv0)))))
(assert (= anc_1055I b))
(assert (= anc_1054I x))
(assert (= anc_1053I a))
(assert (= anc_1052I B))
(assert (= anc_1050I R))
(declare-fun set660 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set660 bv0) (and (= bv0 y))) :pattern ((set660 bv0)))))
(declare-fun set661 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set661 bv0 bv1) (and (Rmem1 b bv0) (set660 bv1)))
     :pattern ((set661 bv0 bv1))
     :pattern ((Rmem1 b bv0) (set660 bv1)))))
(declare-fun set662 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set662 bv0) (and (= bv0 y))) :pattern ((set662 bv0)))))
(declare-fun set663 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set663 bv0 bv1) (and (set662 bv0) (Rmem1 c bv1)))
     :pattern ((set663 bv0 bv1))
     :pattern ((set662 bv0) (Rmem1 c bv1)))))
(declare-fun set664 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set664 bv0 bv1) (and (Rmem1 b bv0) (Rmem1 c bv1)))
     :pattern ((set664 bv0 bv1))
     :pattern ((Rmem1 b bv0) (Rmem1 c bv1)))))
(declare-fun set665 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set665 bv0 bv1) (or (set663 bv0 bv1) (set664 bv0 bv1)))
     :pattern ((set665 bv0 bv1))
     :pattern ((set663 bv0 bv1))
     :pattern ((set664 bv0 bv1)))))
(declare-fun set666 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set666 bv0 bv1) (or (set661 bv0 bv1) (set665 bv0 bv1)))
     :pattern ((set666 bv0 bv1))
     :pattern ((set661 bv0 bv1))
     :pattern ((set665 bv0 bv1)))))
(declare-fun set667 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set667 bv0 bv1) (or (Rtos0 c bv0 bv1) (Rtos0 b bv0 bv1)))
     :pattern ((set667 bv0 bv1))
     :pattern ((Rtos0 c bv0 bv1))
     :pattern ((Rtos0 b bv0 bv1)))))
(declare-fun set668 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set668 bv0 bv1) (or (set666 bv0 bv1) (set667 bv0 bv1)))
     :pattern ((set668 bv0 bv1))
     :pattern ((set666 bv0 bv1))
     :pattern ((set667 bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (Rtos0 anc_1045I bv0 bv1) (set668 bv0 bv1))
     :pattern ((Rtos0 anc_1045I bv0 bv1))
     :pattern ((set668 bv0 bv1)))))
(declare-fun set669 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set669 bv0) (and (= bv0 y))) :pattern ((set669 bv0)))))
(declare-fun set670 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set670 bv0 bv1) (and (Rmem1 b bv0) (set669 bv1)))
     :pattern ((set670 bv0 bv1))
     :pattern ((Rmem1 b bv0) (set669 bv1)))))
(declare-fun set671 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set671 bv0) (and (= bv0 y))) :pattern ((set671 bv0)))))
(declare-fun set672 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set672 bv0 bv1) (and (set671 bv0) (Rmem1 c bv1)))
     :pattern ((set672 bv0 bv1))
     :pattern ((set671 bv0) (Rmem1 c bv1)))))
(declare-fun set673 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set673 bv0 bv1) (and (Rmem1 b bv0) (Rmem1 c bv1)))
     :pattern ((set673 bv0 bv1))
     :pattern ((Rmem1 b bv0) (Rmem1 c bv1)))))
(declare-fun set674 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set674 bv0 bv1) (or (set672 bv0 bv1) (set673 bv0 bv1)))
     :pattern ((set674 bv0 bv1))
     :pattern ((set672 bv0 bv1))
     :pattern ((set673 bv0 bv1)))))
(declare-fun set675 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set675 bv0 bv1) (or (set670 bv0 bv1) (set674 bv0 bv1)))
     :pattern ((set675 bv0 bv1))
     :pattern ((set670 bv0 bv1))
     :pattern ((set674 bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (Rto2 anc_1045I bv0 bv1) (set675 bv0 bv1))
     :pattern ((Rto2 anc_1045I bv0 bv1))
     :pattern ((set675 bv0 bv1)))))
(declare-fun set676 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set676 bv0) (and (= bv0 y))) :pattern ((set676 bv0)))))
(declare-fun set677 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set677 bv0) (or (Rmem1 c bv0) (Rmem1 b bv0)))
     :pattern ((set677 bv0))
     :pattern ((Rmem1 c bv0))
     :pattern ((Rmem1 b bv0)))))
(declare-fun set678 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set678 bv0) (or (set676 bv0) (set677 bv0)))
     :pattern ((set678 bv0))
     :pattern ((set676 bv0))
     :pattern ((set677 bv0)))))
(assert (forall ((bv0 T17))
  (! (= (Rmem1 anc_1045I bv0) (set678 bv0))
     :pattern ((Rmem1 anc_1045I bv0))
     :pattern ((set678 bv0)))))
(declare-fun set679 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set679 bv0) (and (= bv0 y))) :pattern ((set679 bv0)))))
(assert (forall ((bv0 T17))
  (! (= (Rroot3 anc_1045I bv0) (set679 bv0))
     :pattern ((Rroot3 anc_1045I bv0))
     :pattern ((set679 bv0)))))
(declare-fun set680 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set680 bv0) (and (= bv0 x))) :pattern ((set680 bv0)))))
(declare-fun set681 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set681 bv0 bv1) (and (Rmem1 a bv0) (set680 bv1)))
     :pattern ((set681 bv0 bv1))
     :pattern ((Rmem1 a bv0) (set680 bv1)))))
(declare-fun set682 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set682 bv0) (and (= bv0 x))) :pattern ((set682 bv0)))))
(declare-fun set683 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set683 bv0 bv1) (and (set682 bv0) (Rmem1 anc_1045I bv1)))
     :pattern ((set683 bv0 bv1))
     :pattern ((set682 bv0) (Rmem1 anc_1045I bv1)))))
(declare-fun set684 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set684 bv0 bv1) (and (Rmem1 a bv0) (Rmem1 anc_1045I bv1)))
     :pattern ((set684 bv0 bv1))
     :pattern ((Rmem1 a bv0) (Rmem1 anc_1045I bv1)))))
(declare-fun set685 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set685 bv0 bv1) (or (set683 bv0 bv1) (set684 bv0 bv1)))
     :pattern ((set685 bv0 bv1))
     :pattern ((set683 bv0 bv1))
     :pattern ((set684 bv0 bv1)))))
(declare-fun set686 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set686 bv0 bv1) (or (set681 bv0 bv1) (set685 bv0 bv1)))
     :pattern ((set686 bv0 bv1))
     :pattern ((set681 bv0 bv1))
     :pattern ((set685 bv0 bv1)))))
(declare-fun set687 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set687 bv0 bv1) (or (Rtos0 anc_1045I bv0 bv1) (Rtos0 a bv0 bv1)))
     :pattern ((set687 bv0 bv1))
     :pattern ((Rtos0 anc_1045I bv0 bv1))
     :pattern ((Rtos0 a bv0 bv1)))))
(declare-fun set688 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set688 bv0 bv1) (or (set686 bv0 bv1) (set687 bv0 bv1)))
     :pattern ((set688 bv0 bv1))
     :pattern ((set686 bv0 bv1))
     :pattern ((set687 bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (Rtos0 anc_1047I bv0 bv1) (set688 bv0 bv1))
     :pattern ((Rtos0 anc_1047I bv0 bv1))
     :pattern ((set688 bv0 bv1)))))
(declare-fun set689 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set689 bv0) (and (= bv0 x))) :pattern ((set689 bv0)))))
(declare-fun set690 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set690 bv0 bv1) (and (Rmem1 a bv0) (set689 bv1)))
     :pattern ((set690 bv0 bv1))
     :pattern ((Rmem1 a bv0) (set689 bv1)))))
(declare-fun set691 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set691 bv0) (and (= bv0 x))) :pattern ((set691 bv0)))))
(declare-fun set692 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set692 bv0 bv1) (and (set691 bv0) (Rmem1 anc_1045I bv1)))
     :pattern ((set692 bv0 bv1))
     :pattern ((set691 bv0) (Rmem1 anc_1045I bv1)))))
(declare-fun set693 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set693 bv0 bv1) (and (Rmem1 a bv0) (Rmem1 anc_1045I bv1)))
     :pattern ((set693 bv0 bv1))
     :pattern ((Rmem1 a bv0) (Rmem1 anc_1045I bv1)))))
(declare-fun set694 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set694 bv0 bv1) (or (set692 bv0 bv1) (set693 bv0 bv1)))
     :pattern ((set694 bv0 bv1))
     :pattern ((set692 bv0 bv1))
     :pattern ((set693 bv0 bv1)))))
(declare-fun set695 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set695 bv0 bv1) (or (set690 bv0 bv1) (set694 bv0 bv1)))
     :pattern ((set695 bv0 bv1))
     :pattern ((set690 bv0 bv1))
     :pattern ((set694 bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (Rto2 anc_1047I bv0 bv1) (set695 bv0 bv1))
     :pattern ((Rto2 anc_1047I bv0 bv1))
     :pattern ((set695 bv0 bv1)))))
(declare-fun set696 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set696 bv0) (and (= bv0 x))) :pattern ((set696 bv0)))))
(declare-fun set697 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set697 bv0) (or (Rmem1 anc_1045I bv0) (Rmem1 a bv0)))
     :pattern ((set697 bv0))
     :pattern ((Rmem1 anc_1045I bv0))
     :pattern ((Rmem1 a bv0)))))
(declare-fun set698 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set698 bv0) (or (set696 bv0) (set697 bv0)))
     :pattern ((set698 bv0))
     :pattern ((set696 bv0))
     :pattern ((set697 bv0)))))
(assert (forall ((bv0 T17))
  (! (= (Rmem1 anc_1047I bv0) (set698 bv0))
     :pattern ((Rmem1 anc_1047I bv0))
     :pattern ((set698 bv0)))))
(declare-fun set699 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set699 bv0) (and (= bv0 x))) :pattern ((set699 bv0)))))
(assert (forall ((bv0 T17))
  (! (= (Rroot3 anc_1047I bv0) (set699 bv0))
     :pattern ((Rroot3 anc_1047I bv0))
     :pattern ((set699 bv0)))))
(declare-fun set700 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set700 bv0) (and (= bv0 anc_1057I))) :pattern ((set700 bv0)))))
(declare-fun set701 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set701 bv0 bv1) (and (Rmem1 anc_1056I bv0) (set700 bv1)))
     :pattern ((set701 bv0 bv1))
     :pattern ((Rmem1 anc_1056I bv0) (set700 bv1)))))
(declare-fun set702 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set702 bv0) (and (= bv0 anc_1057I))) :pattern ((set702 bv0)))))
(declare-fun set703 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set703 bv0 bv1) (and (set702 bv0) (Rmem1 anc_1063I bv1)))
     :pattern ((set703 bv0 bv1))
     :pattern ((set702 bv0) (Rmem1 anc_1063I bv1)))))
(declare-fun set704 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set704 bv0 bv1) (and (Rmem1 anc_1056I bv0) (Rmem1 anc_1063I bv1)))
     :pattern ((set704 bv0 bv1))
     :pattern ((Rmem1 anc_1056I bv0) (Rmem1 anc_1063I bv1)))))
(declare-fun set705 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set705 bv0 bv1) (or (set703 bv0 bv1) (set704 bv0 bv1)))
     :pattern ((set705 bv0 bv1))
     :pattern ((set703 bv0 bv1))
     :pattern ((set704 bv0 bv1)))))
(declare-fun set706 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set706 bv0 bv1) (or (set701 bv0 bv1) (set705 bv0 bv1)))
     :pattern ((set706 bv0 bv1))
     :pattern ((set701 bv0 bv1))
     :pattern ((set705 bv0 bv1)))))
(declare-fun set707 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set707 bv0 bv1)
        (or (Rtos0 anc_1063I bv0 bv1) (Rtos0 anc_1056I bv0 bv1)))
     :pattern ((set707 bv0 bv1))
     :pattern ((Rtos0 anc_1063I bv0 bv1))
     :pattern ((Rtos0 anc_1056I bv0 bv1)))))
(declare-fun set708 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set708 bv0 bv1) (or (set706 bv0 bv1) (set707 bv0 bv1)))
     :pattern ((set708 bv0 bv1))
     :pattern ((set706 bv0 bv1))
     :pattern ((set707 bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (Rtos0 v_15 bv0 bv1) (set708 bv0 bv1))
     :pattern ((Rtos0 v_15 bv0 bv1))
     :pattern ((set708 bv0 bv1)))))
(declare-fun set709 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set709 bv0) (and (= bv0 anc_1057I))) :pattern ((set709 bv0)))))
(declare-fun set710 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set710 bv0 bv1) (and (Rmem1 anc_1056I bv0) (set709 bv1)))
     :pattern ((set710 bv0 bv1))
     :pattern ((Rmem1 anc_1056I bv0) (set709 bv1)))))
(declare-fun set711 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set711 bv0) (and (= bv0 anc_1057I))) :pattern ((set711 bv0)))))
(declare-fun set712 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set712 bv0 bv1) (and (set711 bv0) (Rmem1 anc_1063I bv1)))
     :pattern ((set712 bv0 bv1))
     :pattern ((set711 bv0) (Rmem1 anc_1063I bv1)))))
(declare-fun set713 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set713 bv0 bv1) (and (Rmem1 anc_1056I bv0) (Rmem1 anc_1063I bv1)))
     :pattern ((set713 bv0 bv1))
     :pattern ((Rmem1 anc_1056I bv0) (Rmem1 anc_1063I bv1)))))
(declare-fun set714 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set714 bv0 bv1) (or (set712 bv0 bv1) (set713 bv0 bv1)))
     :pattern ((set714 bv0 bv1))
     :pattern ((set712 bv0 bv1))
     :pattern ((set713 bv0 bv1)))))
(declare-fun set715 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set715 bv0 bv1) (or (set710 bv0 bv1) (set714 bv0 bv1)))
     :pattern ((set715 bv0 bv1))
     :pattern ((set710 bv0 bv1))
     :pattern ((set714 bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (Rto2 v_15 bv0 bv1) (set715 bv0 bv1))
     :pattern ((Rto2 v_15 bv0 bv1))
     :pattern ((set715 bv0 bv1)))))
(declare-fun set716 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set716 bv0) (and (= bv0 anc_1057I))) :pattern ((set716 bv0)))))
(declare-fun set717 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set717 bv0) (or (Rmem1 anc_1063I bv0) (Rmem1 anc_1056I bv0)))
     :pattern ((set717 bv0))
     :pattern ((Rmem1 anc_1063I bv0))
     :pattern ((Rmem1 anc_1056I bv0)))))
(declare-fun set718 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set718 bv0) (or (set716 bv0) (set717 bv0)))
     :pattern ((set718 bv0))
     :pattern ((set716 bv0))
     :pattern ((set717 bv0)))))
(assert (forall ((bv0 T17))
  (! (= (Rmem1 v_15 bv0) (set718 bv0))
     :pattern ((Rmem1 v_15 bv0))
     :pattern ((set718 bv0)))))
(declare-fun set719 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set719 bv0) (and (= bv0 anc_1057I))) :pattern ((set719 bv0)))))
(assert (forall ((bv0 T17))
  (! (= (Rroot3 v_15 bv0) (set719 bv0))
     :pattern ((Rroot3 v_15 bv0))
     :pattern ((set719 bv0)))))
(assert (not (forall ((bv0 T17))
       (! (= (Rmem1 v_15 bv0) (Rmem1 x_0 bv0))
          :pattern ((Rmem1 v_15 bv0))
          :pattern ((Rmem1 x_0 bv0))))))
(check-sat)

(declare-sort T18)
(declare-const v_15 T18)
(declare-const x_0 T18)
(declare-sort T19)
(declare-const B T19)
(declare-const R T19)
(declare-const t T18)
(declare-const anc_1028I T19)
(declare-const anc_1027I T18)
(declare-sort T20)
(declare-const z T20)
(declare-const d T18)
(declare-const sv_4099 T18)
(declare-const sv_4102 T19)
(declare-const anc_1026I T19)
(declare-const anc_1025I T18)
(declare-const y T20)
(declare-const c T18)
(declare-const sv_4104 T18)
(declare-const sv_4106 T19)
(declare-const anc_1024I T19)
(declare-const a T18)
(declare-const x T20)
(declare-const b T18)
(declare-const sv_4108 T18)
(declare-const sv_4110 T19)
(declare-const anc_1030I T19)
(declare-const anc_1032I T19)
(declare-const anc_1033I T18)
(declare-const anc_1034I T20)
(declare-const anc_1035I T18)
(declare-const anc_1036I T18)
(declare-const anc_1037I T20)
(declare-const anc_1039I T19)
(declare-const anc_1040I T18)
(declare-const anc_1041I T20)
(declare-const anc_1042I T18)
(declare-const anc_1043I T18)
(declare-fun Rroot3 (T18 T20) Bool)
(declare-fun Rto2 (T18 T20 T20) Bool)
(declare-fun Rmem1 (T18 T20) Bool)
(declare-fun Rtos0 (T18 T20 T20) Bool)
(assert (= t x_0))
(declare-fun set720 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set720 bv0) (and (= bv0 z))) :pattern ((set720 bv0)))))
(declare-fun set721 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set721 bv0 bv1) (and (Rmem1 anc_1027I bv0) (set720 bv1)))
     :pattern ((set721 bv0 bv1))
     :pattern ((Rmem1 anc_1027I bv0) (set720 bv1)))))
(declare-fun set722 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set722 bv0) (and (= bv0 z))) :pattern ((set722 bv0)))))
(declare-fun set723 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set723 bv0 bv1) (and (set722 bv0) (Rmem1 d bv1)))
     :pattern ((set723 bv0 bv1))
     :pattern ((set722 bv0) (Rmem1 d bv1)))))
(declare-fun set724 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set724 bv0 bv1) (and (Rmem1 anc_1027I bv0) (Rmem1 d bv1)))
     :pattern ((set724 bv0 bv1))
     :pattern ((Rmem1 anc_1027I bv0) (Rmem1 d bv1)))))
(declare-fun set725 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set725 bv0 bv1) (or (set723 bv0 bv1) (set724 bv0 bv1)))
     :pattern ((set725 bv0 bv1))
     :pattern ((set723 bv0 bv1))
     :pattern ((set724 bv0 bv1)))))
(declare-fun set726 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set726 bv0 bv1) (or (set721 bv0 bv1) (set725 bv0 bv1)))
     :pattern ((set726 bv0 bv1))
     :pattern ((set721 bv0 bv1))
     :pattern ((set725 bv0 bv1)))))
(declare-fun set727 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set727 bv0 bv1) (or (Rtos0 d bv0 bv1) (Rtos0 anc_1027I bv0 bv1)))
     :pattern ((set727 bv0 bv1))
     :pattern ((Rtos0 d bv0 bv1))
     :pattern ((Rtos0 anc_1027I bv0 bv1)))))
(declare-fun set728 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set728 bv0 bv1) (or (set726 bv0 bv1) (set727 bv0 bv1)))
     :pattern ((set728 bv0 bv1))
     :pattern ((set726 bv0 bv1))
     :pattern ((set727 bv0 bv1)))))
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (Rtos0 t bv0 bv1) (set728 bv0 bv1))
     :pattern ((Rtos0 t bv0 bv1))
     :pattern ((set728 bv0 bv1)))))
(declare-fun set729 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set729 bv0) (and (= bv0 z))) :pattern ((set729 bv0)))))
(declare-fun set730 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set730 bv0 bv1) (and (Rmem1 anc_1027I bv0) (set729 bv1)))
     :pattern ((set730 bv0 bv1))
     :pattern ((Rmem1 anc_1027I bv0) (set729 bv1)))))
(declare-fun set731 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set731 bv0) (and (= bv0 z))) :pattern ((set731 bv0)))))
(declare-fun set732 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set732 bv0 bv1) (and (set731 bv0) (Rmem1 d bv1)))
     :pattern ((set732 bv0 bv1))
     :pattern ((set731 bv0) (Rmem1 d bv1)))))
(declare-fun set733 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set733 bv0 bv1) (and (Rmem1 anc_1027I bv0) (Rmem1 d bv1)))
     :pattern ((set733 bv0 bv1))
     :pattern ((Rmem1 anc_1027I bv0) (Rmem1 d bv1)))))
(declare-fun set734 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set734 bv0 bv1) (or (set732 bv0 bv1) (set733 bv0 bv1)))
     :pattern ((set734 bv0 bv1))
     :pattern ((set732 bv0 bv1))
     :pattern ((set733 bv0 bv1)))))
(declare-fun set735 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set735 bv0 bv1) (or (set730 bv0 bv1) (set734 bv0 bv1)))
     :pattern ((set735 bv0 bv1))
     :pattern ((set730 bv0 bv1))
     :pattern ((set734 bv0 bv1)))))
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (Rto2 t bv0 bv1) (set735 bv0 bv1))
     :pattern ((Rto2 t bv0 bv1))
     :pattern ((set735 bv0 bv1)))))
(declare-fun set736 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set736 bv0) (and (= bv0 z))) :pattern ((set736 bv0)))))
(declare-fun set737 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set737 bv0) (or (Rmem1 d bv0) (Rmem1 anc_1027I bv0)))
     :pattern ((set737 bv0))
     :pattern ((Rmem1 d bv0))
     :pattern ((Rmem1 anc_1027I bv0)))))
(declare-fun set738 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set738 bv0) (or (set736 bv0) (set737 bv0)))
     :pattern ((set738 bv0))
     :pattern ((set736 bv0))
     :pattern ((set737 bv0)))))
(assert (forall ((bv0 T20))
  (! (= (Rmem1 t bv0) (set738 bv0))
     :pattern ((Rmem1 t bv0))
     :pattern ((set738 bv0)))))
(declare-fun set739 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set739 bv0) (and (= bv0 z))) :pattern ((set739 bv0)))))
(assert (forall ((bv0 T20))
  (! (= (Rroot3 t bv0) (set739 bv0))
     :pattern ((Rroot3 t bv0))
     :pattern ((set739 bv0)))))
(declare-fun set740 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set740 bv0) (and (= bv0 anc_1041I))) :pattern ((set740 bv0)))))
(declare-fun set741 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set741 bv0 bv1) (and (Rmem1 anc_1040I bv0) (set740 bv1)))
     :pattern ((set741 bv0 bv1))
     :pattern ((Rmem1 anc_1040I bv0) (set740 bv1)))))
(declare-fun set742 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set742 bv0) (and (= bv0 anc_1041I))) :pattern ((set742 bv0)))))
(declare-fun set743 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set743 bv0 bv1) (and (set742 bv0) (Rmem1 anc_1042I bv1)))
     :pattern ((set743 bv0 bv1))
     :pattern ((set742 bv0) (Rmem1 anc_1042I bv1)))))
(declare-fun set744 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set744 bv0 bv1) (and (Rmem1 anc_1040I bv0) (Rmem1 anc_1042I bv1)))
     :pattern ((set744 bv0 bv1))
     :pattern ((Rmem1 anc_1040I bv0) (Rmem1 anc_1042I bv1)))))
(declare-fun set745 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set745 bv0 bv1) (or (set743 bv0 bv1) (set744 bv0 bv1)))
     :pattern ((set745 bv0 bv1))
     :pattern ((set743 bv0 bv1))
     :pattern ((set744 bv0 bv1)))))
(declare-fun set746 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set746 bv0 bv1) (or (set741 bv0 bv1) (set745 bv0 bv1)))
     :pattern ((set746 bv0 bv1))
     :pattern ((set741 bv0 bv1))
     :pattern ((set745 bv0 bv1)))))
(declare-fun set747 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set747 bv0 bv1)
        (or (Rtos0 anc_1042I bv0 bv1) (Rtos0 anc_1040I bv0 bv1)))
     :pattern ((set747 bv0 bv1))
     :pattern ((Rtos0 anc_1042I bv0 bv1))
     :pattern ((Rtos0 anc_1040I bv0 bv1)))))
(declare-fun set748 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set748 bv0 bv1) (or (set746 bv0 bv1) (set747 bv0 bv1)))
     :pattern ((set748 bv0 bv1))
     :pattern ((set746 bv0 bv1))
     :pattern ((set747 bv0 bv1)))))
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (Rtos0 anc_1043I bv0 bv1) (set748 bv0 bv1))
     :pattern ((Rtos0 anc_1043I bv0 bv1))
     :pattern ((set748 bv0 bv1)))))
(declare-fun set749 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set749 bv0) (and (= bv0 anc_1041I))) :pattern ((set749 bv0)))))
(declare-fun set750 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set750 bv0 bv1) (and (Rmem1 anc_1040I bv0) (set749 bv1)))
     :pattern ((set750 bv0 bv1))
     :pattern ((Rmem1 anc_1040I bv0) (set749 bv1)))))
(declare-fun set751 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set751 bv0) (and (= bv0 anc_1041I))) :pattern ((set751 bv0)))))
(declare-fun set752 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set752 bv0 bv1) (and (set751 bv0) (Rmem1 anc_1042I bv1)))
     :pattern ((set752 bv0 bv1))
     :pattern ((set751 bv0) (Rmem1 anc_1042I bv1)))))
(declare-fun set753 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set753 bv0 bv1) (and (Rmem1 anc_1040I bv0) (Rmem1 anc_1042I bv1)))
     :pattern ((set753 bv0 bv1))
     :pattern ((Rmem1 anc_1040I bv0) (Rmem1 anc_1042I bv1)))))
(declare-fun set754 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set754 bv0 bv1) (or (set752 bv0 bv1) (set753 bv0 bv1)))
     :pattern ((set754 bv0 bv1))
     :pattern ((set752 bv0 bv1))
     :pattern ((set753 bv0 bv1)))))
(declare-fun set755 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set755 bv0 bv1) (or (set750 bv0 bv1) (set754 bv0 bv1)))
     :pattern ((set755 bv0 bv1))
     :pattern ((set750 bv0 bv1))
     :pattern ((set754 bv0 bv1)))))
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (Rto2 anc_1043I bv0 bv1) (set755 bv0 bv1))
     :pattern ((Rto2 anc_1043I bv0 bv1))
     :pattern ((set755 bv0 bv1)))))
(declare-fun set756 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set756 bv0) (and (= bv0 anc_1041I))) :pattern ((set756 bv0)))))
(declare-fun set757 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set757 bv0) (or (Rmem1 anc_1042I bv0) (Rmem1 anc_1040I bv0)))
     :pattern ((set757 bv0))
     :pattern ((Rmem1 anc_1042I bv0))
     :pattern ((Rmem1 anc_1040I bv0)))))
(declare-fun set758 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set758 bv0) (or (set756 bv0) (set757 bv0)))
     :pattern ((set758 bv0))
     :pattern ((set756 bv0))
     :pattern ((set757 bv0)))))
(assert (forall ((bv0 T20))
  (! (= (Rmem1 anc_1043I bv0) (set758 bv0))
     :pattern ((Rmem1 anc_1043I bv0))
     :pattern ((set758 bv0)))))
(declare-fun set759 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set759 bv0) (and (= bv0 anc_1041I))) :pattern ((set759 bv0)))))
(assert (forall ((bv0 T20))
  (! (= (Rroot3 anc_1043I bv0) (set759 bv0))
     :pattern ((Rroot3 anc_1043I bv0))
     :pattern ((set759 bv0)))))
(assert (= anc_1042I d))
(assert (= anc_1041I z))
(assert (= anc_1040I c))
(assert (= anc_1039I B))
(assert (= anc_1037I y))
(declare-fun set760 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set760 bv0) (and (= bv0 anc_1034I))) :pattern ((set760 bv0)))))
(declare-fun set761 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set761 bv0 bv1) (and (Rmem1 anc_1033I bv0) (set760 bv1)))
     :pattern ((set761 bv0 bv1))
     :pattern ((Rmem1 anc_1033I bv0) (set760 bv1)))))
(declare-fun set762 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set762 bv0) (and (= bv0 anc_1034I))) :pattern ((set762 bv0)))))
(declare-fun set763 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set763 bv0 bv1) (and (set762 bv0) (Rmem1 anc_1035I bv1)))
     :pattern ((set763 bv0 bv1))
     :pattern ((set762 bv0) (Rmem1 anc_1035I bv1)))))
(declare-fun set764 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set764 bv0 bv1) (and (Rmem1 anc_1033I bv0) (Rmem1 anc_1035I bv1)))
     :pattern ((set764 bv0 bv1))
     :pattern ((Rmem1 anc_1033I bv0) (Rmem1 anc_1035I bv1)))))
(declare-fun set765 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set765 bv0 bv1) (or (set763 bv0 bv1) (set764 bv0 bv1)))
     :pattern ((set765 bv0 bv1))
     :pattern ((set763 bv0 bv1))
     :pattern ((set764 bv0 bv1)))))
(declare-fun set766 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set766 bv0 bv1) (or (set761 bv0 bv1) (set765 bv0 bv1)))
     :pattern ((set766 bv0 bv1))
     :pattern ((set761 bv0 bv1))
     :pattern ((set765 bv0 bv1)))))
(declare-fun set767 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set767 bv0 bv1)
        (or (Rtos0 anc_1035I bv0 bv1) (Rtos0 anc_1033I bv0 bv1)))
     :pattern ((set767 bv0 bv1))
     :pattern ((Rtos0 anc_1035I bv0 bv1))
     :pattern ((Rtos0 anc_1033I bv0 bv1)))))
(declare-fun set768 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set768 bv0 bv1) (or (set766 bv0 bv1) (set767 bv0 bv1)))
     :pattern ((set768 bv0 bv1))
     :pattern ((set766 bv0 bv1))
     :pattern ((set767 bv0 bv1)))))
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (Rtos0 anc_1036I bv0 bv1) (set768 bv0 bv1))
     :pattern ((Rtos0 anc_1036I bv0 bv1))
     :pattern ((set768 bv0 bv1)))))
(declare-fun set769 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set769 bv0) (and (= bv0 anc_1034I))) :pattern ((set769 bv0)))))
(declare-fun set770 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set770 bv0 bv1) (and (Rmem1 anc_1033I bv0) (set769 bv1)))
     :pattern ((set770 bv0 bv1))
     :pattern ((Rmem1 anc_1033I bv0) (set769 bv1)))))
(declare-fun set771 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set771 bv0) (and (= bv0 anc_1034I))) :pattern ((set771 bv0)))))
(declare-fun set772 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set772 bv0 bv1) (and (set771 bv0) (Rmem1 anc_1035I bv1)))
     :pattern ((set772 bv0 bv1))
     :pattern ((set771 bv0) (Rmem1 anc_1035I bv1)))))
(declare-fun set773 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set773 bv0 bv1) (and (Rmem1 anc_1033I bv0) (Rmem1 anc_1035I bv1)))
     :pattern ((set773 bv0 bv1))
     :pattern ((Rmem1 anc_1033I bv0) (Rmem1 anc_1035I bv1)))))
(declare-fun set774 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set774 bv0 bv1) (or (set772 bv0 bv1) (set773 bv0 bv1)))
     :pattern ((set774 bv0 bv1))
     :pattern ((set772 bv0 bv1))
     :pattern ((set773 bv0 bv1)))))
(declare-fun set775 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set775 bv0 bv1) (or (set770 bv0 bv1) (set774 bv0 bv1)))
     :pattern ((set775 bv0 bv1))
     :pattern ((set770 bv0 bv1))
     :pattern ((set774 bv0 bv1)))))
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (Rto2 anc_1036I bv0 bv1) (set775 bv0 bv1))
     :pattern ((Rto2 anc_1036I bv0 bv1))
     :pattern ((set775 bv0 bv1)))))
(declare-fun set776 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set776 bv0) (and (= bv0 anc_1034I))) :pattern ((set776 bv0)))))
(declare-fun set777 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set777 bv0) (or (Rmem1 anc_1035I bv0) (Rmem1 anc_1033I bv0)))
     :pattern ((set777 bv0))
     :pattern ((Rmem1 anc_1035I bv0))
     :pattern ((Rmem1 anc_1033I bv0)))))
(declare-fun set778 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set778 bv0) (or (set776 bv0) (set777 bv0)))
     :pattern ((set778 bv0))
     :pattern ((set776 bv0))
     :pattern ((set777 bv0)))))
(assert (forall ((bv0 T20))
  (! (= (Rmem1 anc_1036I bv0) (set778 bv0))
     :pattern ((Rmem1 anc_1036I bv0))
     :pattern ((set778 bv0)))))
(declare-fun set779 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set779 bv0) (and (= bv0 anc_1034I))) :pattern ((set779 bv0)))))
(assert (forall ((bv0 T20))
  (! (= (Rroot3 anc_1036I bv0) (set779 bv0))
     :pattern ((Rroot3 anc_1036I bv0))
     :pattern ((set779 bv0)))))
(assert (= anc_1035I b))
(assert (= anc_1034I x))
(assert (= anc_1033I a))
(assert (= anc_1032I B))
(assert (= anc_1030I R))
(declare-fun set780 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set780 bv0) (and (= bv0 x))) :pattern ((set780 bv0)))))
(declare-fun set781 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set781 bv0 bv1) (and (Rmem1 a bv0) (set780 bv1)))
     :pattern ((set781 bv0 bv1))
     :pattern ((Rmem1 a bv0) (set780 bv1)))))
(declare-fun set782 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set782 bv0) (and (= bv0 x))) :pattern ((set782 bv0)))))
(declare-fun set783 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set783 bv0 bv1) (and (set782 bv0) (Rmem1 b bv1)))
     :pattern ((set783 bv0 bv1))
     :pattern ((set782 bv0) (Rmem1 b bv1)))))
(declare-fun set784 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set784 bv0 bv1) (and (Rmem1 a bv0) (Rmem1 b bv1)))
     :pattern ((set784 bv0 bv1))
     :pattern ((Rmem1 a bv0) (Rmem1 b bv1)))))
(declare-fun set785 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set785 bv0 bv1) (or (set783 bv0 bv1) (set784 bv0 bv1)))
     :pattern ((set785 bv0 bv1))
     :pattern ((set783 bv0 bv1))
     :pattern ((set784 bv0 bv1)))))
(declare-fun set786 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set786 bv0 bv1) (or (set781 bv0 bv1) (set785 bv0 bv1)))
     :pattern ((set786 bv0 bv1))
     :pattern ((set781 bv0 bv1))
     :pattern ((set785 bv0 bv1)))))
(declare-fun set787 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set787 bv0 bv1) (or (Rtos0 b bv0 bv1) (Rtos0 a bv0 bv1)))
     :pattern ((set787 bv0 bv1))
     :pattern ((Rtos0 b bv0 bv1))
     :pattern ((Rtos0 a bv0 bv1)))))
(declare-fun set788 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set788 bv0 bv1) (or (set786 bv0 bv1) (set787 bv0 bv1)))
     :pattern ((set788 bv0 bv1))
     :pattern ((set786 bv0 bv1))
     :pattern ((set787 bv0 bv1)))))
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (Rtos0 anc_1025I bv0 bv1) (set788 bv0 bv1))
     :pattern ((Rtos0 anc_1025I bv0 bv1))
     :pattern ((set788 bv0 bv1)))))
(declare-fun set789 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set789 bv0) (and (= bv0 x))) :pattern ((set789 bv0)))))
(declare-fun set790 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set790 bv0 bv1) (and (Rmem1 a bv0) (set789 bv1)))
     :pattern ((set790 bv0 bv1))
     :pattern ((Rmem1 a bv0) (set789 bv1)))))
(declare-fun set791 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set791 bv0) (and (= bv0 x))) :pattern ((set791 bv0)))))
(declare-fun set792 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set792 bv0 bv1) (and (set791 bv0) (Rmem1 b bv1)))
     :pattern ((set792 bv0 bv1))
     :pattern ((set791 bv0) (Rmem1 b bv1)))))
(declare-fun set793 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set793 bv0 bv1) (and (Rmem1 a bv0) (Rmem1 b bv1)))
     :pattern ((set793 bv0 bv1))
     :pattern ((Rmem1 a bv0) (Rmem1 b bv1)))))
(declare-fun set794 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set794 bv0 bv1) (or (set792 bv0 bv1) (set793 bv0 bv1)))
     :pattern ((set794 bv0 bv1))
     :pattern ((set792 bv0 bv1))
     :pattern ((set793 bv0 bv1)))))
(declare-fun set795 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set795 bv0 bv1) (or (set790 bv0 bv1) (set794 bv0 bv1)))
     :pattern ((set795 bv0 bv1))
     :pattern ((set790 bv0 bv1))
     :pattern ((set794 bv0 bv1)))))
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (Rto2 anc_1025I bv0 bv1) (set795 bv0 bv1))
     :pattern ((Rto2 anc_1025I bv0 bv1))
     :pattern ((set795 bv0 bv1)))))
(declare-fun set796 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set796 bv0) (and (= bv0 x))) :pattern ((set796 bv0)))))
(declare-fun set797 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set797 bv0) (or (Rmem1 b bv0) (Rmem1 a bv0)))
     :pattern ((set797 bv0))
     :pattern ((Rmem1 b bv0))
     :pattern ((Rmem1 a bv0)))))
(declare-fun set798 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set798 bv0) (or (set796 bv0) (set797 bv0)))
     :pattern ((set798 bv0))
     :pattern ((set796 bv0))
     :pattern ((set797 bv0)))))
(assert (forall ((bv0 T20))
  (! (= (Rmem1 anc_1025I bv0) (set798 bv0))
     :pattern ((Rmem1 anc_1025I bv0))
     :pattern ((set798 bv0)))))
(declare-fun set799 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set799 bv0) (and (= bv0 x))) :pattern ((set799 bv0)))))
(assert (forall ((bv0 T20))
  (! (= (Rroot3 anc_1025I bv0) (set799 bv0))
     :pattern ((Rroot3 anc_1025I bv0))
     :pattern ((set799 bv0)))))
(declare-fun set800 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set800 bv0) (and (= bv0 y))) :pattern ((set800 bv0)))))
(declare-fun set801 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set801 bv0 bv1) (and (Rmem1 anc_1025I bv0) (set800 bv1)))
     :pattern ((set801 bv0 bv1))
     :pattern ((Rmem1 anc_1025I bv0) (set800 bv1)))))
(declare-fun set802 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set802 bv0) (and (= bv0 y))) :pattern ((set802 bv0)))))
(declare-fun set803 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set803 bv0 bv1) (and (set802 bv0) (Rmem1 c bv1)))
     :pattern ((set803 bv0 bv1))
     :pattern ((set802 bv0) (Rmem1 c bv1)))))
(declare-fun set804 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set804 bv0 bv1) (and (Rmem1 anc_1025I bv0) (Rmem1 c bv1)))
     :pattern ((set804 bv0 bv1))
     :pattern ((Rmem1 anc_1025I bv0) (Rmem1 c bv1)))))
(declare-fun set805 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set805 bv0 bv1) (or (set803 bv0 bv1) (set804 bv0 bv1)))
     :pattern ((set805 bv0 bv1))
     :pattern ((set803 bv0 bv1))
     :pattern ((set804 bv0 bv1)))))
(declare-fun set806 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set806 bv0 bv1) (or (set801 bv0 bv1) (set805 bv0 bv1)))
     :pattern ((set806 bv0 bv1))
     :pattern ((set801 bv0 bv1))
     :pattern ((set805 bv0 bv1)))))
(declare-fun set807 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set807 bv0 bv1) (or (Rtos0 c bv0 bv1) (Rtos0 anc_1025I bv0 bv1)))
     :pattern ((set807 bv0 bv1))
     :pattern ((Rtos0 c bv0 bv1))
     :pattern ((Rtos0 anc_1025I bv0 bv1)))))
(declare-fun set808 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set808 bv0 bv1) (or (set806 bv0 bv1) (set807 bv0 bv1)))
     :pattern ((set808 bv0 bv1))
     :pattern ((set806 bv0 bv1))
     :pattern ((set807 bv0 bv1)))))
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (Rtos0 anc_1027I bv0 bv1) (set808 bv0 bv1))
     :pattern ((Rtos0 anc_1027I bv0 bv1))
     :pattern ((set808 bv0 bv1)))))
(declare-fun set809 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set809 bv0) (and (= bv0 y))) :pattern ((set809 bv0)))))
(declare-fun set810 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set810 bv0 bv1) (and (Rmem1 anc_1025I bv0) (set809 bv1)))
     :pattern ((set810 bv0 bv1))
     :pattern ((Rmem1 anc_1025I bv0) (set809 bv1)))))
(declare-fun set811 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set811 bv0) (and (= bv0 y))) :pattern ((set811 bv0)))))
(declare-fun set812 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set812 bv0 bv1) (and (set811 bv0) (Rmem1 c bv1)))
     :pattern ((set812 bv0 bv1))
     :pattern ((set811 bv0) (Rmem1 c bv1)))))
(declare-fun set813 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set813 bv0 bv1) (and (Rmem1 anc_1025I bv0) (Rmem1 c bv1)))
     :pattern ((set813 bv0 bv1))
     :pattern ((Rmem1 anc_1025I bv0) (Rmem1 c bv1)))))
(declare-fun set814 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set814 bv0 bv1) (or (set812 bv0 bv1) (set813 bv0 bv1)))
     :pattern ((set814 bv0 bv1))
     :pattern ((set812 bv0 bv1))
     :pattern ((set813 bv0 bv1)))))
(declare-fun set815 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set815 bv0 bv1) (or (set810 bv0 bv1) (set814 bv0 bv1)))
     :pattern ((set815 bv0 bv1))
     :pattern ((set810 bv0 bv1))
     :pattern ((set814 bv0 bv1)))))
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (Rto2 anc_1027I bv0 bv1) (set815 bv0 bv1))
     :pattern ((Rto2 anc_1027I bv0 bv1))
     :pattern ((set815 bv0 bv1)))))
(declare-fun set816 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set816 bv0) (and (= bv0 y))) :pattern ((set816 bv0)))))
(declare-fun set817 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set817 bv0) (or (Rmem1 c bv0) (Rmem1 anc_1025I bv0)))
     :pattern ((set817 bv0))
     :pattern ((Rmem1 c bv0))
     :pattern ((Rmem1 anc_1025I bv0)))))
(declare-fun set818 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set818 bv0) (or (set816 bv0) (set817 bv0)))
     :pattern ((set818 bv0))
     :pattern ((set816 bv0))
     :pattern ((set817 bv0)))))
(assert (forall ((bv0 T20))
  (! (= (Rmem1 anc_1027I bv0) (set818 bv0))
     :pattern ((Rmem1 anc_1027I bv0))
     :pattern ((set818 bv0)))))
(declare-fun set819 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set819 bv0) (and (= bv0 y))) :pattern ((set819 bv0)))))
(assert (forall ((bv0 T20))
  (! (= (Rroot3 anc_1027I bv0) (set819 bv0))
     :pattern ((Rroot3 anc_1027I bv0))
     :pattern ((set819 bv0)))))
(declare-fun set820 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set820 bv0) (and (= bv0 anc_1037I))) :pattern ((set820 bv0)))))
(declare-fun set821 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set821 bv0 bv1) (and (Rmem1 anc_1036I bv0) (set820 bv1)))
     :pattern ((set821 bv0 bv1))
     :pattern ((Rmem1 anc_1036I bv0) (set820 bv1)))))
(declare-fun set822 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set822 bv0) (and (= bv0 anc_1037I))) :pattern ((set822 bv0)))))
(declare-fun set823 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set823 bv0 bv1) (and (set822 bv0) (Rmem1 anc_1043I bv1)))
     :pattern ((set823 bv0 bv1))
     :pattern ((set822 bv0) (Rmem1 anc_1043I bv1)))))
(declare-fun set824 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set824 bv0 bv1) (and (Rmem1 anc_1036I bv0) (Rmem1 anc_1043I bv1)))
     :pattern ((set824 bv0 bv1))
     :pattern ((Rmem1 anc_1036I bv0) (Rmem1 anc_1043I bv1)))))
(declare-fun set825 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set825 bv0 bv1) (or (set823 bv0 bv1) (set824 bv0 bv1)))
     :pattern ((set825 bv0 bv1))
     :pattern ((set823 bv0 bv1))
     :pattern ((set824 bv0 bv1)))))
(declare-fun set826 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set826 bv0 bv1) (or (set821 bv0 bv1) (set825 bv0 bv1)))
     :pattern ((set826 bv0 bv1))
     :pattern ((set821 bv0 bv1))
     :pattern ((set825 bv0 bv1)))))
(declare-fun set827 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set827 bv0 bv1)
        (or (Rtos0 anc_1043I bv0 bv1) (Rtos0 anc_1036I bv0 bv1)))
     :pattern ((set827 bv0 bv1))
     :pattern ((Rtos0 anc_1043I bv0 bv1))
     :pattern ((Rtos0 anc_1036I bv0 bv1)))))
(declare-fun set828 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set828 bv0 bv1) (or (set826 bv0 bv1) (set827 bv0 bv1)))
     :pattern ((set828 bv0 bv1))
     :pattern ((set826 bv0 bv1))
     :pattern ((set827 bv0 bv1)))))
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (Rtos0 v_15 bv0 bv1) (set828 bv0 bv1))
     :pattern ((Rtos0 v_15 bv0 bv1))
     :pattern ((set828 bv0 bv1)))))
(declare-fun set829 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set829 bv0) (and (= bv0 anc_1037I))) :pattern ((set829 bv0)))))
(declare-fun set830 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set830 bv0 bv1) (and (Rmem1 anc_1036I bv0) (set829 bv1)))
     :pattern ((set830 bv0 bv1))
     :pattern ((Rmem1 anc_1036I bv0) (set829 bv1)))))
(declare-fun set831 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set831 bv0) (and (= bv0 anc_1037I))) :pattern ((set831 bv0)))))
(declare-fun set832 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set832 bv0 bv1) (and (set831 bv0) (Rmem1 anc_1043I bv1)))
     :pattern ((set832 bv0 bv1))
     :pattern ((set831 bv0) (Rmem1 anc_1043I bv1)))))
(declare-fun set833 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set833 bv0 bv1) (and (Rmem1 anc_1036I bv0) (Rmem1 anc_1043I bv1)))
     :pattern ((set833 bv0 bv1))
     :pattern ((Rmem1 anc_1036I bv0) (Rmem1 anc_1043I bv1)))))
(declare-fun set834 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set834 bv0 bv1) (or (set832 bv0 bv1) (set833 bv0 bv1)))
     :pattern ((set834 bv0 bv1))
     :pattern ((set832 bv0 bv1))
     :pattern ((set833 bv0 bv1)))))
(declare-fun set835 (T20 T20) Bool)
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (set835 bv0 bv1) (or (set830 bv0 bv1) (set834 bv0 bv1)))
     :pattern ((set835 bv0 bv1))
     :pattern ((set830 bv0 bv1))
     :pattern ((set834 bv0 bv1)))))
(assert (forall ((bv1 T20) (bv0 T20))
  (! (= (Rto2 v_15 bv0 bv1) (set835 bv0 bv1))
     :pattern ((Rto2 v_15 bv0 bv1))
     :pattern ((set835 bv0 bv1)))))
(declare-fun set836 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set836 bv0) (and (= bv0 anc_1037I))) :pattern ((set836 bv0)))))
(declare-fun set837 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set837 bv0) (or (Rmem1 anc_1043I bv0) (Rmem1 anc_1036I bv0)))
     :pattern ((set837 bv0))
     :pattern ((Rmem1 anc_1043I bv0))
     :pattern ((Rmem1 anc_1036I bv0)))))
(declare-fun set838 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set838 bv0) (or (set836 bv0) (set837 bv0)))
     :pattern ((set838 bv0))
     :pattern ((set836 bv0))
     :pattern ((set837 bv0)))))
(assert (forall ((bv0 T20))
  (! (= (Rmem1 v_15 bv0) (set838 bv0))
     :pattern ((Rmem1 v_15 bv0))
     :pattern ((set838 bv0)))))
(declare-fun set839 (T20) Bool)
(assert (forall ((bv0 T20))
  (! (= (set839 bv0) (and (= bv0 anc_1037I))) :pattern ((set839 bv0)))))
(assert (forall ((bv0 T20))
  (! (= (Rroot3 v_15 bv0) (set839 bv0))
     :pattern ((Rroot3 v_15 bv0))
     :pattern ((set839 bv0)))))
(assert (not (forall ((bv1 T20) (bv0 T20))
       (! (= (Rtos0 v_15 bv0 bv1) (Rtos0 x_0 bv0 bv1))
          :pattern ((Rtos0 v_15 bv0 bv1))
          :pattern ((Rtos0 x_0 bv0 bv1))))))
(check-sat)

(declare-sort T21)
(declare-const v_15 T21)
(declare-const x_0 T21)
(declare-sort T22)
(declare-const B T22)
(declare-const R T22)
(declare-const t T21)
(declare-const anc_1028I T22)
(declare-const anc_1027I T21)
(declare-sort T23)
(declare-const z T23)
(declare-const d T21)
(declare-const sv_4099 T21)
(declare-const sv_4102 T22)
(declare-const anc_1026I T22)
(declare-const anc_1025I T21)
(declare-const y T23)
(declare-const c T21)
(declare-const sv_4104 T21)
(declare-const sv_4106 T22)
(declare-const anc_1024I T22)
(declare-const a T21)
(declare-const x T23)
(declare-const b T21)
(declare-const sv_4108 T21)
(declare-const sv_4110 T22)
(declare-const anc_1030I T22)
(declare-const anc_1032I T22)
(declare-const anc_1033I T21)
(declare-const anc_1034I T23)
(declare-const anc_1035I T21)
(declare-const anc_1036I T21)
(declare-const anc_1037I T23)
(declare-const anc_1039I T22)
(declare-const anc_1040I T21)
(declare-const anc_1041I T23)
(declare-const anc_1042I T21)
(declare-const anc_1043I T21)
(declare-fun Rroot3 (T21 T23) Bool)
(declare-fun Rto2 (T21 T23 T23) Bool)
(declare-fun Rmem1 (T21 T23) Bool)
(declare-fun Rtos0 (T21 T23 T23) Bool)
(assert (= t x_0))
(declare-fun set840 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set840 bv0) (and (= bv0 z))) :pattern ((set840 bv0)))))
(declare-fun set841 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set841 bv0 bv1) (and (Rmem1 anc_1027I bv0) (set840 bv1)))
     :pattern ((set841 bv0 bv1))
     :pattern ((Rmem1 anc_1027I bv0) (set840 bv1)))))
(declare-fun set842 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set842 bv0) (and (= bv0 z))) :pattern ((set842 bv0)))))
(declare-fun set843 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set843 bv0 bv1) (and (set842 bv0) (Rmem1 d bv1)))
     :pattern ((set843 bv0 bv1))
     :pattern ((set842 bv0) (Rmem1 d bv1)))))
(declare-fun set844 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set844 bv0 bv1) (and (Rmem1 anc_1027I bv0) (Rmem1 d bv1)))
     :pattern ((set844 bv0 bv1))
     :pattern ((Rmem1 anc_1027I bv0) (Rmem1 d bv1)))))
(declare-fun set845 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set845 bv0 bv1) (or (set843 bv0 bv1) (set844 bv0 bv1)))
     :pattern ((set845 bv0 bv1))
     :pattern ((set843 bv0 bv1))
     :pattern ((set844 bv0 bv1)))))
(declare-fun set846 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set846 bv0 bv1) (or (set841 bv0 bv1) (set845 bv0 bv1)))
     :pattern ((set846 bv0 bv1))
     :pattern ((set841 bv0 bv1))
     :pattern ((set845 bv0 bv1)))))
(declare-fun set847 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set847 bv0 bv1) (or (Rtos0 d bv0 bv1) (Rtos0 anc_1027I bv0 bv1)))
     :pattern ((set847 bv0 bv1))
     :pattern ((Rtos0 d bv0 bv1))
     :pattern ((Rtos0 anc_1027I bv0 bv1)))))
(declare-fun set848 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set848 bv0 bv1) (or (set846 bv0 bv1) (set847 bv0 bv1)))
     :pattern ((set848 bv0 bv1))
     :pattern ((set846 bv0 bv1))
     :pattern ((set847 bv0 bv1)))))
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (Rtos0 t bv0 bv1) (set848 bv0 bv1))
     :pattern ((Rtos0 t bv0 bv1))
     :pattern ((set848 bv0 bv1)))))
(declare-fun set849 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set849 bv0) (and (= bv0 z))) :pattern ((set849 bv0)))))
(declare-fun set850 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set850 bv0 bv1) (and (Rmem1 anc_1027I bv0) (set849 bv1)))
     :pattern ((set850 bv0 bv1))
     :pattern ((Rmem1 anc_1027I bv0) (set849 bv1)))))
(declare-fun set851 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set851 bv0) (and (= bv0 z))) :pattern ((set851 bv0)))))
(declare-fun set852 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set852 bv0 bv1) (and (set851 bv0) (Rmem1 d bv1)))
     :pattern ((set852 bv0 bv1))
     :pattern ((set851 bv0) (Rmem1 d bv1)))))
(declare-fun set853 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set853 bv0 bv1) (and (Rmem1 anc_1027I bv0) (Rmem1 d bv1)))
     :pattern ((set853 bv0 bv1))
     :pattern ((Rmem1 anc_1027I bv0) (Rmem1 d bv1)))))
(declare-fun set854 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set854 bv0 bv1) (or (set852 bv0 bv1) (set853 bv0 bv1)))
     :pattern ((set854 bv0 bv1))
     :pattern ((set852 bv0 bv1))
     :pattern ((set853 bv0 bv1)))))
(declare-fun set855 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set855 bv0 bv1) (or (set850 bv0 bv1) (set854 bv0 bv1)))
     :pattern ((set855 bv0 bv1))
     :pattern ((set850 bv0 bv1))
     :pattern ((set854 bv0 bv1)))))
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (Rto2 t bv0 bv1) (set855 bv0 bv1))
     :pattern ((Rto2 t bv0 bv1))
     :pattern ((set855 bv0 bv1)))))
(declare-fun set856 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set856 bv0) (and (= bv0 z))) :pattern ((set856 bv0)))))
(declare-fun set857 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set857 bv0) (or (Rmem1 d bv0) (Rmem1 anc_1027I bv0)))
     :pattern ((set857 bv0))
     :pattern ((Rmem1 d bv0))
     :pattern ((Rmem1 anc_1027I bv0)))))
(declare-fun set858 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set858 bv0) (or (set856 bv0) (set857 bv0)))
     :pattern ((set858 bv0))
     :pattern ((set856 bv0))
     :pattern ((set857 bv0)))))
(assert (forall ((bv0 T23))
  (! (= (Rmem1 t bv0) (set858 bv0))
     :pattern ((Rmem1 t bv0))
     :pattern ((set858 bv0)))))
(declare-fun set859 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set859 bv0) (and (= bv0 z))) :pattern ((set859 bv0)))))
(assert (forall ((bv0 T23))
  (! (= (Rroot3 t bv0) (set859 bv0))
     :pattern ((Rroot3 t bv0))
     :pattern ((set859 bv0)))))
(declare-fun set860 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set860 bv0) (and (= bv0 anc_1041I))) :pattern ((set860 bv0)))))
(declare-fun set861 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set861 bv0 bv1) (and (Rmem1 anc_1040I bv0) (set860 bv1)))
     :pattern ((set861 bv0 bv1))
     :pattern ((Rmem1 anc_1040I bv0) (set860 bv1)))))
(declare-fun set862 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set862 bv0) (and (= bv0 anc_1041I))) :pattern ((set862 bv0)))))
(declare-fun set863 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set863 bv0 bv1) (and (set862 bv0) (Rmem1 anc_1042I bv1)))
     :pattern ((set863 bv0 bv1))
     :pattern ((set862 bv0) (Rmem1 anc_1042I bv1)))))
(declare-fun set864 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set864 bv0 bv1) (and (Rmem1 anc_1040I bv0) (Rmem1 anc_1042I bv1)))
     :pattern ((set864 bv0 bv1))
     :pattern ((Rmem1 anc_1040I bv0) (Rmem1 anc_1042I bv1)))))
(declare-fun set865 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set865 bv0 bv1) (or (set863 bv0 bv1) (set864 bv0 bv1)))
     :pattern ((set865 bv0 bv1))
     :pattern ((set863 bv0 bv1))
     :pattern ((set864 bv0 bv1)))))
(declare-fun set866 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set866 bv0 bv1) (or (set861 bv0 bv1) (set865 bv0 bv1)))
     :pattern ((set866 bv0 bv1))
     :pattern ((set861 bv0 bv1))
     :pattern ((set865 bv0 bv1)))))
(declare-fun set867 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set867 bv0 bv1)
        (or (Rtos0 anc_1042I bv0 bv1) (Rtos0 anc_1040I bv0 bv1)))
     :pattern ((set867 bv0 bv1))
     :pattern ((Rtos0 anc_1042I bv0 bv1))
     :pattern ((Rtos0 anc_1040I bv0 bv1)))))
(declare-fun set868 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set868 bv0 bv1) (or (set866 bv0 bv1) (set867 bv0 bv1)))
     :pattern ((set868 bv0 bv1))
     :pattern ((set866 bv0 bv1))
     :pattern ((set867 bv0 bv1)))))
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (Rtos0 anc_1043I bv0 bv1) (set868 bv0 bv1))
     :pattern ((Rtos0 anc_1043I bv0 bv1))
     :pattern ((set868 bv0 bv1)))))
(declare-fun set869 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set869 bv0) (and (= bv0 anc_1041I))) :pattern ((set869 bv0)))))
(declare-fun set870 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set870 bv0 bv1) (and (Rmem1 anc_1040I bv0) (set869 bv1)))
     :pattern ((set870 bv0 bv1))
     :pattern ((Rmem1 anc_1040I bv0) (set869 bv1)))))
(declare-fun set871 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set871 bv0) (and (= bv0 anc_1041I))) :pattern ((set871 bv0)))))
(declare-fun set872 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set872 bv0 bv1) (and (set871 bv0) (Rmem1 anc_1042I bv1)))
     :pattern ((set872 bv0 bv1))
     :pattern ((set871 bv0) (Rmem1 anc_1042I bv1)))))
(declare-fun set873 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set873 bv0 bv1) (and (Rmem1 anc_1040I bv0) (Rmem1 anc_1042I bv1)))
     :pattern ((set873 bv0 bv1))
     :pattern ((Rmem1 anc_1040I bv0) (Rmem1 anc_1042I bv1)))))
(declare-fun set874 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set874 bv0 bv1) (or (set872 bv0 bv1) (set873 bv0 bv1)))
     :pattern ((set874 bv0 bv1))
     :pattern ((set872 bv0 bv1))
     :pattern ((set873 bv0 bv1)))))
(declare-fun set875 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set875 bv0 bv1) (or (set870 bv0 bv1) (set874 bv0 bv1)))
     :pattern ((set875 bv0 bv1))
     :pattern ((set870 bv0 bv1))
     :pattern ((set874 bv0 bv1)))))
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (Rto2 anc_1043I bv0 bv1) (set875 bv0 bv1))
     :pattern ((Rto2 anc_1043I bv0 bv1))
     :pattern ((set875 bv0 bv1)))))
(declare-fun set876 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set876 bv0) (and (= bv0 anc_1041I))) :pattern ((set876 bv0)))))
(declare-fun set877 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set877 bv0) (or (Rmem1 anc_1042I bv0) (Rmem1 anc_1040I bv0)))
     :pattern ((set877 bv0))
     :pattern ((Rmem1 anc_1042I bv0))
     :pattern ((Rmem1 anc_1040I bv0)))))
(declare-fun set878 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set878 bv0) (or (set876 bv0) (set877 bv0)))
     :pattern ((set878 bv0))
     :pattern ((set876 bv0))
     :pattern ((set877 bv0)))))
(assert (forall ((bv0 T23))
  (! (= (Rmem1 anc_1043I bv0) (set878 bv0))
     :pattern ((Rmem1 anc_1043I bv0))
     :pattern ((set878 bv0)))))
(declare-fun set879 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set879 bv0) (and (= bv0 anc_1041I))) :pattern ((set879 bv0)))))
(assert (forall ((bv0 T23))
  (! (= (Rroot3 anc_1043I bv0) (set879 bv0))
     :pattern ((Rroot3 anc_1043I bv0))
     :pattern ((set879 bv0)))))
(assert (= anc_1042I d))
(assert (= anc_1041I z))
(assert (= anc_1040I c))
(assert (= anc_1039I B))
(assert (= anc_1037I y))
(declare-fun set880 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set880 bv0) (and (= bv0 anc_1034I))) :pattern ((set880 bv0)))))
(declare-fun set881 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set881 bv0 bv1) (and (Rmem1 anc_1033I bv0) (set880 bv1)))
     :pattern ((set881 bv0 bv1))
     :pattern ((Rmem1 anc_1033I bv0) (set880 bv1)))))
(declare-fun set882 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set882 bv0) (and (= bv0 anc_1034I))) :pattern ((set882 bv0)))))
(declare-fun set883 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set883 bv0 bv1) (and (set882 bv0) (Rmem1 anc_1035I bv1)))
     :pattern ((set883 bv0 bv1))
     :pattern ((set882 bv0) (Rmem1 anc_1035I bv1)))))
(declare-fun set884 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set884 bv0 bv1) (and (Rmem1 anc_1033I bv0) (Rmem1 anc_1035I bv1)))
     :pattern ((set884 bv0 bv1))
     :pattern ((Rmem1 anc_1033I bv0) (Rmem1 anc_1035I bv1)))))
(declare-fun set885 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set885 bv0 bv1) (or (set883 bv0 bv1) (set884 bv0 bv1)))
     :pattern ((set885 bv0 bv1))
     :pattern ((set883 bv0 bv1))
     :pattern ((set884 bv0 bv1)))))
(declare-fun set886 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set886 bv0 bv1) (or (set881 bv0 bv1) (set885 bv0 bv1)))
     :pattern ((set886 bv0 bv1))
     :pattern ((set881 bv0 bv1))
     :pattern ((set885 bv0 bv1)))))
(declare-fun set887 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set887 bv0 bv1)
        (or (Rtos0 anc_1035I bv0 bv1) (Rtos0 anc_1033I bv0 bv1)))
     :pattern ((set887 bv0 bv1))
     :pattern ((Rtos0 anc_1035I bv0 bv1))
     :pattern ((Rtos0 anc_1033I bv0 bv1)))))
(declare-fun set888 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set888 bv0 bv1) (or (set886 bv0 bv1) (set887 bv0 bv1)))
     :pattern ((set888 bv0 bv1))
     :pattern ((set886 bv0 bv1))
     :pattern ((set887 bv0 bv1)))))
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (Rtos0 anc_1036I bv0 bv1) (set888 bv0 bv1))
     :pattern ((Rtos0 anc_1036I bv0 bv1))
     :pattern ((set888 bv0 bv1)))))
(declare-fun set889 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set889 bv0) (and (= bv0 anc_1034I))) :pattern ((set889 bv0)))))
(declare-fun set890 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set890 bv0 bv1) (and (Rmem1 anc_1033I bv0) (set889 bv1)))
     :pattern ((set890 bv0 bv1))
     :pattern ((Rmem1 anc_1033I bv0) (set889 bv1)))))
(declare-fun set891 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set891 bv0) (and (= bv0 anc_1034I))) :pattern ((set891 bv0)))))
(declare-fun set892 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set892 bv0 bv1) (and (set891 bv0) (Rmem1 anc_1035I bv1)))
     :pattern ((set892 bv0 bv1))
     :pattern ((set891 bv0) (Rmem1 anc_1035I bv1)))))
(declare-fun set893 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set893 bv0 bv1) (and (Rmem1 anc_1033I bv0) (Rmem1 anc_1035I bv1)))
     :pattern ((set893 bv0 bv1))
     :pattern ((Rmem1 anc_1033I bv0) (Rmem1 anc_1035I bv1)))))
(declare-fun set894 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set894 bv0 bv1) (or (set892 bv0 bv1) (set893 bv0 bv1)))
     :pattern ((set894 bv0 bv1))
     :pattern ((set892 bv0 bv1))
     :pattern ((set893 bv0 bv1)))))
(declare-fun set895 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set895 bv0 bv1) (or (set890 bv0 bv1) (set894 bv0 bv1)))
     :pattern ((set895 bv0 bv1))
     :pattern ((set890 bv0 bv1))
     :pattern ((set894 bv0 bv1)))))
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (Rto2 anc_1036I bv0 bv1) (set895 bv0 bv1))
     :pattern ((Rto2 anc_1036I bv0 bv1))
     :pattern ((set895 bv0 bv1)))))
(declare-fun set896 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set896 bv0) (and (= bv0 anc_1034I))) :pattern ((set896 bv0)))))
(declare-fun set897 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set897 bv0) (or (Rmem1 anc_1035I bv0) (Rmem1 anc_1033I bv0)))
     :pattern ((set897 bv0))
     :pattern ((Rmem1 anc_1035I bv0))
     :pattern ((Rmem1 anc_1033I bv0)))))
(declare-fun set898 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set898 bv0) (or (set896 bv0) (set897 bv0)))
     :pattern ((set898 bv0))
     :pattern ((set896 bv0))
     :pattern ((set897 bv0)))))
(assert (forall ((bv0 T23))
  (! (= (Rmem1 anc_1036I bv0) (set898 bv0))
     :pattern ((Rmem1 anc_1036I bv0))
     :pattern ((set898 bv0)))))
(declare-fun set899 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set899 bv0) (and (= bv0 anc_1034I))) :pattern ((set899 bv0)))))
(assert (forall ((bv0 T23))
  (! (= (Rroot3 anc_1036I bv0) (set899 bv0))
     :pattern ((Rroot3 anc_1036I bv0))
     :pattern ((set899 bv0)))))
(assert (= anc_1035I b))
(assert (= anc_1034I x))
(assert (= anc_1033I a))
(assert (= anc_1032I B))
(assert (= anc_1030I R))
(declare-fun set900 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set900 bv0) (and (= bv0 x))) :pattern ((set900 bv0)))))
(declare-fun set901 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set901 bv0 bv1) (and (Rmem1 a bv0) (set900 bv1)))
     :pattern ((set901 bv0 bv1))
     :pattern ((Rmem1 a bv0) (set900 bv1)))))
(declare-fun set902 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set902 bv0) (and (= bv0 x))) :pattern ((set902 bv0)))))
(declare-fun set903 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set903 bv0 bv1) (and (set902 bv0) (Rmem1 b bv1)))
     :pattern ((set903 bv0 bv1))
     :pattern ((set902 bv0) (Rmem1 b bv1)))))
(declare-fun set904 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set904 bv0 bv1) (and (Rmem1 a bv0) (Rmem1 b bv1)))
     :pattern ((set904 bv0 bv1))
     :pattern ((Rmem1 a bv0) (Rmem1 b bv1)))))
(declare-fun set905 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set905 bv0 bv1) (or (set903 bv0 bv1) (set904 bv0 bv1)))
     :pattern ((set905 bv0 bv1))
     :pattern ((set903 bv0 bv1))
     :pattern ((set904 bv0 bv1)))))
(declare-fun set906 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set906 bv0 bv1) (or (set901 bv0 bv1) (set905 bv0 bv1)))
     :pattern ((set906 bv0 bv1))
     :pattern ((set901 bv0 bv1))
     :pattern ((set905 bv0 bv1)))))
(declare-fun set907 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set907 bv0 bv1) (or (Rtos0 b bv0 bv1) (Rtos0 a bv0 bv1)))
     :pattern ((set907 bv0 bv1))
     :pattern ((Rtos0 b bv0 bv1))
     :pattern ((Rtos0 a bv0 bv1)))))
(declare-fun set908 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set908 bv0 bv1) (or (set906 bv0 bv1) (set907 bv0 bv1)))
     :pattern ((set908 bv0 bv1))
     :pattern ((set906 bv0 bv1))
     :pattern ((set907 bv0 bv1)))))
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (Rtos0 anc_1025I bv0 bv1) (set908 bv0 bv1))
     :pattern ((Rtos0 anc_1025I bv0 bv1))
     :pattern ((set908 bv0 bv1)))))
(declare-fun set909 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set909 bv0) (and (= bv0 x))) :pattern ((set909 bv0)))))
(declare-fun set910 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set910 bv0 bv1) (and (Rmem1 a bv0) (set909 bv1)))
     :pattern ((set910 bv0 bv1))
     :pattern ((Rmem1 a bv0) (set909 bv1)))))
(declare-fun set911 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set911 bv0) (and (= bv0 x))) :pattern ((set911 bv0)))))
(declare-fun set912 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set912 bv0 bv1) (and (set911 bv0) (Rmem1 b bv1)))
     :pattern ((set912 bv0 bv1))
     :pattern ((set911 bv0) (Rmem1 b bv1)))))
(declare-fun set913 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set913 bv0 bv1) (and (Rmem1 a bv0) (Rmem1 b bv1)))
     :pattern ((set913 bv0 bv1))
     :pattern ((Rmem1 a bv0) (Rmem1 b bv1)))))
(declare-fun set914 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set914 bv0 bv1) (or (set912 bv0 bv1) (set913 bv0 bv1)))
     :pattern ((set914 bv0 bv1))
     :pattern ((set912 bv0 bv1))
     :pattern ((set913 bv0 bv1)))))
(declare-fun set915 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set915 bv0 bv1) (or (set910 bv0 bv1) (set914 bv0 bv1)))
     :pattern ((set915 bv0 bv1))
     :pattern ((set910 bv0 bv1))
     :pattern ((set914 bv0 bv1)))))
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (Rto2 anc_1025I bv0 bv1) (set915 bv0 bv1))
     :pattern ((Rto2 anc_1025I bv0 bv1))
     :pattern ((set915 bv0 bv1)))))
(declare-fun set916 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set916 bv0) (and (= bv0 x))) :pattern ((set916 bv0)))))
(declare-fun set917 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set917 bv0) (or (Rmem1 b bv0) (Rmem1 a bv0)))
     :pattern ((set917 bv0))
     :pattern ((Rmem1 b bv0))
     :pattern ((Rmem1 a bv0)))))
(declare-fun set918 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set918 bv0) (or (set916 bv0) (set917 bv0)))
     :pattern ((set918 bv0))
     :pattern ((set916 bv0))
     :pattern ((set917 bv0)))))
(assert (forall ((bv0 T23))
  (! (= (Rmem1 anc_1025I bv0) (set918 bv0))
     :pattern ((Rmem1 anc_1025I bv0))
     :pattern ((set918 bv0)))))
(declare-fun set919 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set919 bv0) (and (= bv0 x))) :pattern ((set919 bv0)))))
(assert (forall ((bv0 T23))
  (! (= (Rroot3 anc_1025I bv0) (set919 bv0))
     :pattern ((Rroot3 anc_1025I bv0))
     :pattern ((set919 bv0)))))
(declare-fun set920 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set920 bv0) (and (= bv0 y))) :pattern ((set920 bv0)))))
(declare-fun set921 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set921 bv0 bv1) (and (Rmem1 anc_1025I bv0) (set920 bv1)))
     :pattern ((set921 bv0 bv1))
     :pattern ((Rmem1 anc_1025I bv0) (set920 bv1)))))
(declare-fun set922 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set922 bv0) (and (= bv0 y))) :pattern ((set922 bv0)))))
(declare-fun set923 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set923 bv0 bv1) (and (set922 bv0) (Rmem1 c bv1)))
     :pattern ((set923 bv0 bv1))
     :pattern ((set922 bv0) (Rmem1 c bv1)))))
(declare-fun set924 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set924 bv0 bv1) (and (Rmem1 anc_1025I bv0) (Rmem1 c bv1)))
     :pattern ((set924 bv0 bv1))
     :pattern ((Rmem1 anc_1025I bv0) (Rmem1 c bv1)))))
(declare-fun set925 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set925 bv0 bv1) (or (set923 bv0 bv1) (set924 bv0 bv1)))
     :pattern ((set925 bv0 bv1))
     :pattern ((set923 bv0 bv1))
     :pattern ((set924 bv0 bv1)))))
(declare-fun set926 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set926 bv0 bv1) (or (set921 bv0 bv1) (set925 bv0 bv1)))
     :pattern ((set926 bv0 bv1))
     :pattern ((set921 bv0 bv1))
     :pattern ((set925 bv0 bv1)))))
(declare-fun set927 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set927 bv0 bv1) (or (Rtos0 c bv0 bv1) (Rtos0 anc_1025I bv0 bv1)))
     :pattern ((set927 bv0 bv1))
     :pattern ((Rtos0 c bv0 bv1))
     :pattern ((Rtos0 anc_1025I bv0 bv1)))))
(declare-fun set928 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set928 bv0 bv1) (or (set926 bv0 bv1) (set927 bv0 bv1)))
     :pattern ((set928 bv0 bv1))
     :pattern ((set926 bv0 bv1))
     :pattern ((set927 bv0 bv1)))))
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (Rtos0 anc_1027I bv0 bv1) (set928 bv0 bv1))
     :pattern ((Rtos0 anc_1027I bv0 bv1))
     :pattern ((set928 bv0 bv1)))))
(declare-fun set929 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set929 bv0) (and (= bv0 y))) :pattern ((set929 bv0)))))
(declare-fun set930 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set930 bv0 bv1) (and (Rmem1 anc_1025I bv0) (set929 bv1)))
     :pattern ((set930 bv0 bv1))
     :pattern ((Rmem1 anc_1025I bv0) (set929 bv1)))))
(declare-fun set931 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set931 bv0) (and (= bv0 y))) :pattern ((set931 bv0)))))
(declare-fun set932 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set932 bv0 bv1) (and (set931 bv0) (Rmem1 c bv1)))
     :pattern ((set932 bv0 bv1))
     :pattern ((set931 bv0) (Rmem1 c bv1)))))
(declare-fun set933 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set933 bv0 bv1) (and (Rmem1 anc_1025I bv0) (Rmem1 c bv1)))
     :pattern ((set933 bv0 bv1))
     :pattern ((Rmem1 anc_1025I bv0) (Rmem1 c bv1)))))
(declare-fun set934 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set934 bv0 bv1) (or (set932 bv0 bv1) (set933 bv0 bv1)))
     :pattern ((set934 bv0 bv1))
     :pattern ((set932 bv0 bv1))
     :pattern ((set933 bv0 bv1)))))
(declare-fun set935 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set935 bv0 bv1) (or (set930 bv0 bv1) (set934 bv0 bv1)))
     :pattern ((set935 bv0 bv1))
     :pattern ((set930 bv0 bv1))
     :pattern ((set934 bv0 bv1)))))
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (Rto2 anc_1027I bv0 bv1) (set935 bv0 bv1))
     :pattern ((Rto2 anc_1027I bv0 bv1))
     :pattern ((set935 bv0 bv1)))))
(declare-fun set936 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set936 bv0) (and (= bv0 y))) :pattern ((set936 bv0)))))
(declare-fun set937 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set937 bv0) (or (Rmem1 c bv0) (Rmem1 anc_1025I bv0)))
     :pattern ((set937 bv0))
     :pattern ((Rmem1 c bv0))
     :pattern ((Rmem1 anc_1025I bv0)))))
(declare-fun set938 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set938 bv0) (or (set936 bv0) (set937 bv0)))
     :pattern ((set938 bv0))
     :pattern ((set936 bv0))
     :pattern ((set937 bv0)))))
(assert (forall ((bv0 T23))
  (! (= (Rmem1 anc_1027I bv0) (set938 bv0))
     :pattern ((Rmem1 anc_1027I bv0))
     :pattern ((set938 bv0)))))
(declare-fun set939 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set939 bv0) (and (= bv0 y))) :pattern ((set939 bv0)))))
(assert (forall ((bv0 T23))
  (! (= (Rroot3 anc_1027I bv0) (set939 bv0))
     :pattern ((Rroot3 anc_1027I bv0))
     :pattern ((set939 bv0)))))
(declare-fun set940 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set940 bv0) (and (= bv0 anc_1037I))) :pattern ((set940 bv0)))))
(declare-fun set941 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set941 bv0 bv1) (and (Rmem1 anc_1036I bv0) (set940 bv1)))
     :pattern ((set941 bv0 bv1))
     :pattern ((Rmem1 anc_1036I bv0) (set940 bv1)))))
(declare-fun set942 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set942 bv0) (and (= bv0 anc_1037I))) :pattern ((set942 bv0)))))
(declare-fun set943 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set943 bv0 bv1) (and (set942 bv0) (Rmem1 anc_1043I bv1)))
     :pattern ((set943 bv0 bv1))
     :pattern ((set942 bv0) (Rmem1 anc_1043I bv1)))))
(declare-fun set944 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set944 bv0 bv1) (and (Rmem1 anc_1036I bv0) (Rmem1 anc_1043I bv1)))
     :pattern ((set944 bv0 bv1))
     :pattern ((Rmem1 anc_1036I bv0) (Rmem1 anc_1043I bv1)))))
(declare-fun set945 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set945 bv0 bv1) (or (set943 bv0 bv1) (set944 bv0 bv1)))
     :pattern ((set945 bv0 bv1))
     :pattern ((set943 bv0 bv1))
     :pattern ((set944 bv0 bv1)))))
(declare-fun set946 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set946 bv0 bv1) (or (set941 bv0 bv1) (set945 bv0 bv1)))
     :pattern ((set946 bv0 bv1))
     :pattern ((set941 bv0 bv1))
     :pattern ((set945 bv0 bv1)))))
(declare-fun set947 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set947 bv0 bv1)
        (or (Rtos0 anc_1043I bv0 bv1) (Rtos0 anc_1036I bv0 bv1)))
     :pattern ((set947 bv0 bv1))
     :pattern ((Rtos0 anc_1043I bv0 bv1))
     :pattern ((Rtos0 anc_1036I bv0 bv1)))))
(declare-fun set948 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set948 bv0 bv1) (or (set946 bv0 bv1) (set947 bv0 bv1)))
     :pattern ((set948 bv0 bv1))
     :pattern ((set946 bv0 bv1))
     :pattern ((set947 bv0 bv1)))))
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (Rtos0 v_15 bv0 bv1) (set948 bv0 bv1))
     :pattern ((Rtos0 v_15 bv0 bv1))
     :pattern ((set948 bv0 bv1)))))
(declare-fun set949 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set949 bv0) (and (= bv0 anc_1037I))) :pattern ((set949 bv0)))))
(declare-fun set950 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set950 bv0 bv1) (and (Rmem1 anc_1036I bv0) (set949 bv1)))
     :pattern ((set950 bv0 bv1))
     :pattern ((Rmem1 anc_1036I bv0) (set949 bv1)))))
(declare-fun set951 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set951 bv0) (and (= bv0 anc_1037I))) :pattern ((set951 bv0)))))
(declare-fun set952 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set952 bv0 bv1) (and (set951 bv0) (Rmem1 anc_1043I bv1)))
     :pattern ((set952 bv0 bv1))
     :pattern ((set951 bv0) (Rmem1 anc_1043I bv1)))))
(declare-fun set953 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set953 bv0 bv1) (and (Rmem1 anc_1036I bv0) (Rmem1 anc_1043I bv1)))
     :pattern ((set953 bv0 bv1))
     :pattern ((Rmem1 anc_1036I bv0) (Rmem1 anc_1043I bv1)))))
(declare-fun set954 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set954 bv0 bv1) (or (set952 bv0 bv1) (set953 bv0 bv1)))
     :pattern ((set954 bv0 bv1))
     :pattern ((set952 bv0 bv1))
     :pattern ((set953 bv0 bv1)))))
(declare-fun set955 (T23 T23) Bool)
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (set955 bv0 bv1) (or (set950 bv0 bv1) (set954 bv0 bv1)))
     :pattern ((set955 bv0 bv1))
     :pattern ((set950 bv0 bv1))
     :pattern ((set954 bv0 bv1)))))
(assert (forall ((bv1 T23) (bv0 T23))
  (! (= (Rto2 v_15 bv0 bv1) (set955 bv0 bv1))
     :pattern ((Rto2 v_15 bv0 bv1))
     :pattern ((set955 bv0 bv1)))))
(declare-fun set956 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set956 bv0) (and (= bv0 anc_1037I))) :pattern ((set956 bv0)))))
(declare-fun set957 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set957 bv0) (or (Rmem1 anc_1043I bv0) (Rmem1 anc_1036I bv0)))
     :pattern ((set957 bv0))
     :pattern ((Rmem1 anc_1043I bv0))
     :pattern ((Rmem1 anc_1036I bv0)))))
(declare-fun set958 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set958 bv0) (or (set956 bv0) (set957 bv0)))
     :pattern ((set958 bv0))
     :pattern ((set956 bv0))
     :pattern ((set957 bv0)))))
(assert (forall ((bv0 T23))
  (! (= (Rmem1 v_15 bv0) (set958 bv0))
     :pattern ((Rmem1 v_15 bv0))
     :pattern ((set958 bv0)))))
(declare-fun set959 (T23) Bool)
(assert (forall ((bv0 T23))
  (! (= (set959 bv0) (and (= bv0 anc_1037I))) :pattern ((set959 bv0)))))
(assert (forall ((bv0 T23))
  (! (= (Rroot3 v_15 bv0) (set959 bv0))
     :pattern ((Rroot3 v_15 bv0))
     :pattern ((set959 bv0)))))
(assert (not (forall ((bv0 T23))
       (! (= (Rmem1 v_15 bv0) (Rmem1 x_0 bv0))
          :pattern ((Rmem1 v_15 bv0))
          :pattern ((Rmem1 x_0 bv0))))))
(check-sat)

(declare-sort T24)
(declare-const v_15 T24)
(declare-const x_0 T24)
(declare-sort T25)
(declare-const B T25)
(declare-const R T25)
(declare-const t T24)
(declare-sort T26)
(declare-fun Rtos0 (T24 T26 T26) Bool)
(assert (= t x_0))
(assert (= v_15 x_0))
(assert (= v_15 t))
(assert (not (forall ((bv1 T26) (bv0 T26))
       (! (= (Rtos0 v_15 bv0 bv1) (Rtos0 x_0 bv0 bv1))
          :pattern ((Rtos0 v_15 bv0 bv1))
          :pattern ((Rtos0 x_0 bv0 bv1))))))
(check-sat)

(declare-sort T27)
(declare-const v_15 T27)
(declare-const x_0 T27)
(declare-sort T28)
(declare-const B T28)
(declare-const R T28)
(declare-const t T27)
(declare-sort T29)
(declare-fun Rmem0 (T27 T29) Bool)
(assert (= t x_0))
(assert (= v_15 x_0))
(assert (= v_15 t))
(assert (not (forall ((bv0 T29))
       (! (= (Rmem0 v_15 bv0) (Rmem0 x_0 bv0))
          :pattern ((Rmem0 v_15 bv0))
          :pattern ((Rmem0 x_0 bv0))))))
(check-sat)

