(declare-sort T0)
(declare-const v_6 T0)
(declare-const x_1 T0)
(declare-const x_0 T0)
(declare-const anc_1056I T0)
(declare-const anc_1057I T0)
(declare-const l1 T0)
(declare-const l2 T0)
(declare-const sv_4100 T0)
(declare-sort T1)
(declare-fun Rhd3 (T0 T1) Bool)
(declare-fun Rmem2 (T0 T1) Bool)
(declare-fun Rob1 (T0 T1 T1) Bool)
(declare-fun Robs0 (T0 T1 T1) Bool)
(assert (= anc_1057I x_1))
(assert (= anc_1056I x_0))
(assert (= l2 x_1))
(assert (= l2 anc_1057I))
(assert (= l1 x_0))
(assert (= l1 anc_1056I))
(declare-fun set0 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set0 bv0 bv1) false) :pattern ((set0 bv0 bv1)))))
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (Robs0 l1 bv0 bv1) (set0 bv0 bv1))
     :pattern ((Robs0 l1 bv0 bv1))
     :pattern ((set0 bv0 bv1)))))
(declare-fun set1 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set1 bv0 bv1) false) :pattern ((set1 bv0 bv1)))))
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (Rob1 l1 bv0 bv1) (set1 bv0 bv1))
     :pattern ((Rob1 l1 bv0 bv1))
     :pattern ((set1 bv0 bv1)))))
(declare-fun set2 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set2 bv0) false) :pattern ((set2 bv0)))))
(assert (forall ((bv0 T1))
  (! (= (Rmem2 l1 bv0) (set2 bv0))
     :pattern ((Rmem2 l1 bv0))
     :pattern ((set2 bv0)))))
(declare-fun set3 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set3 bv0) false) :pattern ((set3 bv0)))))
(assert (forall ((bv0 T1))
  (! (= (Rhd3 l1 bv0) (set3 bv0))
     :pattern ((Rhd3 l1 bv0))
     :pattern ((set3 bv0)))))
(assert (= v_6 x_1))
(assert (= v_6 anc_1057I))
(assert (= v_6 l2))
(declare-fun set4 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set4 bv0 bv1) (and (Rmem2 x_0 bv0) (Rmem2 x_1 bv1)))
     :pattern ((set4 bv0 bv1))
     :pattern ((Rmem2 x_0 bv0) (Rmem2 x_1 bv1)))))
(declare-fun set5 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set5 bv0 bv1) (or (Robs0 x_1 bv0 bv1) (set4 bv0 bv1)))
     :pattern ((set5 bv0 bv1))
     :pattern ((Robs0 x_1 bv0 bv1))
     :pattern ((set4 bv0 bv1)))))
(declare-fun set6 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set6 bv0 bv1) (or (Robs0 x_0 bv0 bv1) (set5 bv0 bv1)))
     :pattern ((set6 bv0 bv1))
     :pattern ((Robs0 x_0 bv0 bv1))
     :pattern ((set5 bv0 bv1)))))
(assert (not (forall ((bv1 T1) (bv0 T1))
       (! (= (Robs0 v_6 bv0 bv1) (set6 bv0 bv1))
          :pattern ((Robs0 v_6 bv0 bv1))
          :pattern ((set6 bv0 bv1))))))
(check-sat)

(declare-sort T2)
(declare-const v_6 T2)
(declare-const x_1 T2)
(declare-const x_0 T2)
(declare-const anc_1056I T2)
(declare-const anc_1057I T2)
(declare-const l1 T2)
(declare-const l2 T2)
(declare-const sv_4100 T2)
(declare-sort T3)
(declare-fun Rhd3 (T2 T3) Bool)
(declare-fun Rmem2 (T2 T3) Bool)
(declare-fun Rob1 (T2 T3 T3) Bool)
(declare-fun Robs0 (T2 T3 T3) Bool)
(assert (= anc_1057I x_1))
(assert (= anc_1056I x_0))
(assert (= l2 x_1))
(assert (= l2 anc_1057I))
(assert (= l1 x_0))
(assert (= l1 anc_1056I))
(declare-fun set7 (T3 T3) Bool)
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (set7 bv0 bv1) false) :pattern ((set7 bv0 bv1)))))
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (Robs0 l1 bv0 bv1) (set7 bv0 bv1))
     :pattern ((Robs0 l1 bv0 bv1))
     :pattern ((set7 bv0 bv1)))))
(declare-fun set8 (T3 T3) Bool)
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (set8 bv0 bv1) false) :pattern ((set8 bv0 bv1)))))
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (Rob1 l1 bv0 bv1) (set8 bv0 bv1))
     :pattern ((Rob1 l1 bv0 bv1))
     :pattern ((set8 bv0 bv1)))))
(declare-fun set9 (T3) Bool)
(assert (forall ((bv0 T3)) (! (= (set9 bv0) false) :pattern ((set9 bv0)))))
(assert (forall ((bv0 T3))
  (! (= (Rmem2 l1 bv0) (set9 bv0))
     :pattern ((Rmem2 l1 bv0))
     :pattern ((set9 bv0)))))
(declare-fun set10 (T3) Bool)
(assert (forall ((bv0 T3)) (! (= (set10 bv0) false) :pattern ((set10 bv0)))))
(assert (forall ((bv0 T3))
  (! (= (Rhd3 l1 bv0) (set10 bv0))
     :pattern ((Rhd3 l1 bv0))
     :pattern ((set10 bv0)))))
(assert (= v_6 x_1))
(assert (= v_6 anc_1057I))
(assert (= v_6 l2))
(declare-fun set11 (T3) Bool)
(assert (forall ((bv0 T3))
  (! (= (set11 bv0) (or (Rmem2 x_0 bv0) (Rmem2 x_1 bv0)))
     :pattern ((set11 bv0))
     :pattern ((Rmem2 x_0 bv0))
     :pattern ((Rmem2 x_1 bv0)))))
(assert (not (forall ((bv0 T3))
       (! (= (Rmem2 v_6 bv0) (set11 bv0))
          :pattern ((Rmem2 v_6 bv0))
          :pattern ((set11 bv0))))))
(check-sat)

(declare-sort T4)
(declare-const v_6 T4)
(declare-const x_1 T4)
(declare-const x_0 T4)
(declare-const anc_1056I T4)
(declare-const anc_1057I T4)
(declare-const l1 T4)
(declare-const l2 T4)
(declare-sort T5)
(declare-const x T5)
(declare-const xs T4)
(declare-const sv_4103 T4)
(declare-const anc_1059I T5)
(declare-const anc_1062I T4)
(declare-fun Rhd3 (T4 T5) Bool)
(declare-fun Rob2 (T4 T5 T5) Bool)
(declare-fun Rmem1 (T4 T5) Bool)
(declare-fun Robs0 (T4 T5 T5) Bool)
(assert (= anc_1057I x_1))
(assert (= anc_1056I x_0))
(assert (= l2 x_1))
(assert (= l2 anc_1057I))
(assert (= l1 x_0))
(assert (= l1 anc_1056I))
(declare-fun set12 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set12 bv0) (and (= bv0 x))) :pattern ((set12 bv0)))))
(declare-fun set13 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set13 bv0 bv1) (and (set12 bv0) (Rmem1 xs bv1)))
     :pattern ((set13 bv0 bv1))
     :pattern ((set12 bv0) (Rmem1 xs bv1)))))
(declare-fun set14 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set14 bv0 bv1) (or (set13 bv0 bv1) (Robs0 xs bv0 bv1)))
     :pattern ((set14 bv0 bv1))
     :pattern ((set13 bv0 bv1))
     :pattern ((Robs0 xs bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Robs0 l1 bv0 bv1) (set14 bv0 bv1))
     :pattern ((Robs0 l1 bv0 bv1))
     :pattern ((set14 bv0 bv1)))))
(declare-fun set15 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set15 bv0) (and (= bv0 x))) :pattern ((set15 bv0)))))
(declare-fun set16 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set16 bv0 bv1) (and (set15 bv0) (Rmem1 xs bv1)))
     :pattern ((set16 bv0 bv1))
     :pattern ((set15 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rob2 l1 bv0 bv1) (set16 bv0 bv1))
     :pattern ((Rob2 l1 bv0 bv1))
     :pattern ((set16 bv0 bv1)))))
(declare-fun set17 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set17 bv0) (and (= bv0 x))) :pattern ((set17 bv0)))))
(declare-fun set18 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set18 bv0) (or (set17 bv0) (Rmem1 xs bv0)))
     :pattern ((set18 bv0))
     :pattern ((set17 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rmem1 l1 bv0) (set18 bv0))
     :pattern ((Rmem1 l1 bv0))
     :pattern ((set18 bv0)))))
(declare-fun set19 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set19 bv0) (and (= bv0 x))) :pattern ((set19 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rhd3 l1 bv0) (set19 bv0))
     :pattern ((Rhd3 l1 bv0))
     :pattern ((set19 bv0)))))
(declare-fun set20 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set20 bv0 bv1) (and (Rmem1 xs bv0) (Rmem1 l2 bv1)))
     :pattern ((set20 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (Rmem1 l2 bv1)))))
(declare-fun set21 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set21 bv0 bv1) (or (Robs0 l2 bv0 bv1) (set20 bv0 bv1)))
     :pattern ((set21 bv0 bv1))
     :pattern ((Robs0 l2 bv0 bv1))
     :pattern ((set20 bv0 bv1)))))
(declare-fun set22 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set22 bv0 bv1) (or (Robs0 xs bv0 bv1) (set21 bv0 bv1)))
     :pattern ((set22 bv0 bv1))
     :pattern ((Robs0 xs bv0 bv1))
     :pattern ((set21 bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Robs0 anc_1062I bv0 bv1) (set22 bv0 bv1))
     :pattern ((Robs0 anc_1062I bv0 bv1))
     :pattern ((set22 bv0 bv1)))))
(declare-fun set23 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set23 bv0) (or (Rmem1 xs bv0) (Rmem1 l2 bv0)))
     :pattern ((set23 bv0))
     :pattern ((Rmem1 xs bv0))
     :pattern ((Rmem1 l2 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rmem1 anc_1062I bv0) (set23 bv0))
     :pattern ((Rmem1 anc_1062I bv0))
     :pattern ((set23 bv0)))))
(assert (= anc_1059I x))
(declare-fun set24 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set24 bv0) (and (= bv0 anc_1059I))) :pattern ((set24 bv0)))))
(declare-fun set25 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set25 bv0 bv1) (and (set24 bv0) (Rmem1 anc_1062I bv1)))
     :pattern ((set25 bv0 bv1))
     :pattern ((set24 bv0) (Rmem1 anc_1062I bv1)))))
(declare-fun set26 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set26 bv0 bv1) (or (set25 bv0 bv1) (Robs0 anc_1062I bv0 bv1)))
     :pattern ((set26 bv0 bv1))
     :pattern ((set25 bv0 bv1))
     :pattern ((Robs0 anc_1062I bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Robs0 v_6 bv0 bv1) (set26 bv0 bv1))
     :pattern ((Robs0 v_6 bv0 bv1))
     :pattern ((set26 bv0 bv1)))))
(declare-fun set27 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set27 bv0) (and (= bv0 anc_1059I))) :pattern ((set27 bv0)))))
(declare-fun set28 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set28 bv0 bv1) (and (set27 bv0) (Rmem1 anc_1062I bv1)))
     :pattern ((set28 bv0 bv1))
     :pattern ((set27 bv0) (Rmem1 anc_1062I bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rob2 v_6 bv0 bv1) (set28 bv0 bv1))
     :pattern ((Rob2 v_6 bv0 bv1))
     :pattern ((set28 bv0 bv1)))))
(declare-fun set29 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set29 bv0) (and (= bv0 anc_1059I))) :pattern ((set29 bv0)))))
(declare-fun set30 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set30 bv0) (or (set29 bv0) (Rmem1 anc_1062I bv0)))
     :pattern ((set30 bv0))
     :pattern ((set29 bv0))
     :pattern ((Rmem1 anc_1062I bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rmem1 v_6 bv0) (set30 bv0))
     :pattern ((Rmem1 v_6 bv0))
     :pattern ((set30 bv0)))))
(declare-fun set31 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set31 bv0) (and (= bv0 anc_1059I))) :pattern ((set31 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rhd3 v_6 bv0) (set31 bv0))
     :pattern ((Rhd3 v_6 bv0))
     :pattern ((set31 bv0)))))
(declare-fun set32 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set32 bv0 bv1) (and (Rmem1 x_0 bv0) (Rmem1 x_1 bv1)))
     :pattern ((set32 bv0 bv1))
     :pattern ((Rmem1 x_0 bv0) (Rmem1 x_1 bv1)))))
(declare-fun set33 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set33 bv0 bv1) (or (Robs0 x_1 bv0 bv1) (set32 bv0 bv1)))
     :pattern ((set33 bv0 bv1))
     :pattern ((Robs0 x_1 bv0 bv1))
     :pattern ((set32 bv0 bv1)))))
(declare-fun set34 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set34 bv0 bv1) (or (Robs0 x_0 bv0 bv1) (set33 bv0 bv1)))
     :pattern ((set34 bv0 bv1))
     :pattern ((Robs0 x_0 bv0 bv1))
     :pattern ((set33 bv0 bv1)))))
(assert (not (forall ((bv1 T5) (bv0 T5))
       (! (= (Robs0 v_6 bv0 bv1) (set34 bv0 bv1))
          :pattern ((Robs0 v_6 bv0 bv1))
          :pattern ((set34 bv0 bv1))))))
(check-sat)

(declare-sort T6)
(declare-const v_6 T6)
(declare-const x_1 T6)
(declare-const x_0 T6)
(declare-const anc_1056I T6)
(declare-const anc_1057I T6)
(declare-const l1 T6)
(declare-const l2 T6)
(declare-sort T7)
(declare-const x T7)
(declare-const xs T6)
(declare-const sv_4103 T6)
(declare-const anc_1059I T7)
(declare-const anc_1062I T6)
(declare-fun Rhd3 (T6 T7) Bool)
(declare-fun Rob2 (T6 T7 T7) Bool)
(declare-fun Rmem1 (T6 T7) Bool)
(declare-fun Robs0 (T6 T7 T7) Bool)
(assert (= anc_1057I x_1))
(assert (= anc_1056I x_0))
(assert (= l2 x_1))
(assert (= l2 anc_1057I))
(assert (= l1 x_0))
(assert (= l1 anc_1056I))
(declare-fun set35 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set35 bv0) (and (= bv0 x))) :pattern ((set35 bv0)))))
(declare-fun set36 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set36 bv0 bv1) (and (set35 bv0) (Rmem1 xs bv1)))
     :pattern ((set36 bv0 bv1))
     :pattern ((set35 bv0) (Rmem1 xs bv1)))))
(declare-fun set37 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set37 bv0 bv1) (or (set36 bv0 bv1) (Robs0 xs bv0 bv1)))
     :pattern ((set37 bv0 bv1))
     :pattern ((set36 bv0 bv1))
     :pattern ((Robs0 xs bv0 bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Robs0 l1 bv0 bv1) (set37 bv0 bv1))
     :pattern ((Robs0 l1 bv0 bv1))
     :pattern ((set37 bv0 bv1)))))
(declare-fun set38 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set38 bv0) (and (= bv0 x))) :pattern ((set38 bv0)))))
(declare-fun set39 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set39 bv0 bv1) (and (set38 bv0) (Rmem1 xs bv1)))
     :pattern ((set39 bv0 bv1))
     :pattern ((set38 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Rob2 l1 bv0 bv1) (set39 bv0 bv1))
     :pattern ((Rob2 l1 bv0 bv1))
     :pattern ((set39 bv0 bv1)))))
(declare-fun set40 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set40 bv0) (and (= bv0 x))) :pattern ((set40 bv0)))))
(declare-fun set41 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set41 bv0) (or (set40 bv0) (Rmem1 xs bv0)))
     :pattern ((set41 bv0))
     :pattern ((set40 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rmem1 l1 bv0) (set41 bv0))
     :pattern ((Rmem1 l1 bv0))
     :pattern ((set41 bv0)))))
(declare-fun set42 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set42 bv0) (and (= bv0 x))) :pattern ((set42 bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rhd3 l1 bv0) (set42 bv0))
     :pattern ((Rhd3 l1 bv0))
     :pattern ((set42 bv0)))))
(declare-fun set43 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set43 bv0 bv1) (and (Rmem1 xs bv0) (Rmem1 l2 bv1)))
     :pattern ((set43 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (Rmem1 l2 bv1)))))
(declare-fun set44 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set44 bv0 bv1) (or (Robs0 l2 bv0 bv1) (set43 bv0 bv1)))
     :pattern ((set44 bv0 bv1))
     :pattern ((Robs0 l2 bv0 bv1))
     :pattern ((set43 bv0 bv1)))))
(declare-fun set45 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set45 bv0 bv1) (or (Robs0 xs bv0 bv1) (set44 bv0 bv1)))
     :pattern ((set45 bv0 bv1))
     :pattern ((Robs0 xs bv0 bv1))
     :pattern ((set44 bv0 bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Robs0 anc_1062I bv0 bv1) (set45 bv0 bv1))
     :pattern ((Robs0 anc_1062I bv0 bv1))
     :pattern ((set45 bv0 bv1)))))
(declare-fun set46 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set46 bv0) (or (Rmem1 xs bv0) (Rmem1 l2 bv0)))
     :pattern ((set46 bv0))
     :pattern ((Rmem1 xs bv0))
     :pattern ((Rmem1 l2 bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rmem1 anc_1062I bv0) (set46 bv0))
     :pattern ((Rmem1 anc_1062I bv0))
     :pattern ((set46 bv0)))))
(assert (= anc_1059I x))
(declare-fun set47 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set47 bv0) (and (= bv0 anc_1059I))) :pattern ((set47 bv0)))))
(declare-fun set48 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set48 bv0 bv1) (and (set47 bv0) (Rmem1 anc_1062I bv1)))
     :pattern ((set48 bv0 bv1))
     :pattern ((set47 bv0) (Rmem1 anc_1062I bv1)))))
(declare-fun set49 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set49 bv0 bv1) (or (set48 bv0 bv1) (Robs0 anc_1062I bv0 bv1)))
     :pattern ((set49 bv0 bv1))
     :pattern ((set48 bv0 bv1))
     :pattern ((Robs0 anc_1062I bv0 bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Robs0 v_6 bv0 bv1) (set49 bv0 bv1))
     :pattern ((Robs0 v_6 bv0 bv1))
     :pattern ((set49 bv0 bv1)))))
(declare-fun set50 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set50 bv0) (and (= bv0 anc_1059I))) :pattern ((set50 bv0)))))
(declare-fun set51 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set51 bv0 bv1) (and (set50 bv0) (Rmem1 anc_1062I bv1)))
     :pattern ((set51 bv0 bv1))
     :pattern ((set50 bv0) (Rmem1 anc_1062I bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Rob2 v_6 bv0 bv1) (set51 bv0 bv1))
     :pattern ((Rob2 v_6 bv0 bv1))
     :pattern ((set51 bv0 bv1)))))
(declare-fun set52 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set52 bv0) (and (= bv0 anc_1059I))) :pattern ((set52 bv0)))))
(declare-fun set53 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set53 bv0) (or (set52 bv0) (Rmem1 anc_1062I bv0)))
     :pattern ((set53 bv0))
     :pattern ((set52 bv0))
     :pattern ((Rmem1 anc_1062I bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rmem1 v_6 bv0) (set53 bv0))
     :pattern ((Rmem1 v_6 bv0))
     :pattern ((set53 bv0)))))
(declare-fun set54 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set54 bv0) (and (= bv0 anc_1059I))) :pattern ((set54 bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rhd3 v_6 bv0) (set54 bv0))
     :pattern ((Rhd3 v_6 bv0))
     :pattern ((set54 bv0)))))
(declare-fun set55 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set55 bv0) (or (Rmem1 x_0 bv0) (Rmem1 x_1 bv0)))
     :pattern ((set55 bv0))
     :pattern ((Rmem1 x_0 bv0))
     :pattern ((Rmem1 x_1 bv0)))))
(assert (not (forall ((bv0 T7))
       (! (= (Rmem1 v_6 bv0) (set55 bv0))
          :pattern ((Rmem1 v_6 bv0))
          :pattern ((set55 bv0))))))
(check-sat)

(declare-sort T8)
(declare-const v_15 T8)
(declare-sort T9)
(declare-const x_2 T9)
(declare-const t T9)
(declare-sort T10)
(declare-const x T10)
(declare-const sv_4108 T9)
(declare-const anc_1041I T10)
(declare-const anc_1042I T8)
(declare-fun Rhd9 (T8 T10) Bool)
(declare-fun Rmem8 (T8 T10) Bool)
(declare-fun Rob7 (T8 T10 T10) Bool)
(declare-fun Robs6 (T8 T10 T10) Bool)
(declare-fun Rroot5 (T9 T10) Bool)
(declare-fun Rtmem4 (T9 T10) Bool)
(declare-fun Rto3 (T9 T10 T10) Bool)
(declare-fun Rtos2 (T9 T10 T10) Bool)
(declare-fun Rpo1 (T9 T10 T10) Bool)
(declare-fun Rpos0 (T9 T10 T10) Bool)
(assert (= t x_2))
(declare-fun set56 (T10 T10) Bool)
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (set56 bv0 bv1) false) :pattern ((set56 bv0 bv1)))))
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (Rpos0 t bv0 bv1) (set56 bv0 bv1))
     :pattern ((Rpos0 t bv0 bv1))
     :pattern ((set56 bv0 bv1)))))
(declare-fun set57 (T10 T10) Bool)
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (set57 bv0 bv1) false) :pattern ((set57 bv0 bv1)))))
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (Rpo1 t bv0 bv1) (set57 bv0 bv1))
     :pattern ((Rpo1 t bv0 bv1))
     :pattern ((set57 bv0 bv1)))))
(declare-fun set58 (T10 T10) Bool)
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (set58 bv0 bv1) false) :pattern ((set58 bv0 bv1)))))
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (Rtos2 t bv0 bv1) (set58 bv0 bv1))
     :pattern ((Rtos2 t bv0 bv1))
     :pattern ((set58 bv0 bv1)))))
(declare-fun set59 (T10 T10) Bool)
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (set59 bv0 bv1) false) :pattern ((set59 bv0 bv1)))))
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (Rto3 t bv0 bv1) (set59 bv0 bv1))
     :pattern ((Rto3 t bv0 bv1))
     :pattern ((set59 bv0 bv1)))))
(declare-fun set60 (T10) Bool)
(assert (forall ((bv0 T10)) (! (= (set60 bv0) (and (= bv0 x))) :pattern ((set60 bv0)))))
(assert (forall ((bv0 T10))
  (! (= (Rtmem4 t bv0) (set60 bv0))
     :pattern ((Rtmem4 t bv0))
     :pattern ((set60 bv0)))))
(declare-fun set61 (T10) Bool)
(assert (forall ((bv0 T10)) (! (= (set61 bv0) (and (= bv0 x))) :pattern ((set61 bv0)))))
(assert (forall ((bv0 T10))
  (! (= (Rroot5 t bv0) (set61 bv0))
     :pattern ((Rroot5 t bv0))
     :pattern ((set61 bv0)))))
(declare-fun set62 (T10 T10) Bool)
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (set62 bv0 bv1) false) :pattern ((set62 bv0 bv1)))))
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (Robs6 anc_1042I bv0 bv1) (set62 bv0 bv1))
     :pattern ((Robs6 anc_1042I bv0 bv1))
     :pattern ((set62 bv0 bv1)))))
(declare-fun set63 (T10 T10) Bool)
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (set63 bv0 bv1) false) :pattern ((set63 bv0 bv1)))))
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (Rob7 anc_1042I bv0 bv1) (set63 bv0 bv1))
     :pattern ((Rob7 anc_1042I bv0 bv1))
     :pattern ((set63 bv0 bv1)))))
(declare-fun set64 (T10) Bool)
(assert (forall ((bv0 T10)) (! (= (set64 bv0) false) :pattern ((set64 bv0)))))
(assert (forall ((bv0 T10))
  (! (= (Rmem8 anc_1042I bv0) (set64 bv0))
     :pattern ((Rmem8 anc_1042I bv0))
     :pattern ((set64 bv0)))))
(declare-fun set65 (T10) Bool)
(assert (forall ((bv0 T10)) (! (= (set65 bv0) false) :pattern ((set65 bv0)))))
(assert (forall ((bv0 T10))
  (! (= (Rhd9 anc_1042I bv0) (set65 bv0))
     :pattern ((Rhd9 anc_1042I bv0))
     :pattern ((set65 bv0)))))
(assert (= anc_1041I x))
(declare-fun set66 (T10) Bool)
(assert (forall ((bv0 T10))
  (! (= (set66 bv0) (and (= bv0 anc_1041I))) :pattern ((set66 bv0)))))
(declare-fun set67 (T10 T10) Bool)
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (set67 bv0 bv1) (and (set66 bv0) (Rmem8 anc_1042I bv1)))
     :pattern ((set67 bv0 bv1))
     :pattern ((set66 bv0) (Rmem8 anc_1042I bv1)))))
(declare-fun set68 (T10 T10) Bool)
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (set68 bv0 bv1) (or (set67 bv0 bv1) (Robs6 anc_1042I bv0 bv1)))
     :pattern ((set68 bv0 bv1))
     :pattern ((set67 bv0 bv1))
     :pattern ((Robs6 anc_1042I bv0 bv1)))))
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (Robs6 v_15 bv0 bv1) (set68 bv0 bv1))
     :pattern ((Robs6 v_15 bv0 bv1))
     :pattern ((set68 bv0 bv1)))))
(declare-fun set69 (T10) Bool)
(assert (forall ((bv0 T10))
  (! (= (set69 bv0) (and (= bv0 anc_1041I))) :pattern ((set69 bv0)))))
(declare-fun set70 (T10 T10) Bool)
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (set70 bv0 bv1) (and (set69 bv0) (Rmem8 anc_1042I bv1)))
     :pattern ((set70 bv0 bv1))
     :pattern ((set69 bv0) (Rmem8 anc_1042I bv1)))))
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (Rob7 v_15 bv0 bv1) (set70 bv0 bv1))
     :pattern ((Rob7 v_15 bv0 bv1))
     :pattern ((set70 bv0 bv1)))))
(declare-fun set71 (T10) Bool)
(assert (forall ((bv0 T10))
  (! (= (set71 bv0) (and (= bv0 anc_1041I))) :pattern ((set71 bv0)))))
(declare-fun set72 (T10) Bool)
(assert (forall ((bv0 T10))
  (! (= (set72 bv0) (or (set71 bv0) (Rmem8 anc_1042I bv0)))
     :pattern ((set72 bv0))
     :pattern ((set71 bv0))
     :pattern ((Rmem8 anc_1042I bv0)))))
(assert (forall ((bv0 T10))
  (! (= (Rmem8 v_15 bv0) (set72 bv0))
     :pattern ((Rmem8 v_15 bv0))
     :pattern ((set72 bv0)))))
(declare-fun set73 (T10) Bool)
(assert (forall ((bv0 T10))
  (! (= (set73 bv0) (and (= bv0 anc_1041I))) :pattern ((set73 bv0)))))
(assert (forall ((bv0 T10))
  (! (= (Rhd9 v_15 bv0) (set73 bv0))
     :pattern ((Rhd9 v_15 bv0))
     :pattern ((set73 bv0)))))
(assert (not (forall ((bv1 T10) (bv0 T10))
       (! (= (Robs6 v_15 bv0 bv1) (Rtos2 x_2 bv0 bv1))
          :pattern ((Robs6 v_15 bv0 bv1))
          :pattern ((Rtos2 x_2 bv0 bv1))))))
(check-sat)

(declare-sort T11)
(declare-const v_15 T11)
(declare-sort T12)
(declare-const x_2 T12)
(declare-const t T12)
(declare-sort T13)
(declare-const x T13)
(declare-const sv_4108 T12)
(declare-const anc_1041I T13)
(declare-const anc_1042I T11)
(declare-fun Rhd9 (T11 T13) Bool)
(declare-fun Rmem8 (T11 T13) Bool)
(declare-fun Rob7 (T11 T13 T13) Bool)
(declare-fun Robs6 (T11 T13 T13) Bool)
(declare-fun Rroot5 (T12 T13) Bool)
(declare-fun Rtmem4 (T12 T13) Bool)
(declare-fun Rto3 (T12 T13 T13) Bool)
(declare-fun Rtos2 (T12 T13 T13) Bool)
(declare-fun Rpo1 (T12 T13 T13) Bool)
(declare-fun Rpos0 (T12 T13 T13) Bool)
(assert (= t x_2))
(declare-fun set74 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set74 bv0 bv1) false) :pattern ((set74 bv0 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Rpos0 t bv0 bv1) (set74 bv0 bv1))
     :pattern ((Rpos0 t bv0 bv1))
     :pattern ((set74 bv0 bv1)))))
(declare-fun set75 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set75 bv0 bv1) false) :pattern ((set75 bv0 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Rpo1 t bv0 bv1) (set75 bv0 bv1))
     :pattern ((Rpo1 t bv0 bv1))
     :pattern ((set75 bv0 bv1)))))
(declare-fun set76 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set76 bv0 bv1) false) :pattern ((set76 bv0 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Rtos2 t bv0 bv1) (set76 bv0 bv1))
     :pattern ((Rtos2 t bv0 bv1))
     :pattern ((set76 bv0 bv1)))))
(declare-fun set77 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set77 bv0 bv1) false) :pattern ((set77 bv0 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Rto3 t bv0 bv1) (set77 bv0 bv1))
     :pattern ((Rto3 t bv0 bv1))
     :pattern ((set77 bv0 bv1)))))
(declare-fun set78 (T13) Bool)
(assert (forall ((bv0 T13)) (! (= (set78 bv0) (and (= bv0 x))) :pattern ((set78 bv0)))))
(assert (forall ((bv0 T13))
  (! (= (Rtmem4 t bv0) (set78 bv0))
     :pattern ((Rtmem4 t bv0))
     :pattern ((set78 bv0)))))
(declare-fun set79 (T13) Bool)
(assert (forall ((bv0 T13)) (! (= (set79 bv0) (and (= bv0 x))) :pattern ((set79 bv0)))))
(assert (forall ((bv0 T13))
  (! (= (Rroot5 t bv0) (set79 bv0))
     :pattern ((Rroot5 t bv0))
     :pattern ((set79 bv0)))))
(declare-fun set80 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set80 bv0 bv1) false) :pattern ((set80 bv0 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Robs6 anc_1042I bv0 bv1) (set80 bv0 bv1))
     :pattern ((Robs6 anc_1042I bv0 bv1))
     :pattern ((set80 bv0 bv1)))))
(declare-fun set81 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set81 bv0 bv1) false) :pattern ((set81 bv0 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Rob7 anc_1042I bv0 bv1) (set81 bv0 bv1))
     :pattern ((Rob7 anc_1042I bv0 bv1))
     :pattern ((set81 bv0 bv1)))))
(declare-fun set82 (T13) Bool)
(assert (forall ((bv0 T13)) (! (= (set82 bv0) false) :pattern ((set82 bv0)))))
(assert (forall ((bv0 T13))
  (! (= (Rmem8 anc_1042I bv0) (set82 bv0))
     :pattern ((Rmem8 anc_1042I bv0))
     :pattern ((set82 bv0)))))
(declare-fun set83 (T13) Bool)
(assert (forall ((bv0 T13)) (! (= (set83 bv0) false) :pattern ((set83 bv0)))))
(assert (forall ((bv0 T13))
  (! (= (Rhd9 anc_1042I bv0) (set83 bv0))
     :pattern ((Rhd9 anc_1042I bv0))
     :pattern ((set83 bv0)))))
(assert (= anc_1041I x))
(declare-fun set84 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set84 bv0) (and (= bv0 anc_1041I))) :pattern ((set84 bv0)))))
(declare-fun set85 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set85 bv0 bv1) (and (set84 bv0) (Rmem8 anc_1042I bv1)))
     :pattern ((set85 bv0 bv1))
     :pattern ((set84 bv0) (Rmem8 anc_1042I bv1)))))
(declare-fun set86 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set86 bv0 bv1) (or (set85 bv0 bv1) (Robs6 anc_1042I bv0 bv1)))
     :pattern ((set86 bv0 bv1))
     :pattern ((set85 bv0 bv1))
     :pattern ((Robs6 anc_1042I bv0 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Robs6 v_15 bv0 bv1) (set86 bv0 bv1))
     :pattern ((Robs6 v_15 bv0 bv1))
     :pattern ((set86 bv0 bv1)))))
(declare-fun set87 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set87 bv0) (and (= bv0 anc_1041I))) :pattern ((set87 bv0)))))
(declare-fun set88 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set88 bv0 bv1) (and (set87 bv0) (Rmem8 anc_1042I bv1)))
     :pattern ((set88 bv0 bv1))
     :pattern ((set87 bv0) (Rmem8 anc_1042I bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Rob7 v_15 bv0 bv1) (set88 bv0 bv1))
     :pattern ((Rob7 v_15 bv0 bv1))
     :pattern ((set88 bv0 bv1)))))
(declare-fun set89 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set89 bv0) (and (= bv0 anc_1041I))) :pattern ((set89 bv0)))))
(declare-fun set90 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set90 bv0) (or (set89 bv0) (Rmem8 anc_1042I bv0)))
     :pattern ((set90 bv0))
     :pattern ((set89 bv0))
     :pattern ((Rmem8 anc_1042I bv0)))))
(assert (forall ((bv0 T13))
  (! (= (Rmem8 v_15 bv0) (set90 bv0))
     :pattern ((Rmem8 v_15 bv0))
     :pattern ((set90 bv0)))))
(declare-fun set91 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set91 bv0) (and (= bv0 anc_1041I))) :pattern ((set91 bv0)))))
(assert (forall ((bv0 T13))
  (! (= (Rhd9 v_15 bv0) (set91 bv0))
     :pattern ((Rhd9 v_15 bv0))
     :pattern ((set91 bv0)))))
(assert (not (forall ((bv0 T13))
       (! (= (Rmem8 v_15 bv0) (Rtmem4 x_2 bv0))
          :pattern ((Rmem8 v_15 bv0))
          :pattern ((Rtmem4 x_2 bv0))))))
(check-sat)

(declare-sort T14)
(declare-const v_15 T14)
(declare-sort T15)
(declare-const x_2 T15)
(declare-const t T15)
(declare-const l T15)
(declare-sort T16)
(declare-const x T16)
(declare-const r T15)
(declare-const sv_4112 T15)
(declare-const anc_1046I T14)
(declare-const anc_1049I T16)
(declare-const anc_1050I T14)
(declare-const anc_1051I T14)
(declare-const anc_1052I T14)
(declare-const anc_1055I T14)
(declare-fun Rhd9 (T14 T16) Bool)
(declare-fun Rob8 (T14 T16 T16) Bool)
(declare-fun Rmem7 (T14 T16) Bool)
(declare-fun Robs6 (T14 T16 T16) Bool)
(declare-fun Rroot5 (T15 T16) Bool)
(declare-fun Rto4 (T15 T16 T16) Bool)
(declare-fun Rtos3 (T15 T16 T16) Bool)
(declare-fun Rpo2 (T15 T16 T16) Bool)
(declare-fun Rtmem1 (T15 T16) Bool)
(declare-fun Rpos0 (T15 T16 T16) Bool)
(assert (= t x_2))
(declare-fun set92 (T16) Bool)
(assert (forall ((bv0 T16)) (! (= (set92 bv0) (and (= bv0 x))) :pattern ((set92 bv0)))))
(declare-fun set93 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set93 bv0 bv1) (and (Rtmem1 l bv0) (set92 bv1)))
     :pattern ((set93 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (set92 bv1)))))
(declare-fun set94 (T16) Bool)
(assert (forall ((bv0 T16)) (! (= (set94 bv0) (and (= bv0 x))) :pattern ((set94 bv0)))))
(declare-fun set95 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set95 bv0 bv1) (and (Rtmem1 r bv0) (set94 bv1)))
     :pattern ((set95 bv0 bv1))
     :pattern ((Rtmem1 r bv0) (set94 bv1)))))
(declare-fun set96 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set96 bv0 bv1) (and (Rtmem1 l bv0) (Rtmem1 r bv1)))
     :pattern ((set96 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (Rtmem1 r bv1)))))
(declare-fun set97 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set97 bv0 bv1) (or (set95 bv0 bv1) (set96 bv0 bv1)))
     :pattern ((set97 bv0 bv1))
     :pattern ((set95 bv0 bv1))
     :pattern ((set96 bv0 bv1)))))
(declare-fun set98 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set98 bv0 bv1) (or (set93 bv0 bv1) (set97 bv0 bv1)))
     :pattern ((set98 bv0 bv1))
     :pattern ((set93 bv0 bv1))
     :pattern ((set97 bv0 bv1)))))
(declare-fun set99 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set99 bv0 bv1) (or (Rpos0 r bv0 bv1) (Rpos0 l bv0 bv1)))
     :pattern ((set99 bv0 bv1))
     :pattern ((Rpos0 r bv0 bv1))
     :pattern ((Rpos0 l bv0 bv1)))))
(declare-fun set100 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set100 bv0 bv1) (or (set98 bv0 bv1) (set99 bv0 bv1)))
     :pattern ((set100 bv0 bv1))
     :pattern ((set98 bv0 bv1))
     :pattern ((set99 bv0 bv1)))))
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (Rpos0 t bv0 bv1) (set100 bv0 bv1))
     :pattern ((Rpos0 t bv0 bv1))
     :pattern ((set100 bv0 bv1)))))
(declare-fun set101 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set101 bv0) (and (= bv0 x))) :pattern ((set101 bv0)))))
(declare-fun set102 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set102 bv0 bv1) (and (Rtmem1 l bv0) (set101 bv1)))
     :pattern ((set102 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (set101 bv1)))))
(declare-fun set103 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set103 bv0) (and (= bv0 x))) :pattern ((set103 bv0)))))
(declare-fun set104 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set104 bv0 bv1) (and (Rtmem1 r bv0) (set103 bv1)))
     :pattern ((set104 bv0 bv1))
     :pattern ((Rtmem1 r bv0) (set103 bv1)))))
(declare-fun set105 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set105 bv0 bv1) (and (Rtmem1 l bv0) (Rtmem1 r bv1)))
     :pattern ((set105 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (Rtmem1 r bv1)))))
(declare-fun set106 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set106 bv0 bv1) (or (set104 bv0 bv1) (set105 bv0 bv1)))
     :pattern ((set106 bv0 bv1))
     :pattern ((set104 bv0 bv1))
     :pattern ((set105 bv0 bv1)))))
(declare-fun set107 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set107 bv0 bv1) (or (set102 bv0 bv1) (set106 bv0 bv1)))
     :pattern ((set107 bv0 bv1))
     :pattern ((set102 bv0 bv1))
     :pattern ((set106 bv0 bv1)))))
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (Rpo2 t bv0 bv1) (set107 bv0 bv1))
     :pattern ((Rpo2 t bv0 bv1))
     :pattern ((set107 bv0 bv1)))))
(declare-fun set108 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set108 bv0) (and (= bv0 x))) :pattern ((set108 bv0)))))
(declare-fun set109 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set109 bv0 bv1) (and (Rtmem1 l bv0) (set108 bv1)))
     :pattern ((set109 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (set108 bv1)))))
(declare-fun set110 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set110 bv0) (and (= bv0 x))) :pattern ((set110 bv0)))))
(declare-fun set111 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set111 bv0 bv1) (and (set110 bv0) (Rtmem1 r bv1)))
     :pattern ((set111 bv0 bv1))
     :pattern ((set110 bv0) (Rtmem1 r bv1)))))
(declare-fun set112 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set112 bv0 bv1) (and (Rtmem1 l bv0) (Rtmem1 r bv1)))
     :pattern ((set112 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (Rtmem1 r bv1)))))
(declare-fun set113 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set113 bv0 bv1) (or (set111 bv0 bv1) (set112 bv0 bv1)))
     :pattern ((set113 bv0 bv1))
     :pattern ((set111 bv0 bv1))
     :pattern ((set112 bv0 bv1)))))
(declare-fun set114 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set114 bv0 bv1) (or (set109 bv0 bv1) (set113 bv0 bv1)))
     :pattern ((set114 bv0 bv1))
     :pattern ((set109 bv0 bv1))
     :pattern ((set113 bv0 bv1)))))
(declare-fun set115 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set115 bv0 bv1) (or (Rtos3 r bv0 bv1) (Rtos3 l bv0 bv1)))
     :pattern ((set115 bv0 bv1))
     :pattern ((Rtos3 r bv0 bv1))
     :pattern ((Rtos3 l bv0 bv1)))))
(declare-fun set116 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set116 bv0 bv1) (or (set114 bv0 bv1) (set115 bv0 bv1)))
     :pattern ((set116 bv0 bv1))
     :pattern ((set114 bv0 bv1))
     :pattern ((set115 bv0 bv1)))))
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (Rtos3 t bv0 bv1) (set116 bv0 bv1))
     :pattern ((Rtos3 t bv0 bv1))
     :pattern ((set116 bv0 bv1)))))
(declare-fun set117 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set117 bv0) (and (= bv0 x))) :pattern ((set117 bv0)))))
(declare-fun set118 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set118 bv0 bv1) (and (Rtmem1 l bv0) (set117 bv1)))
     :pattern ((set118 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (set117 bv1)))))
(declare-fun set119 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set119 bv0) (and (= bv0 x))) :pattern ((set119 bv0)))))
(declare-fun set120 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set120 bv0 bv1) (and (set119 bv0) (Rtmem1 r bv1)))
     :pattern ((set120 bv0 bv1))
     :pattern ((set119 bv0) (Rtmem1 r bv1)))))
(declare-fun set121 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set121 bv0 bv1) (and (Rtmem1 l bv0) (Rtmem1 r bv1)))
     :pattern ((set121 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (Rtmem1 r bv1)))))
(declare-fun set122 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set122 bv0 bv1) (or (set120 bv0 bv1) (set121 bv0 bv1)))
     :pattern ((set122 bv0 bv1))
     :pattern ((set120 bv0 bv1))
     :pattern ((set121 bv0 bv1)))))
(declare-fun set123 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set123 bv0 bv1) (or (set118 bv0 bv1) (set122 bv0 bv1)))
     :pattern ((set123 bv0 bv1))
     :pattern ((set118 bv0 bv1))
     :pattern ((set122 bv0 bv1)))))
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (Rto4 t bv0 bv1) (set123 bv0 bv1))
     :pattern ((Rto4 t bv0 bv1))
     :pattern ((set123 bv0 bv1)))))
(declare-fun set124 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set124 bv0) (and (= bv0 x))) :pattern ((set124 bv0)))))
(declare-fun set125 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set125 bv0) (or (Rtmem1 r bv0) (Rtmem1 l bv0)))
     :pattern ((set125 bv0))
     :pattern ((Rtmem1 r bv0))
     :pattern ((Rtmem1 l bv0)))))
(declare-fun set126 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set126 bv0) (or (set124 bv0) (set125 bv0)))
     :pattern ((set126 bv0))
     :pattern ((set124 bv0))
     :pattern ((set125 bv0)))))
(assert (forall ((bv0 T16))
  (! (= (Rtmem1 t bv0) (set126 bv0))
     :pattern ((Rtmem1 t bv0))
     :pattern ((set126 bv0)))))
(declare-fun set127 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set127 bv0) (and (= bv0 x))) :pattern ((set127 bv0)))))
(assert (forall ((bv0 T16))
  (! (= (Rroot5 t bv0) (set127 bv0))
     :pattern ((Rroot5 t bv0))
     :pattern ((set127 bv0)))))
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (Robs6 anc_1055I bv0 bv1) (Rtos3 r bv0 bv1))
     :pattern ((Robs6 anc_1055I bv0 bv1))
     :pattern ((Rtos3 r bv0 bv1)))))
(assert (forall ((bv0 T16))
  (! (= (Rmem7 anc_1055I bv0) (Rtmem1 r bv0))
     :pattern ((Rmem7 anc_1055I bv0))
     :pattern ((Rtmem1 r bv0)))))
(declare-fun set128 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set128 bv0 bv1) (and (Rmem7 anc_1046I bv0) (Rmem7 anc_1051I bv1)))
     :pattern ((set128 bv0 bv1))
     :pattern ((Rmem7 anc_1046I bv0) (Rmem7 anc_1051I bv1)))))
(declare-fun set129 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set129 bv0 bv1) (or (Robs6 anc_1051I bv0 bv1) (set128 bv0 bv1)))
     :pattern ((set129 bv0 bv1))
     :pattern ((Robs6 anc_1051I bv0 bv1))
     :pattern ((set128 bv0 bv1)))))
(declare-fun set130 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set130 bv0 bv1) (or (Robs6 anc_1046I bv0 bv1) (set129 bv0 bv1)))
     :pattern ((set130 bv0 bv1))
     :pattern ((Robs6 anc_1046I bv0 bv1))
     :pattern ((set129 bv0 bv1)))))
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (Robs6 anc_1052I bv0 bv1) (set130 bv0 bv1))
     :pattern ((Robs6 anc_1052I bv0 bv1))
     :pattern ((set130 bv0 bv1)))))
(declare-fun set131 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set131 bv0) (or (Rmem7 anc_1046I bv0) (Rmem7 anc_1051I bv0)))
     :pattern ((set131 bv0))
     :pattern ((Rmem7 anc_1046I bv0))
     :pattern ((Rmem7 anc_1051I bv0)))))
(assert (forall ((bv0 T16))
  (! (= (Rmem7 anc_1052I bv0) (set131 bv0))
     :pattern ((Rmem7 anc_1052I bv0))
     :pattern ((set131 bv0)))))
(declare-fun set132 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set132 bv0) (and (= bv0 anc_1049I))) :pattern ((set132 bv0)))))
(declare-fun set133 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set133 bv0 bv1) (and (set132 bv0) (Rmem7 anc_1050I bv1)))
     :pattern ((set133 bv0 bv1))
     :pattern ((set132 bv0) (Rmem7 anc_1050I bv1)))))
(declare-fun set134 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set134 bv0 bv1) (or (set133 bv0 bv1) (Robs6 anc_1050I bv0 bv1)))
     :pattern ((set134 bv0 bv1))
     :pattern ((set133 bv0 bv1))
     :pattern ((Robs6 anc_1050I bv0 bv1)))))
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (Robs6 anc_1051I bv0 bv1) (set134 bv0 bv1))
     :pattern ((Robs6 anc_1051I bv0 bv1))
     :pattern ((set134 bv0 bv1)))))
(declare-fun set135 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set135 bv0) (and (= bv0 anc_1049I))) :pattern ((set135 bv0)))))
(declare-fun set136 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set136 bv0 bv1) (and (set135 bv0) (Rmem7 anc_1050I bv1)))
     :pattern ((set136 bv0 bv1))
     :pattern ((set135 bv0) (Rmem7 anc_1050I bv1)))))
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (Rob8 anc_1051I bv0 bv1) (set136 bv0 bv1))
     :pattern ((Rob8 anc_1051I bv0 bv1))
     :pattern ((set136 bv0 bv1)))))
(declare-fun set137 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set137 bv0) (and (= bv0 anc_1049I))) :pattern ((set137 bv0)))))
(declare-fun set138 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set138 bv0) (or (set137 bv0) (Rmem7 anc_1050I bv0)))
     :pattern ((set138 bv0))
     :pattern ((set137 bv0))
     :pattern ((Rmem7 anc_1050I bv0)))))
(assert (forall ((bv0 T16))
  (! (= (Rmem7 anc_1051I bv0) (set138 bv0))
     :pattern ((Rmem7 anc_1051I bv0))
     :pattern ((set138 bv0)))))
(declare-fun set139 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set139 bv0) (and (= bv0 anc_1049I))) :pattern ((set139 bv0)))))
(assert (forall ((bv0 T16))
  (! (= (Rhd9 anc_1051I bv0) (set139 bv0))
     :pattern ((Rhd9 anc_1051I bv0))
     :pattern ((set139 bv0)))))
(declare-fun set140 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set140 bv0 bv1) false) :pattern ((set140 bv0 bv1)))))
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (Robs6 anc_1050I bv0 bv1) (set140 bv0 bv1))
     :pattern ((Robs6 anc_1050I bv0 bv1))
     :pattern ((set140 bv0 bv1)))))
(declare-fun set141 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set141 bv0 bv1) false) :pattern ((set141 bv0 bv1)))))
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (Rob8 anc_1050I bv0 bv1) (set141 bv0 bv1))
     :pattern ((Rob8 anc_1050I bv0 bv1))
     :pattern ((set141 bv0 bv1)))))
(declare-fun set142 (T16) Bool)
(assert (forall ((bv0 T16)) (! (= (set142 bv0) false) :pattern ((set142 bv0)))))
(assert (forall ((bv0 T16))
  (! (= (Rmem7 anc_1050I bv0) (set142 bv0))
     :pattern ((Rmem7 anc_1050I bv0))
     :pattern ((set142 bv0)))))
(declare-fun set143 (T16) Bool)
(assert (forall ((bv0 T16)) (! (= (set143 bv0) false) :pattern ((set143 bv0)))))
(assert (forall ((bv0 T16))
  (! (= (Rhd9 anc_1050I bv0) (set143 bv0))
     :pattern ((Rhd9 anc_1050I bv0))
     :pattern ((set143 bv0)))))
(assert (= anc_1049I x))
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (Robs6 anc_1046I bv0 bv1) (Rtos3 l bv0 bv1))
     :pattern ((Robs6 anc_1046I bv0 bv1))
     :pattern ((Rtos3 l bv0 bv1)))))
(assert (forall ((bv0 T16))
  (! (= (Rmem7 anc_1046I bv0) (Rtmem1 l bv0))
     :pattern ((Rmem7 anc_1046I bv0))
     :pattern ((Rtmem1 l bv0)))))
(declare-fun set144 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set144 bv0 bv1) (and (Rmem7 anc_1052I bv0) (Rmem7 anc_1055I bv1)))
     :pattern ((set144 bv0 bv1))
     :pattern ((Rmem7 anc_1052I bv0) (Rmem7 anc_1055I bv1)))))
(declare-fun set145 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set145 bv0 bv1) (or (Robs6 anc_1055I bv0 bv1) (set144 bv0 bv1)))
     :pattern ((set145 bv0 bv1))
     :pattern ((Robs6 anc_1055I bv0 bv1))
     :pattern ((set144 bv0 bv1)))))
(declare-fun set146 (T16 T16) Bool)
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (set146 bv0 bv1) (or (Robs6 anc_1052I bv0 bv1) (set145 bv0 bv1)))
     :pattern ((set146 bv0 bv1))
     :pattern ((Robs6 anc_1052I bv0 bv1))
     :pattern ((set145 bv0 bv1)))))
(assert (forall ((bv1 T16) (bv0 T16))
  (! (= (Robs6 v_15 bv0 bv1) (set146 bv0 bv1))
     :pattern ((Robs6 v_15 bv0 bv1))
     :pattern ((set146 bv0 bv1)))))
(declare-fun set147 (T16) Bool)
(assert (forall ((bv0 T16))
  (! (= (set147 bv0) (or (Rmem7 anc_1052I bv0) (Rmem7 anc_1055I bv0)))
     :pattern ((set147 bv0))
     :pattern ((Rmem7 anc_1052I bv0))
     :pattern ((Rmem7 anc_1055I bv0)))))
(assert (forall ((bv0 T16))
  (! (= (Rmem7 v_15 bv0) (set147 bv0))
     :pattern ((Rmem7 v_15 bv0))
     :pattern ((set147 bv0)))))
(assert (not (forall ((bv1 T16) (bv0 T16))
       (! (= (Robs6 v_15 bv0 bv1) (Rtos3 x_2 bv0 bv1))
          :pattern ((Robs6 v_15 bv0 bv1))
          :pattern ((Rtos3 x_2 bv0 bv1))))))
(check-sat)

(declare-sort T17)
(declare-const v_15 T17)
(declare-sort T18)
(declare-const x_2 T18)
(declare-const t T18)
(declare-const l T18)
(declare-sort T19)
(declare-const x T19)
(declare-const r T18)
(declare-const sv_4112 T18)
(declare-const anc_1046I T17)
(declare-const anc_1049I T19)
(declare-const anc_1050I T17)
(declare-const anc_1051I T17)
(declare-const anc_1052I T17)
(declare-const anc_1055I T17)
(declare-fun Rhd9 (T17 T19) Bool)
(declare-fun Rob8 (T17 T19 T19) Bool)
(declare-fun Rmem7 (T17 T19) Bool)
(declare-fun Robs6 (T17 T19 T19) Bool)
(declare-fun Rroot5 (T18 T19) Bool)
(declare-fun Rto4 (T18 T19 T19) Bool)
(declare-fun Rtos3 (T18 T19 T19) Bool)
(declare-fun Rpo2 (T18 T19 T19) Bool)
(declare-fun Rtmem1 (T18 T19) Bool)
(declare-fun Rpos0 (T18 T19 T19) Bool)
(assert (= t x_2))
(declare-fun set148 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set148 bv0) (and (= bv0 x))) :pattern ((set148 bv0)))))
(declare-fun set149 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set149 bv0 bv1) (and (Rtmem1 l bv0) (set148 bv1)))
     :pattern ((set149 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (set148 bv1)))))
(declare-fun set150 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set150 bv0) (and (= bv0 x))) :pattern ((set150 bv0)))))
(declare-fun set151 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set151 bv0 bv1) (and (Rtmem1 r bv0) (set150 bv1)))
     :pattern ((set151 bv0 bv1))
     :pattern ((Rtmem1 r bv0) (set150 bv1)))))
(declare-fun set152 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set152 bv0 bv1) (and (Rtmem1 l bv0) (Rtmem1 r bv1)))
     :pattern ((set152 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (Rtmem1 r bv1)))))
(declare-fun set153 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set153 bv0 bv1) (or (set151 bv0 bv1) (set152 bv0 bv1)))
     :pattern ((set153 bv0 bv1))
     :pattern ((set151 bv0 bv1))
     :pattern ((set152 bv0 bv1)))))
(declare-fun set154 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set154 bv0 bv1) (or (set149 bv0 bv1) (set153 bv0 bv1)))
     :pattern ((set154 bv0 bv1))
     :pattern ((set149 bv0 bv1))
     :pattern ((set153 bv0 bv1)))))
(declare-fun set155 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set155 bv0 bv1) (or (Rpos0 r bv0 bv1) (Rpos0 l bv0 bv1)))
     :pattern ((set155 bv0 bv1))
     :pattern ((Rpos0 r bv0 bv1))
     :pattern ((Rpos0 l bv0 bv1)))))
(declare-fun set156 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set156 bv0 bv1) (or (set154 bv0 bv1) (set155 bv0 bv1)))
     :pattern ((set156 bv0 bv1))
     :pattern ((set154 bv0 bv1))
     :pattern ((set155 bv0 bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Rpos0 t bv0 bv1) (set156 bv0 bv1))
     :pattern ((Rpos0 t bv0 bv1))
     :pattern ((set156 bv0 bv1)))))
(declare-fun set157 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set157 bv0) (and (= bv0 x))) :pattern ((set157 bv0)))))
(declare-fun set158 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set158 bv0 bv1) (and (Rtmem1 l bv0) (set157 bv1)))
     :pattern ((set158 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (set157 bv1)))))
(declare-fun set159 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set159 bv0) (and (= bv0 x))) :pattern ((set159 bv0)))))
(declare-fun set160 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set160 bv0 bv1) (and (Rtmem1 r bv0) (set159 bv1)))
     :pattern ((set160 bv0 bv1))
     :pattern ((Rtmem1 r bv0) (set159 bv1)))))
(declare-fun set161 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set161 bv0 bv1) (and (Rtmem1 l bv0) (Rtmem1 r bv1)))
     :pattern ((set161 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (Rtmem1 r bv1)))))
(declare-fun set162 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set162 bv0 bv1) (or (set160 bv0 bv1) (set161 bv0 bv1)))
     :pattern ((set162 bv0 bv1))
     :pattern ((set160 bv0 bv1))
     :pattern ((set161 bv0 bv1)))))
(declare-fun set163 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set163 bv0 bv1) (or (set158 bv0 bv1) (set162 bv0 bv1)))
     :pattern ((set163 bv0 bv1))
     :pattern ((set158 bv0 bv1))
     :pattern ((set162 bv0 bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Rpo2 t bv0 bv1) (set163 bv0 bv1))
     :pattern ((Rpo2 t bv0 bv1))
     :pattern ((set163 bv0 bv1)))))
(declare-fun set164 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set164 bv0) (and (= bv0 x))) :pattern ((set164 bv0)))))
(declare-fun set165 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set165 bv0 bv1) (and (Rtmem1 l bv0) (set164 bv1)))
     :pattern ((set165 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (set164 bv1)))))
(declare-fun set166 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set166 bv0) (and (= bv0 x))) :pattern ((set166 bv0)))))
(declare-fun set167 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set167 bv0 bv1) (and (set166 bv0) (Rtmem1 r bv1)))
     :pattern ((set167 bv0 bv1))
     :pattern ((set166 bv0) (Rtmem1 r bv1)))))
(declare-fun set168 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set168 bv0 bv1) (and (Rtmem1 l bv0) (Rtmem1 r bv1)))
     :pattern ((set168 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (Rtmem1 r bv1)))))
(declare-fun set169 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set169 bv0 bv1) (or (set167 bv0 bv1) (set168 bv0 bv1)))
     :pattern ((set169 bv0 bv1))
     :pattern ((set167 bv0 bv1))
     :pattern ((set168 bv0 bv1)))))
(declare-fun set170 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set170 bv0 bv1) (or (set165 bv0 bv1) (set169 bv0 bv1)))
     :pattern ((set170 bv0 bv1))
     :pattern ((set165 bv0 bv1))
     :pattern ((set169 bv0 bv1)))))
(declare-fun set171 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set171 bv0 bv1) (or (Rtos3 r bv0 bv1) (Rtos3 l bv0 bv1)))
     :pattern ((set171 bv0 bv1))
     :pattern ((Rtos3 r bv0 bv1))
     :pattern ((Rtos3 l bv0 bv1)))))
(declare-fun set172 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set172 bv0 bv1) (or (set170 bv0 bv1) (set171 bv0 bv1)))
     :pattern ((set172 bv0 bv1))
     :pattern ((set170 bv0 bv1))
     :pattern ((set171 bv0 bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Rtos3 t bv0 bv1) (set172 bv0 bv1))
     :pattern ((Rtos3 t bv0 bv1))
     :pattern ((set172 bv0 bv1)))))
(declare-fun set173 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set173 bv0) (and (= bv0 x))) :pattern ((set173 bv0)))))
(declare-fun set174 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set174 bv0 bv1) (and (Rtmem1 l bv0) (set173 bv1)))
     :pattern ((set174 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (set173 bv1)))))
(declare-fun set175 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set175 bv0) (and (= bv0 x))) :pattern ((set175 bv0)))))
(declare-fun set176 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set176 bv0 bv1) (and (set175 bv0) (Rtmem1 r bv1)))
     :pattern ((set176 bv0 bv1))
     :pattern ((set175 bv0) (Rtmem1 r bv1)))))
(declare-fun set177 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set177 bv0 bv1) (and (Rtmem1 l bv0) (Rtmem1 r bv1)))
     :pattern ((set177 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (Rtmem1 r bv1)))))
(declare-fun set178 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set178 bv0 bv1) (or (set176 bv0 bv1) (set177 bv0 bv1)))
     :pattern ((set178 bv0 bv1))
     :pattern ((set176 bv0 bv1))
     :pattern ((set177 bv0 bv1)))))
(declare-fun set179 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set179 bv0 bv1) (or (set174 bv0 bv1) (set178 bv0 bv1)))
     :pattern ((set179 bv0 bv1))
     :pattern ((set174 bv0 bv1))
     :pattern ((set178 bv0 bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Rto4 t bv0 bv1) (set179 bv0 bv1))
     :pattern ((Rto4 t bv0 bv1))
     :pattern ((set179 bv0 bv1)))))
(declare-fun set180 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set180 bv0) (and (= bv0 x))) :pattern ((set180 bv0)))))
(declare-fun set181 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set181 bv0) (or (Rtmem1 r bv0) (Rtmem1 l bv0)))
     :pattern ((set181 bv0))
     :pattern ((Rtmem1 r bv0))
     :pattern ((Rtmem1 l bv0)))))
(declare-fun set182 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set182 bv0) (or (set180 bv0) (set181 bv0)))
     :pattern ((set182 bv0))
     :pattern ((set180 bv0))
     :pattern ((set181 bv0)))))
(assert (forall ((bv0 T19))
  (! (= (Rtmem1 t bv0) (set182 bv0))
     :pattern ((Rtmem1 t bv0))
     :pattern ((set182 bv0)))))
(declare-fun set183 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set183 bv0) (and (= bv0 x))) :pattern ((set183 bv0)))))
(assert (forall ((bv0 T19))
  (! (= (Rroot5 t bv0) (set183 bv0))
     :pattern ((Rroot5 t bv0))
     :pattern ((set183 bv0)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Robs6 anc_1055I bv0 bv1) (Rtos3 r bv0 bv1))
     :pattern ((Robs6 anc_1055I bv0 bv1))
     :pattern ((Rtos3 r bv0 bv1)))))
(assert (forall ((bv0 T19))
  (! (= (Rmem7 anc_1055I bv0) (Rtmem1 r bv0))
     :pattern ((Rmem7 anc_1055I bv0))
     :pattern ((Rtmem1 r bv0)))))
(declare-fun set184 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set184 bv0 bv1) (and (Rmem7 anc_1046I bv0) (Rmem7 anc_1051I bv1)))
     :pattern ((set184 bv0 bv1))
     :pattern ((Rmem7 anc_1046I bv0) (Rmem7 anc_1051I bv1)))))
(declare-fun set185 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set185 bv0 bv1) (or (Robs6 anc_1051I bv0 bv1) (set184 bv0 bv1)))
     :pattern ((set185 bv0 bv1))
     :pattern ((Robs6 anc_1051I bv0 bv1))
     :pattern ((set184 bv0 bv1)))))
(declare-fun set186 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set186 bv0 bv1) (or (Robs6 anc_1046I bv0 bv1) (set185 bv0 bv1)))
     :pattern ((set186 bv0 bv1))
     :pattern ((Robs6 anc_1046I bv0 bv1))
     :pattern ((set185 bv0 bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Robs6 anc_1052I bv0 bv1) (set186 bv0 bv1))
     :pattern ((Robs6 anc_1052I bv0 bv1))
     :pattern ((set186 bv0 bv1)))))
(declare-fun set187 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set187 bv0) (or (Rmem7 anc_1046I bv0) (Rmem7 anc_1051I bv0)))
     :pattern ((set187 bv0))
     :pattern ((Rmem7 anc_1046I bv0))
     :pattern ((Rmem7 anc_1051I bv0)))))
(assert (forall ((bv0 T19))
  (! (= (Rmem7 anc_1052I bv0) (set187 bv0))
     :pattern ((Rmem7 anc_1052I bv0))
     :pattern ((set187 bv0)))))
(declare-fun set188 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set188 bv0) (and (= bv0 anc_1049I))) :pattern ((set188 bv0)))))
(declare-fun set189 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set189 bv0 bv1) (and (set188 bv0) (Rmem7 anc_1050I bv1)))
     :pattern ((set189 bv0 bv1))
     :pattern ((set188 bv0) (Rmem7 anc_1050I bv1)))))
(declare-fun set190 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set190 bv0 bv1) (or (set189 bv0 bv1) (Robs6 anc_1050I bv0 bv1)))
     :pattern ((set190 bv0 bv1))
     :pattern ((set189 bv0 bv1))
     :pattern ((Robs6 anc_1050I bv0 bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Robs6 anc_1051I bv0 bv1) (set190 bv0 bv1))
     :pattern ((Robs6 anc_1051I bv0 bv1))
     :pattern ((set190 bv0 bv1)))))
(declare-fun set191 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set191 bv0) (and (= bv0 anc_1049I))) :pattern ((set191 bv0)))))
(declare-fun set192 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set192 bv0 bv1) (and (set191 bv0) (Rmem7 anc_1050I bv1)))
     :pattern ((set192 bv0 bv1))
     :pattern ((set191 bv0) (Rmem7 anc_1050I bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Rob8 anc_1051I bv0 bv1) (set192 bv0 bv1))
     :pattern ((Rob8 anc_1051I bv0 bv1))
     :pattern ((set192 bv0 bv1)))))
(declare-fun set193 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set193 bv0) (and (= bv0 anc_1049I))) :pattern ((set193 bv0)))))
(declare-fun set194 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set194 bv0) (or (set193 bv0) (Rmem7 anc_1050I bv0)))
     :pattern ((set194 bv0))
     :pattern ((set193 bv0))
     :pattern ((Rmem7 anc_1050I bv0)))))
(assert (forall ((bv0 T19))
  (! (= (Rmem7 anc_1051I bv0) (set194 bv0))
     :pattern ((Rmem7 anc_1051I bv0))
     :pattern ((set194 bv0)))))
(declare-fun set195 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set195 bv0) (and (= bv0 anc_1049I))) :pattern ((set195 bv0)))))
(assert (forall ((bv0 T19))
  (! (= (Rhd9 anc_1051I bv0) (set195 bv0))
     :pattern ((Rhd9 anc_1051I bv0))
     :pattern ((set195 bv0)))))
(declare-fun set196 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set196 bv0 bv1) false) :pattern ((set196 bv0 bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Robs6 anc_1050I bv0 bv1) (set196 bv0 bv1))
     :pattern ((Robs6 anc_1050I bv0 bv1))
     :pattern ((set196 bv0 bv1)))))
(declare-fun set197 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set197 bv0 bv1) false) :pattern ((set197 bv0 bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Rob8 anc_1050I bv0 bv1) (set197 bv0 bv1))
     :pattern ((Rob8 anc_1050I bv0 bv1))
     :pattern ((set197 bv0 bv1)))))
(declare-fun set198 (T19) Bool)
(assert (forall ((bv0 T19)) (! (= (set198 bv0) false) :pattern ((set198 bv0)))))
(assert (forall ((bv0 T19))
  (! (= (Rmem7 anc_1050I bv0) (set198 bv0))
     :pattern ((Rmem7 anc_1050I bv0))
     :pattern ((set198 bv0)))))
(declare-fun set199 (T19) Bool)
(assert (forall ((bv0 T19)) (! (= (set199 bv0) false) :pattern ((set199 bv0)))))
(assert (forall ((bv0 T19))
  (! (= (Rhd9 anc_1050I bv0) (set199 bv0))
     :pattern ((Rhd9 anc_1050I bv0))
     :pattern ((set199 bv0)))))
(assert (= anc_1049I x))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Robs6 anc_1046I bv0 bv1) (Rtos3 l bv0 bv1))
     :pattern ((Robs6 anc_1046I bv0 bv1))
     :pattern ((Rtos3 l bv0 bv1)))))
(assert (forall ((bv0 T19))
  (! (= (Rmem7 anc_1046I bv0) (Rtmem1 l bv0))
     :pattern ((Rmem7 anc_1046I bv0))
     :pattern ((Rtmem1 l bv0)))))
(declare-fun set200 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set200 bv0 bv1) (and (Rmem7 anc_1052I bv0) (Rmem7 anc_1055I bv1)))
     :pattern ((set200 bv0 bv1))
     :pattern ((Rmem7 anc_1052I bv0) (Rmem7 anc_1055I bv1)))))
(declare-fun set201 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set201 bv0 bv1) (or (Robs6 anc_1055I bv0 bv1) (set200 bv0 bv1)))
     :pattern ((set201 bv0 bv1))
     :pattern ((Robs6 anc_1055I bv0 bv1))
     :pattern ((set200 bv0 bv1)))))
(declare-fun set202 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set202 bv0 bv1) (or (Robs6 anc_1052I bv0 bv1) (set201 bv0 bv1)))
     :pattern ((set202 bv0 bv1))
     :pattern ((Robs6 anc_1052I bv0 bv1))
     :pattern ((set201 bv0 bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Robs6 v_15 bv0 bv1) (set202 bv0 bv1))
     :pattern ((Robs6 v_15 bv0 bv1))
     :pattern ((set202 bv0 bv1)))))
(declare-fun set203 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set203 bv0) (or (Rmem7 anc_1052I bv0) (Rmem7 anc_1055I bv0)))
     :pattern ((set203 bv0))
     :pattern ((Rmem7 anc_1052I bv0))
     :pattern ((Rmem7 anc_1055I bv0)))))
(assert (forall ((bv0 T19))
  (! (= (Rmem7 v_15 bv0) (set203 bv0))
     :pattern ((Rmem7 v_15 bv0))
     :pattern ((set203 bv0)))))
(assert (not (forall ((bv0 T19))
       (! (= (Rmem7 v_15 bv0) (Rtmem1 x_2 bv0))
          :pattern ((Rmem7 v_15 bv0))
          :pattern ((Rtmem1 x_2 bv0))))))
(check-sat)

(declare-sort T20)
(declare-const v_15 T20)
(declare-sort T21)
(declare-const x_3 T21)
(declare-const t T21)
(declare-sort T22)
(declare-const x T22)
(declare-const sv_4117 T21)
(declare-const anc_1025I T22)
(declare-const anc_1026I T20)
(declare-fun Rhd9 (T20 T22) Bool)
(declare-fun Rmem8 (T20 T22) Bool)
(declare-fun Rob7 (T20 T22 T22) Bool)
(declare-fun Robs6 (T20 T22 T22) Bool)
(declare-fun Rroot5 (T21 T22) Bool)
(declare-fun Rtmem4 (T21 T22) Bool)
(declare-fun Rto3 (T21 T22 T22) Bool)
(declare-fun Rtos2 (T21 T22 T22) Bool)
(declare-fun Rpo1 (T21 T22 T22) Bool)
(declare-fun Rpos0 (T21 T22 T22) Bool)
(assert (= t x_3))
(declare-fun set204 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set204 bv0 bv1) false) :pattern ((set204 bv0 bv1)))))
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (Rpos0 t bv0 bv1) (set204 bv0 bv1))
     :pattern ((Rpos0 t bv0 bv1))
     :pattern ((set204 bv0 bv1)))))
(declare-fun set205 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set205 bv0 bv1) false) :pattern ((set205 bv0 bv1)))))
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (Rpo1 t bv0 bv1) (set205 bv0 bv1))
     :pattern ((Rpo1 t bv0 bv1))
     :pattern ((set205 bv0 bv1)))))
(declare-fun set206 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set206 bv0 bv1) false) :pattern ((set206 bv0 bv1)))))
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (Rtos2 t bv0 bv1) (set206 bv0 bv1))
     :pattern ((Rtos2 t bv0 bv1))
     :pattern ((set206 bv0 bv1)))))
(declare-fun set207 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set207 bv0 bv1) false) :pattern ((set207 bv0 bv1)))))
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (Rto3 t bv0 bv1) (set207 bv0 bv1))
     :pattern ((Rto3 t bv0 bv1))
     :pattern ((set207 bv0 bv1)))))
(declare-fun set208 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set208 bv0) (and (= bv0 x))) :pattern ((set208 bv0)))))
(assert (forall ((bv0 T22))
  (! (= (Rtmem4 t bv0) (set208 bv0))
     :pattern ((Rtmem4 t bv0))
     :pattern ((set208 bv0)))))
(declare-fun set209 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set209 bv0) (and (= bv0 x))) :pattern ((set209 bv0)))))
(assert (forall ((bv0 T22))
  (! (= (Rroot5 t bv0) (set209 bv0))
     :pattern ((Rroot5 t bv0))
     :pattern ((set209 bv0)))))
(declare-fun set210 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set210 bv0 bv1) false) :pattern ((set210 bv0 bv1)))))
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (Robs6 anc_1026I bv0 bv1) (set210 bv0 bv1))
     :pattern ((Robs6 anc_1026I bv0 bv1))
     :pattern ((set210 bv0 bv1)))))
(declare-fun set211 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set211 bv0 bv1) false) :pattern ((set211 bv0 bv1)))))
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (Rob7 anc_1026I bv0 bv1) (set211 bv0 bv1))
     :pattern ((Rob7 anc_1026I bv0 bv1))
     :pattern ((set211 bv0 bv1)))))
(declare-fun set212 (T22) Bool)
(assert (forall ((bv0 T22)) (! (= (set212 bv0) false) :pattern ((set212 bv0)))))
(assert (forall ((bv0 T22))
  (! (= (Rmem8 anc_1026I bv0) (set212 bv0))
     :pattern ((Rmem8 anc_1026I bv0))
     :pattern ((set212 bv0)))))
(declare-fun set213 (T22) Bool)
(assert (forall ((bv0 T22)) (! (= (set213 bv0) false) :pattern ((set213 bv0)))))
(assert (forall ((bv0 T22))
  (! (= (Rhd9 anc_1026I bv0) (set213 bv0))
     :pattern ((Rhd9 anc_1026I bv0))
     :pattern ((set213 bv0)))))
(assert (= anc_1025I x))
(declare-fun set214 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set214 bv0) (and (= bv0 anc_1025I))) :pattern ((set214 bv0)))))
(declare-fun set215 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set215 bv0 bv1) (and (set214 bv0) (Rmem8 anc_1026I bv1)))
     :pattern ((set215 bv0 bv1))
     :pattern ((set214 bv0) (Rmem8 anc_1026I bv1)))))
(declare-fun set216 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set216 bv0 bv1) (or (set215 bv0 bv1) (Robs6 anc_1026I bv0 bv1)))
     :pattern ((set216 bv0 bv1))
     :pattern ((set215 bv0 bv1))
     :pattern ((Robs6 anc_1026I bv0 bv1)))))
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (Robs6 v_15 bv0 bv1) (set216 bv0 bv1))
     :pattern ((Robs6 v_15 bv0 bv1))
     :pattern ((set216 bv0 bv1)))))
(declare-fun set217 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set217 bv0) (and (= bv0 anc_1025I))) :pattern ((set217 bv0)))))
(declare-fun set218 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set218 bv0 bv1) (and (set217 bv0) (Rmem8 anc_1026I bv1)))
     :pattern ((set218 bv0 bv1))
     :pattern ((set217 bv0) (Rmem8 anc_1026I bv1)))))
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (Rob7 v_15 bv0 bv1) (set218 bv0 bv1))
     :pattern ((Rob7 v_15 bv0 bv1))
     :pattern ((set218 bv0 bv1)))))
(declare-fun set219 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set219 bv0) (and (= bv0 anc_1025I))) :pattern ((set219 bv0)))))
(declare-fun set220 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set220 bv0) (or (set219 bv0) (Rmem8 anc_1026I bv0)))
     :pattern ((set220 bv0))
     :pattern ((set219 bv0))
     :pattern ((Rmem8 anc_1026I bv0)))))
(assert (forall ((bv0 T22))
  (! (= (Rmem8 v_15 bv0) (set220 bv0))
     :pattern ((Rmem8 v_15 bv0))
     :pattern ((set220 bv0)))))
(declare-fun set221 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set221 bv0) (and (= bv0 anc_1025I))) :pattern ((set221 bv0)))))
(assert (forall ((bv0 T22))
  (! (= (Rhd9 v_15 bv0) (set221 bv0))
     :pattern ((Rhd9 v_15 bv0))
     :pattern ((set221 bv0)))))
(assert (not (forall ((bv1 T22) (bv0 T22))
       (! (= (Robs6 v_15 bv0 bv1) (Rpos0 x_3 bv0 bv1))
          :pattern ((Robs6 v_15 bv0 bv1))
          :pattern ((Rpos0 x_3 bv0 bv1))))))
(check-sat)

(declare-sort T23)
(declare-const v_15 T23)
(declare-sort T24)
(declare-const x_3 T24)
(declare-const t T24)
(declare-sort T25)
(declare-const x T25)
(declare-const sv_4117 T24)
(declare-const anc_1025I T25)
(declare-const anc_1026I T23)
(declare-fun Rhd9 (T23 T25) Bool)
(declare-fun Rmem8 (T23 T25) Bool)
(declare-fun Rob7 (T23 T25 T25) Bool)
(declare-fun Robs6 (T23 T25 T25) Bool)
(declare-fun Rroot5 (T24 T25) Bool)
(declare-fun Rtmem4 (T24 T25) Bool)
(declare-fun Rto3 (T24 T25 T25) Bool)
(declare-fun Rtos2 (T24 T25 T25) Bool)
(declare-fun Rpo1 (T24 T25 T25) Bool)
(declare-fun Rpos0 (T24 T25 T25) Bool)
(assert (= t x_3))
(declare-fun set222 (T25 T25) Bool)
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (set222 bv0 bv1) false) :pattern ((set222 bv0 bv1)))))
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (Rpos0 t bv0 bv1) (set222 bv0 bv1))
     :pattern ((Rpos0 t bv0 bv1))
     :pattern ((set222 bv0 bv1)))))
(declare-fun set223 (T25 T25) Bool)
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (set223 bv0 bv1) false) :pattern ((set223 bv0 bv1)))))
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (Rpo1 t bv0 bv1) (set223 bv0 bv1))
     :pattern ((Rpo1 t bv0 bv1))
     :pattern ((set223 bv0 bv1)))))
(declare-fun set224 (T25 T25) Bool)
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (set224 bv0 bv1) false) :pattern ((set224 bv0 bv1)))))
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (Rtos2 t bv0 bv1) (set224 bv0 bv1))
     :pattern ((Rtos2 t bv0 bv1))
     :pattern ((set224 bv0 bv1)))))
(declare-fun set225 (T25 T25) Bool)
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (set225 bv0 bv1) false) :pattern ((set225 bv0 bv1)))))
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (Rto3 t bv0 bv1) (set225 bv0 bv1))
     :pattern ((Rto3 t bv0 bv1))
     :pattern ((set225 bv0 bv1)))))
(declare-fun set226 (T25) Bool)
(assert (forall ((bv0 T25))
  (! (= (set226 bv0) (and (= bv0 x))) :pattern ((set226 bv0)))))
(assert (forall ((bv0 T25))
  (! (= (Rtmem4 t bv0) (set226 bv0))
     :pattern ((Rtmem4 t bv0))
     :pattern ((set226 bv0)))))
(declare-fun set227 (T25) Bool)
(assert (forall ((bv0 T25))
  (! (= (set227 bv0) (and (= bv0 x))) :pattern ((set227 bv0)))))
(assert (forall ((bv0 T25))
  (! (= (Rroot5 t bv0) (set227 bv0))
     :pattern ((Rroot5 t bv0))
     :pattern ((set227 bv0)))))
(declare-fun set228 (T25 T25) Bool)
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (set228 bv0 bv1) false) :pattern ((set228 bv0 bv1)))))
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (Robs6 anc_1026I bv0 bv1) (set228 bv0 bv1))
     :pattern ((Robs6 anc_1026I bv0 bv1))
     :pattern ((set228 bv0 bv1)))))
(declare-fun set229 (T25 T25) Bool)
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (set229 bv0 bv1) false) :pattern ((set229 bv0 bv1)))))
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (Rob7 anc_1026I bv0 bv1) (set229 bv0 bv1))
     :pattern ((Rob7 anc_1026I bv0 bv1))
     :pattern ((set229 bv0 bv1)))))
(declare-fun set230 (T25) Bool)
(assert (forall ((bv0 T25)) (! (= (set230 bv0) false) :pattern ((set230 bv0)))))
(assert (forall ((bv0 T25))
  (! (= (Rmem8 anc_1026I bv0) (set230 bv0))
     :pattern ((Rmem8 anc_1026I bv0))
     :pattern ((set230 bv0)))))
(declare-fun set231 (T25) Bool)
(assert (forall ((bv0 T25)) (! (= (set231 bv0) false) :pattern ((set231 bv0)))))
(assert (forall ((bv0 T25))
  (! (= (Rhd9 anc_1026I bv0) (set231 bv0))
     :pattern ((Rhd9 anc_1026I bv0))
     :pattern ((set231 bv0)))))
(assert (= anc_1025I x))
(declare-fun set232 (T25) Bool)
(assert (forall ((bv0 T25))
  (! (= (set232 bv0) (and (= bv0 anc_1025I))) :pattern ((set232 bv0)))))
(declare-fun set233 (T25 T25) Bool)
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (set233 bv0 bv1) (and (set232 bv0) (Rmem8 anc_1026I bv1)))
     :pattern ((set233 bv0 bv1))
     :pattern ((set232 bv0) (Rmem8 anc_1026I bv1)))))
(declare-fun set234 (T25 T25) Bool)
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (set234 bv0 bv1) (or (set233 bv0 bv1) (Robs6 anc_1026I bv0 bv1)))
     :pattern ((set234 bv0 bv1))
     :pattern ((set233 bv0 bv1))
     :pattern ((Robs6 anc_1026I bv0 bv1)))))
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (Robs6 v_15 bv0 bv1) (set234 bv0 bv1))
     :pattern ((Robs6 v_15 bv0 bv1))
     :pattern ((set234 bv0 bv1)))))
(declare-fun set235 (T25) Bool)
(assert (forall ((bv0 T25))
  (! (= (set235 bv0) (and (= bv0 anc_1025I))) :pattern ((set235 bv0)))))
(declare-fun set236 (T25 T25) Bool)
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (set236 bv0 bv1) (and (set235 bv0) (Rmem8 anc_1026I bv1)))
     :pattern ((set236 bv0 bv1))
     :pattern ((set235 bv0) (Rmem8 anc_1026I bv1)))))
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (Rob7 v_15 bv0 bv1) (set236 bv0 bv1))
     :pattern ((Rob7 v_15 bv0 bv1))
     :pattern ((set236 bv0 bv1)))))
(declare-fun set237 (T25) Bool)
(assert (forall ((bv0 T25))
  (! (= (set237 bv0) (and (= bv0 anc_1025I))) :pattern ((set237 bv0)))))
(declare-fun set238 (T25) Bool)
(assert (forall ((bv0 T25))
  (! (= (set238 bv0) (or (set237 bv0) (Rmem8 anc_1026I bv0)))
     :pattern ((set238 bv0))
     :pattern ((set237 bv0))
     :pattern ((Rmem8 anc_1026I bv0)))))
(assert (forall ((bv0 T25))
  (! (= (Rmem8 v_15 bv0) (set238 bv0))
     :pattern ((Rmem8 v_15 bv0))
     :pattern ((set238 bv0)))))
(declare-fun set239 (T25) Bool)
(assert (forall ((bv0 T25))
  (! (= (set239 bv0) (and (= bv0 anc_1025I))) :pattern ((set239 bv0)))))
(assert (forall ((bv0 T25))
  (! (= (Rhd9 v_15 bv0) (set239 bv0))
     :pattern ((Rhd9 v_15 bv0))
     :pattern ((set239 bv0)))))
(assert (not (forall ((bv0 T25))
       (! (= (Rmem8 v_15 bv0) (Rtmem4 x_3 bv0))
          :pattern ((Rmem8 v_15 bv0))
          :pattern ((Rtmem4 x_3 bv0))))))
(check-sat)

(declare-sort T26)
(declare-const v_15 T26)
(declare-sort T27)
(declare-const x_3 T27)
(declare-const t T27)
(declare-const l T27)
(declare-sort T28)
(declare-const x T28)
(declare-const r T27)
(declare-const sv_4121 T27)
(declare-const anc_1030I T26)
(declare-const anc_1033I T26)
(declare-const anc_1034I T26)
(declare-const anc_1037I T28)
(declare-const anc_1038I T26)
(declare-const anc_1039I T26)
(declare-fun Rhd9 (T26 T28) Bool)
(declare-fun Rob8 (T26 T28 T28) Bool)
(declare-fun Rmem7 (T26 T28) Bool)
(declare-fun Robs6 (T26 T28 T28) Bool)
(declare-fun Rroot5 (T27 T28) Bool)
(declare-fun Rto4 (T27 T28 T28) Bool)
(declare-fun Rtos3 (T27 T28 T28) Bool)
(declare-fun Rpo2 (T27 T28 T28) Bool)
(declare-fun Rtmem1 (T27 T28) Bool)
(declare-fun Rpos0 (T27 T28 T28) Bool)
(assert (= t x_3))
(declare-fun set240 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set240 bv0) (and (= bv0 x))) :pattern ((set240 bv0)))))
(declare-fun set241 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set241 bv0 bv1) (and (Rtmem1 l bv0) (set240 bv1)))
     :pattern ((set241 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (set240 bv1)))))
(declare-fun set242 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set242 bv0) (and (= bv0 x))) :pattern ((set242 bv0)))))
(declare-fun set243 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set243 bv0 bv1) (and (Rtmem1 r bv0) (set242 bv1)))
     :pattern ((set243 bv0 bv1))
     :pattern ((Rtmem1 r bv0) (set242 bv1)))))
(declare-fun set244 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set244 bv0 bv1) (and (Rtmem1 l bv0) (Rtmem1 r bv1)))
     :pattern ((set244 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (Rtmem1 r bv1)))))
(declare-fun set245 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set245 bv0 bv1) (or (set243 bv0 bv1) (set244 bv0 bv1)))
     :pattern ((set245 bv0 bv1))
     :pattern ((set243 bv0 bv1))
     :pattern ((set244 bv0 bv1)))))
(declare-fun set246 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set246 bv0 bv1) (or (set241 bv0 bv1) (set245 bv0 bv1)))
     :pattern ((set246 bv0 bv1))
     :pattern ((set241 bv0 bv1))
     :pattern ((set245 bv0 bv1)))))
(declare-fun set247 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set247 bv0 bv1) (or (Rpos0 r bv0 bv1) (Rpos0 l bv0 bv1)))
     :pattern ((set247 bv0 bv1))
     :pattern ((Rpos0 r bv0 bv1))
     :pattern ((Rpos0 l bv0 bv1)))))
(declare-fun set248 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set248 bv0 bv1) (or (set246 bv0 bv1) (set247 bv0 bv1)))
     :pattern ((set248 bv0 bv1))
     :pattern ((set246 bv0 bv1))
     :pattern ((set247 bv0 bv1)))))
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (Rpos0 t bv0 bv1) (set248 bv0 bv1))
     :pattern ((Rpos0 t bv0 bv1))
     :pattern ((set248 bv0 bv1)))))
(declare-fun set249 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set249 bv0) (and (= bv0 x))) :pattern ((set249 bv0)))))
(declare-fun set250 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set250 bv0 bv1) (and (Rtmem1 l bv0) (set249 bv1)))
     :pattern ((set250 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (set249 bv1)))))
(declare-fun set251 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set251 bv0) (and (= bv0 x))) :pattern ((set251 bv0)))))
(declare-fun set252 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set252 bv0 bv1) (and (Rtmem1 r bv0) (set251 bv1)))
     :pattern ((set252 bv0 bv1))
     :pattern ((Rtmem1 r bv0) (set251 bv1)))))
(declare-fun set253 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set253 bv0 bv1) (and (Rtmem1 l bv0) (Rtmem1 r bv1)))
     :pattern ((set253 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (Rtmem1 r bv1)))))
(declare-fun set254 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set254 bv0 bv1) (or (set252 bv0 bv1) (set253 bv0 bv1)))
     :pattern ((set254 bv0 bv1))
     :pattern ((set252 bv0 bv1))
     :pattern ((set253 bv0 bv1)))))
(declare-fun set255 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set255 bv0 bv1) (or (set250 bv0 bv1) (set254 bv0 bv1)))
     :pattern ((set255 bv0 bv1))
     :pattern ((set250 bv0 bv1))
     :pattern ((set254 bv0 bv1)))))
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (Rpo2 t bv0 bv1) (set255 bv0 bv1))
     :pattern ((Rpo2 t bv0 bv1))
     :pattern ((set255 bv0 bv1)))))
(declare-fun set256 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set256 bv0) (and (= bv0 x))) :pattern ((set256 bv0)))))
(declare-fun set257 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set257 bv0 bv1) (and (Rtmem1 l bv0) (set256 bv1)))
     :pattern ((set257 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (set256 bv1)))))
(declare-fun set258 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set258 bv0) (and (= bv0 x))) :pattern ((set258 bv0)))))
(declare-fun set259 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set259 bv0 bv1) (and (set258 bv0) (Rtmem1 r bv1)))
     :pattern ((set259 bv0 bv1))
     :pattern ((set258 bv0) (Rtmem1 r bv1)))))
(declare-fun set260 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set260 bv0 bv1) (and (Rtmem1 l bv0) (Rtmem1 r bv1)))
     :pattern ((set260 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (Rtmem1 r bv1)))))
(declare-fun set261 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set261 bv0 bv1) (or (set259 bv0 bv1) (set260 bv0 bv1)))
     :pattern ((set261 bv0 bv1))
     :pattern ((set259 bv0 bv1))
     :pattern ((set260 bv0 bv1)))))
(declare-fun set262 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set262 bv0 bv1) (or (set257 bv0 bv1) (set261 bv0 bv1)))
     :pattern ((set262 bv0 bv1))
     :pattern ((set257 bv0 bv1))
     :pattern ((set261 bv0 bv1)))))
(declare-fun set263 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set263 bv0 bv1) (or (Rtos3 r bv0 bv1) (Rtos3 l bv0 bv1)))
     :pattern ((set263 bv0 bv1))
     :pattern ((Rtos3 r bv0 bv1))
     :pattern ((Rtos3 l bv0 bv1)))))
(declare-fun set264 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set264 bv0 bv1) (or (set262 bv0 bv1) (set263 bv0 bv1)))
     :pattern ((set264 bv0 bv1))
     :pattern ((set262 bv0 bv1))
     :pattern ((set263 bv0 bv1)))))
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (Rtos3 t bv0 bv1) (set264 bv0 bv1))
     :pattern ((Rtos3 t bv0 bv1))
     :pattern ((set264 bv0 bv1)))))
(declare-fun set265 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set265 bv0) (and (= bv0 x))) :pattern ((set265 bv0)))))
(declare-fun set266 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set266 bv0 bv1) (and (Rtmem1 l bv0) (set265 bv1)))
     :pattern ((set266 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (set265 bv1)))))
(declare-fun set267 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set267 bv0) (and (= bv0 x))) :pattern ((set267 bv0)))))
(declare-fun set268 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set268 bv0 bv1) (and (set267 bv0) (Rtmem1 r bv1)))
     :pattern ((set268 bv0 bv1))
     :pattern ((set267 bv0) (Rtmem1 r bv1)))))
(declare-fun set269 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set269 bv0 bv1) (and (Rtmem1 l bv0) (Rtmem1 r bv1)))
     :pattern ((set269 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (Rtmem1 r bv1)))))
(declare-fun set270 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set270 bv0 bv1) (or (set268 bv0 bv1) (set269 bv0 bv1)))
     :pattern ((set270 bv0 bv1))
     :pattern ((set268 bv0 bv1))
     :pattern ((set269 bv0 bv1)))))
(declare-fun set271 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set271 bv0 bv1) (or (set266 bv0 bv1) (set270 bv0 bv1)))
     :pattern ((set271 bv0 bv1))
     :pattern ((set266 bv0 bv1))
     :pattern ((set270 bv0 bv1)))))
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (Rto4 t bv0 bv1) (set271 bv0 bv1))
     :pattern ((Rto4 t bv0 bv1))
     :pattern ((set271 bv0 bv1)))))
(declare-fun set272 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set272 bv0) (and (= bv0 x))) :pattern ((set272 bv0)))))
(declare-fun set273 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set273 bv0) (or (Rtmem1 r bv0) (Rtmem1 l bv0)))
     :pattern ((set273 bv0))
     :pattern ((Rtmem1 r bv0))
     :pattern ((Rtmem1 l bv0)))))
(declare-fun set274 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set274 bv0) (or (set272 bv0) (set273 bv0)))
     :pattern ((set274 bv0))
     :pattern ((set272 bv0))
     :pattern ((set273 bv0)))))
(assert (forall ((bv0 T28))
  (! (= (Rtmem1 t bv0) (set274 bv0))
     :pattern ((Rtmem1 t bv0))
     :pattern ((set274 bv0)))))
(declare-fun set275 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set275 bv0) (and (= bv0 x))) :pattern ((set275 bv0)))))
(assert (forall ((bv0 T28))
  (! (= (Rroot5 t bv0) (set275 bv0))
     :pattern ((Rroot5 t bv0))
     :pattern ((set275 bv0)))))
(declare-fun set276 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set276 bv0) (and (= bv0 anc_1037I))) :pattern ((set276 bv0)))))
(declare-fun set277 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set277 bv0 bv1) (and (set276 bv0) (Rmem7 anc_1038I bv1)))
     :pattern ((set277 bv0 bv1))
     :pattern ((set276 bv0) (Rmem7 anc_1038I bv1)))))
(declare-fun set278 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set278 bv0 bv1) (or (set277 bv0 bv1) (Robs6 anc_1038I bv0 bv1)))
     :pattern ((set278 bv0 bv1))
     :pattern ((set277 bv0 bv1))
     :pattern ((Robs6 anc_1038I bv0 bv1)))))
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (Robs6 anc_1039I bv0 bv1) (set278 bv0 bv1))
     :pattern ((Robs6 anc_1039I bv0 bv1))
     :pattern ((set278 bv0 bv1)))))
(declare-fun set279 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set279 bv0) (and (= bv0 anc_1037I))) :pattern ((set279 bv0)))))
(declare-fun set280 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set280 bv0 bv1) (and (set279 bv0) (Rmem7 anc_1038I bv1)))
     :pattern ((set280 bv0 bv1))
     :pattern ((set279 bv0) (Rmem7 anc_1038I bv1)))))
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (Rob8 anc_1039I bv0 bv1) (set280 bv0 bv1))
     :pattern ((Rob8 anc_1039I bv0 bv1))
     :pattern ((set280 bv0 bv1)))))
(declare-fun set281 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set281 bv0) (and (= bv0 anc_1037I))) :pattern ((set281 bv0)))))
(declare-fun set282 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set282 bv0) (or (set281 bv0) (Rmem7 anc_1038I bv0)))
     :pattern ((set282 bv0))
     :pattern ((set281 bv0))
     :pattern ((Rmem7 anc_1038I bv0)))))
(assert (forall ((bv0 T28))
  (! (= (Rmem7 anc_1039I bv0) (set282 bv0))
     :pattern ((Rmem7 anc_1039I bv0))
     :pattern ((set282 bv0)))))
(declare-fun set283 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set283 bv0) (and (= bv0 anc_1037I))) :pattern ((set283 bv0)))))
(assert (forall ((bv0 T28))
  (! (= (Rhd9 anc_1039I bv0) (set283 bv0))
     :pattern ((Rhd9 anc_1039I bv0))
     :pattern ((set283 bv0)))))
(declare-fun set284 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set284 bv0 bv1) false) :pattern ((set284 bv0 bv1)))))
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (Robs6 anc_1038I bv0 bv1) (set284 bv0 bv1))
     :pattern ((Robs6 anc_1038I bv0 bv1))
     :pattern ((set284 bv0 bv1)))))
(declare-fun set285 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set285 bv0 bv1) false) :pattern ((set285 bv0 bv1)))))
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (Rob8 anc_1038I bv0 bv1) (set285 bv0 bv1))
     :pattern ((Rob8 anc_1038I bv0 bv1))
     :pattern ((set285 bv0 bv1)))))
(declare-fun set286 (T28) Bool)
(assert (forall ((bv0 T28)) (! (= (set286 bv0) false) :pattern ((set286 bv0)))))
(assert (forall ((bv0 T28))
  (! (= (Rmem7 anc_1038I bv0) (set286 bv0))
     :pattern ((Rmem7 anc_1038I bv0))
     :pattern ((set286 bv0)))))
(declare-fun set287 (T28) Bool)
(assert (forall ((bv0 T28)) (! (= (set287 bv0) false) :pattern ((set287 bv0)))))
(assert (forall ((bv0 T28))
  (! (= (Rhd9 anc_1038I bv0) (set287 bv0))
     :pattern ((Rhd9 anc_1038I bv0))
     :pattern ((set287 bv0)))))
(assert (= anc_1037I x))
(declare-fun set288 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set288 bv0 bv1) (and (Rmem7 anc_1030I bv0) (Rmem7 anc_1033I bv1)))
     :pattern ((set288 bv0 bv1))
     :pattern ((Rmem7 anc_1030I bv0) (Rmem7 anc_1033I bv1)))))
(declare-fun set289 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set289 bv0 bv1) (or (Robs6 anc_1033I bv0 bv1) (set288 bv0 bv1)))
     :pattern ((set289 bv0 bv1))
     :pattern ((Robs6 anc_1033I bv0 bv1))
     :pattern ((set288 bv0 bv1)))))
(declare-fun set290 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set290 bv0 bv1) (or (Robs6 anc_1030I bv0 bv1) (set289 bv0 bv1)))
     :pattern ((set290 bv0 bv1))
     :pattern ((Robs6 anc_1030I bv0 bv1))
     :pattern ((set289 bv0 bv1)))))
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (Robs6 anc_1034I bv0 bv1) (set290 bv0 bv1))
     :pattern ((Robs6 anc_1034I bv0 bv1))
     :pattern ((set290 bv0 bv1)))))
(declare-fun set291 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set291 bv0) (or (Rmem7 anc_1030I bv0) (Rmem7 anc_1033I bv0)))
     :pattern ((set291 bv0))
     :pattern ((Rmem7 anc_1030I bv0))
     :pattern ((Rmem7 anc_1033I bv0)))))
(assert (forall ((bv0 T28))
  (! (= (Rmem7 anc_1034I bv0) (set291 bv0))
     :pattern ((Rmem7 anc_1034I bv0))
     :pattern ((set291 bv0)))))
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (Robs6 anc_1033I bv0 bv1) (Rpos0 r bv0 bv1))
     :pattern ((Robs6 anc_1033I bv0 bv1))
     :pattern ((Rpos0 r bv0 bv1)))))
(assert (forall ((bv0 T28))
  (! (= (Rmem7 anc_1033I bv0) (Rtmem1 r bv0))
     :pattern ((Rmem7 anc_1033I bv0))
     :pattern ((Rtmem1 r bv0)))))
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (Robs6 anc_1030I bv0 bv1) (Rpos0 l bv0 bv1))
     :pattern ((Robs6 anc_1030I bv0 bv1))
     :pattern ((Rpos0 l bv0 bv1)))))
(assert (forall ((bv0 T28))
  (! (= (Rmem7 anc_1030I bv0) (Rtmem1 l bv0))
     :pattern ((Rmem7 anc_1030I bv0))
     :pattern ((Rtmem1 l bv0)))))
(declare-fun set292 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set292 bv0 bv1) (and (Rmem7 anc_1034I bv0) (Rmem7 anc_1039I bv1)))
     :pattern ((set292 bv0 bv1))
     :pattern ((Rmem7 anc_1034I bv0) (Rmem7 anc_1039I bv1)))))
(declare-fun set293 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set293 bv0 bv1) (or (Robs6 anc_1039I bv0 bv1) (set292 bv0 bv1)))
     :pattern ((set293 bv0 bv1))
     :pattern ((Robs6 anc_1039I bv0 bv1))
     :pattern ((set292 bv0 bv1)))))
(declare-fun set294 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set294 bv0 bv1) (or (Robs6 anc_1034I bv0 bv1) (set293 bv0 bv1)))
     :pattern ((set294 bv0 bv1))
     :pattern ((Robs6 anc_1034I bv0 bv1))
     :pattern ((set293 bv0 bv1)))))
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (Robs6 v_15 bv0 bv1) (set294 bv0 bv1))
     :pattern ((Robs6 v_15 bv0 bv1))
     :pattern ((set294 bv0 bv1)))))
(declare-fun set295 (T28) Bool)
(assert (forall ((bv0 T28))
  (! (= (set295 bv0) (or (Rmem7 anc_1034I bv0) (Rmem7 anc_1039I bv0)))
     :pattern ((set295 bv0))
     :pattern ((Rmem7 anc_1034I bv0))
     :pattern ((Rmem7 anc_1039I bv0)))))
(assert (forall ((bv0 T28))
  (! (= (Rmem7 v_15 bv0) (set295 bv0))
     :pattern ((Rmem7 v_15 bv0))
     :pattern ((set295 bv0)))))
(assert (not (forall ((bv1 T28) (bv0 T28))
       (! (= (Robs6 v_15 bv0 bv1) (Rpos0 x_3 bv0 bv1))
          :pattern ((Robs6 v_15 bv0 bv1))
          :pattern ((Rpos0 x_3 bv0 bv1))))))
(check-sat)

(declare-sort T29)
(declare-const v_15 T29)
(declare-sort T30)
(declare-const x_3 T30)
(declare-const t T30)
(declare-const l T30)
(declare-sort T31)
(declare-const x T31)
(declare-const r T30)
(declare-const sv_4121 T30)
(declare-const anc_1030I T29)
(declare-const anc_1033I T29)
(declare-const anc_1034I T29)
(declare-const anc_1037I T31)
(declare-const anc_1038I T29)
(declare-const anc_1039I T29)
(declare-fun Rhd9 (T29 T31) Bool)
(declare-fun Rob8 (T29 T31 T31) Bool)
(declare-fun Rmem7 (T29 T31) Bool)
(declare-fun Robs6 (T29 T31 T31) Bool)
(declare-fun Rroot5 (T30 T31) Bool)
(declare-fun Rto4 (T30 T31 T31) Bool)
(declare-fun Rtos3 (T30 T31 T31) Bool)
(declare-fun Rpo2 (T30 T31 T31) Bool)
(declare-fun Rtmem1 (T30 T31) Bool)
(declare-fun Rpos0 (T30 T31 T31) Bool)
(assert (= t x_3))
(declare-fun set296 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set296 bv0) (and (= bv0 x))) :pattern ((set296 bv0)))))
(declare-fun set297 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set297 bv0 bv1) (and (Rtmem1 l bv0) (set296 bv1)))
     :pattern ((set297 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (set296 bv1)))))
(declare-fun set298 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set298 bv0) (and (= bv0 x))) :pattern ((set298 bv0)))))
(declare-fun set299 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set299 bv0 bv1) (and (Rtmem1 r bv0) (set298 bv1)))
     :pattern ((set299 bv0 bv1))
     :pattern ((Rtmem1 r bv0) (set298 bv1)))))
(declare-fun set300 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set300 bv0 bv1) (and (Rtmem1 l bv0) (Rtmem1 r bv1)))
     :pattern ((set300 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (Rtmem1 r bv1)))))
(declare-fun set301 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set301 bv0 bv1) (or (set299 bv0 bv1) (set300 bv0 bv1)))
     :pattern ((set301 bv0 bv1))
     :pattern ((set299 bv0 bv1))
     :pattern ((set300 bv0 bv1)))))
(declare-fun set302 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set302 bv0 bv1) (or (set297 bv0 bv1) (set301 bv0 bv1)))
     :pattern ((set302 bv0 bv1))
     :pattern ((set297 bv0 bv1))
     :pattern ((set301 bv0 bv1)))))
(declare-fun set303 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set303 bv0 bv1) (or (Rpos0 r bv0 bv1) (Rpos0 l bv0 bv1)))
     :pattern ((set303 bv0 bv1))
     :pattern ((Rpos0 r bv0 bv1))
     :pattern ((Rpos0 l bv0 bv1)))))
(declare-fun set304 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set304 bv0 bv1) (or (set302 bv0 bv1) (set303 bv0 bv1)))
     :pattern ((set304 bv0 bv1))
     :pattern ((set302 bv0 bv1))
     :pattern ((set303 bv0 bv1)))))
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (Rpos0 t bv0 bv1) (set304 bv0 bv1))
     :pattern ((Rpos0 t bv0 bv1))
     :pattern ((set304 bv0 bv1)))))
(declare-fun set305 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set305 bv0) (and (= bv0 x))) :pattern ((set305 bv0)))))
(declare-fun set306 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set306 bv0 bv1) (and (Rtmem1 l bv0) (set305 bv1)))
     :pattern ((set306 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (set305 bv1)))))
(declare-fun set307 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set307 bv0) (and (= bv0 x))) :pattern ((set307 bv0)))))
(declare-fun set308 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set308 bv0 bv1) (and (Rtmem1 r bv0) (set307 bv1)))
     :pattern ((set308 bv0 bv1))
     :pattern ((Rtmem1 r bv0) (set307 bv1)))))
(declare-fun set309 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set309 bv0 bv1) (and (Rtmem1 l bv0) (Rtmem1 r bv1)))
     :pattern ((set309 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (Rtmem1 r bv1)))))
(declare-fun set310 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set310 bv0 bv1) (or (set308 bv0 bv1) (set309 bv0 bv1)))
     :pattern ((set310 bv0 bv1))
     :pattern ((set308 bv0 bv1))
     :pattern ((set309 bv0 bv1)))))
(declare-fun set311 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set311 bv0 bv1) (or (set306 bv0 bv1) (set310 bv0 bv1)))
     :pattern ((set311 bv0 bv1))
     :pattern ((set306 bv0 bv1))
     :pattern ((set310 bv0 bv1)))))
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (Rpo2 t bv0 bv1) (set311 bv0 bv1))
     :pattern ((Rpo2 t bv0 bv1))
     :pattern ((set311 bv0 bv1)))))
(declare-fun set312 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set312 bv0) (and (= bv0 x))) :pattern ((set312 bv0)))))
(declare-fun set313 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set313 bv0 bv1) (and (Rtmem1 l bv0) (set312 bv1)))
     :pattern ((set313 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (set312 bv1)))))
(declare-fun set314 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set314 bv0) (and (= bv0 x))) :pattern ((set314 bv0)))))
(declare-fun set315 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set315 bv0 bv1) (and (set314 bv0) (Rtmem1 r bv1)))
     :pattern ((set315 bv0 bv1))
     :pattern ((set314 bv0) (Rtmem1 r bv1)))))
(declare-fun set316 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set316 bv0 bv1) (and (Rtmem1 l bv0) (Rtmem1 r bv1)))
     :pattern ((set316 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (Rtmem1 r bv1)))))
(declare-fun set317 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set317 bv0 bv1) (or (set315 bv0 bv1) (set316 bv0 bv1)))
     :pattern ((set317 bv0 bv1))
     :pattern ((set315 bv0 bv1))
     :pattern ((set316 bv0 bv1)))))
(declare-fun set318 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set318 bv0 bv1) (or (set313 bv0 bv1) (set317 bv0 bv1)))
     :pattern ((set318 bv0 bv1))
     :pattern ((set313 bv0 bv1))
     :pattern ((set317 bv0 bv1)))))
(declare-fun set319 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set319 bv0 bv1) (or (Rtos3 r bv0 bv1) (Rtos3 l bv0 bv1)))
     :pattern ((set319 bv0 bv1))
     :pattern ((Rtos3 r bv0 bv1))
     :pattern ((Rtos3 l bv0 bv1)))))
(declare-fun set320 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set320 bv0 bv1) (or (set318 bv0 bv1) (set319 bv0 bv1)))
     :pattern ((set320 bv0 bv1))
     :pattern ((set318 bv0 bv1))
     :pattern ((set319 bv0 bv1)))))
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (Rtos3 t bv0 bv1) (set320 bv0 bv1))
     :pattern ((Rtos3 t bv0 bv1))
     :pattern ((set320 bv0 bv1)))))
(declare-fun set321 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set321 bv0) (and (= bv0 x))) :pattern ((set321 bv0)))))
(declare-fun set322 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set322 bv0 bv1) (and (Rtmem1 l bv0) (set321 bv1)))
     :pattern ((set322 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (set321 bv1)))))
(declare-fun set323 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set323 bv0) (and (= bv0 x))) :pattern ((set323 bv0)))))
(declare-fun set324 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set324 bv0 bv1) (and (set323 bv0) (Rtmem1 r bv1)))
     :pattern ((set324 bv0 bv1))
     :pattern ((set323 bv0) (Rtmem1 r bv1)))))
(declare-fun set325 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set325 bv0 bv1) (and (Rtmem1 l bv0) (Rtmem1 r bv1)))
     :pattern ((set325 bv0 bv1))
     :pattern ((Rtmem1 l bv0) (Rtmem1 r bv1)))))
(declare-fun set326 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set326 bv0 bv1) (or (set324 bv0 bv1) (set325 bv0 bv1)))
     :pattern ((set326 bv0 bv1))
     :pattern ((set324 bv0 bv1))
     :pattern ((set325 bv0 bv1)))))
(declare-fun set327 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set327 bv0 bv1) (or (set322 bv0 bv1) (set326 bv0 bv1)))
     :pattern ((set327 bv0 bv1))
     :pattern ((set322 bv0 bv1))
     :pattern ((set326 bv0 bv1)))))
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (Rto4 t bv0 bv1) (set327 bv0 bv1))
     :pattern ((Rto4 t bv0 bv1))
     :pattern ((set327 bv0 bv1)))))
(declare-fun set328 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set328 bv0) (and (= bv0 x))) :pattern ((set328 bv0)))))
(declare-fun set329 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set329 bv0) (or (Rtmem1 r bv0) (Rtmem1 l bv0)))
     :pattern ((set329 bv0))
     :pattern ((Rtmem1 r bv0))
     :pattern ((Rtmem1 l bv0)))))
(declare-fun set330 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set330 bv0) (or (set328 bv0) (set329 bv0)))
     :pattern ((set330 bv0))
     :pattern ((set328 bv0))
     :pattern ((set329 bv0)))))
(assert (forall ((bv0 T31))
  (! (= (Rtmem1 t bv0) (set330 bv0))
     :pattern ((Rtmem1 t bv0))
     :pattern ((set330 bv0)))))
(declare-fun set331 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set331 bv0) (and (= bv0 x))) :pattern ((set331 bv0)))))
(assert (forall ((bv0 T31))
  (! (= (Rroot5 t bv0) (set331 bv0))
     :pattern ((Rroot5 t bv0))
     :pattern ((set331 bv0)))))
(declare-fun set332 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set332 bv0) (and (= bv0 anc_1037I))) :pattern ((set332 bv0)))))
(declare-fun set333 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set333 bv0 bv1) (and (set332 bv0) (Rmem7 anc_1038I bv1)))
     :pattern ((set333 bv0 bv1))
     :pattern ((set332 bv0) (Rmem7 anc_1038I bv1)))))
(declare-fun set334 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set334 bv0 bv1) (or (set333 bv0 bv1) (Robs6 anc_1038I bv0 bv1)))
     :pattern ((set334 bv0 bv1))
     :pattern ((set333 bv0 bv1))
     :pattern ((Robs6 anc_1038I bv0 bv1)))))
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (Robs6 anc_1039I bv0 bv1) (set334 bv0 bv1))
     :pattern ((Robs6 anc_1039I bv0 bv1))
     :pattern ((set334 bv0 bv1)))))
(declare-fun set335 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set335 bv0) (and (= bv0 anc_1037I))) :pattern ((set335 bv0)))))
(declare-fun set336 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set336 bv0 bv1) (and (set335 bv0) (Rmem7 anc_1038I bv1)))
     :pattern ((set336 bv0 bv1))
     :pattern ((set335 bv0) (Rmem7 anc_1038I bv1)))))
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (Rob8 anc_1039I bv0 bv1) (set336 bv0 bv1))
     :pattern ((Rob8 anc_1039I bv0 bv1))
     :pattern ((set336 bv0 bv1)))))
(declare-fun set337 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set337 bv0) (and (= bv0 anc_1037I))) :pattern ((set337 bv0)))))
(declare-fun set338 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set338 bv0) (or (set337 bv0) (Rmem7 anc_1038I bv0)))
     :pattern ((set338 bv0))
     :pattern ((set337 bv0))
     :pattern ((Rmem7 anc_1038I bv0)))))
(assert (forall ((bv0 T31))
  (! (= (Rmem7 anc_1039I bv0) (set338 bv0))
     :pattern ((Rmem7 anc_1039I bv0))
     :pattern ((set338 bv0)))))
(declare-fun set339 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set339 bv0) (and (= bv0 anc_1037I))) :pattern ((set339 bv0)))))
(assert (forall ((bv0 T31))
  (! (= (Rhd9 anc_1039I bv0) (set339 bv0))
     :pattern ((Rhd9 anc_1039I bv0))
     :pattern ((set339 bv0)))))
(declare-fun set340 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set340 bv0 bv1) false) :pattern ((set340 bv0 bv1)))))
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (Robs6 anc_1038I bv0 bv1) (set340 bv0 bv1))
     :pattern ((Robs6 anc_1038I bv0 bv1))
     :pattern ((set340 bv0 bv1)))))
(declare-fun set341 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set341 bv0 bv1) false) :pattern ((set341 bv0 bv1)))))
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (Rob8 anc_1038I bv0 bv1) (set341 bv0 bv1))
     :pattern ((Rob8 anc_1038I bv0 bv1))
     :pattern ((set341 bv0 bv1)))))
(declare-fun set342 (T31) Bool)
(assert (forall ((bv0 T31)) (! (= (set342 bv0) false) :pattern ((set342 bv0)))))
(assert (forall ((bv0 T31))
  (! (= (Rmem7 anc_1038I bv0) (set342 bv0))
     :pattern ((Rmem7 anc_1038I bv0))
     :pattern ((set342 bv0)))))
(declare-fun set343 (T31) Bool)
(assert (forall ((bv0 T31)) (! (= (set343 bv0) false) :pattern ((set343 bv0)))))
(assert (forall ((bv0 T31))
  (! (= (Rhd9 anc_1038I bv0) (set343 bv0))
     :pattern ((Rhd9 anc_1038I bv0))
     :pattern ((set343 bv0)))))
(assert (= anc_1037I x))
(declare-fun set344 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set344 bv0 bv1) (and (Rmem7 anc_1030I bv0) (Rmem7 anc_1033I bv1)))
     :pattern ((set344 bv0 bv1))
     :pattern ((Rmem7 anc_1030I bv0) (Rmem7 anc_1033I bv1)))))
(declare-fun set345 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set345 bv0 bv1) (or (Robs6 anc_1033I bv0 bv1) (set344 bv0 bv1)))
     :pattern ((set345 bv0 bv1))
     :pattern ((Robs6 anc_1033I bv0 bv1))
     :pattern ((set344 bv0 bv1)))))
(declare-fun set346 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set346 bv0 bv1) (or (Robs6 anc_1030I bv0 bv1) (set345 bv0 bv1)))
     :pattern ((set346 bv0 bv1))
     :pattern ((Robs6 anc_1030I bv0 bv1))
     :pattern ((set345 bv0 bv1)))))
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (Robs6 anc_1034I bv0 bv1) (set346 bv0 bv1))
     :pattern ((Robs6 anc_1034I bv0 bv1))
     :pattern ((set346 bv0 bv1)))))
(declare-fun set347 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set347 bv0) (or (Rmem7 anc_1030I bv0) (Rmem7 anc_1033I bv0)))
     :pattern ((set347 bv0))
     :pattern ((Rmem7 anc_1030I bv0))
     :pattern ((Rmem7 anc_1033I bv0)))))
(assert (forall ((bv0 T31))
  (! (= (Rmem7 anc_1034I bv0) (set347 bv0))
     :pattern ((Rmem7 anc_1034I bv0))
     :pattern ((set347 bv0)))))
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (Robs6 anc_1033I bv0 bv1) (Rpos0 r bv0 bv1))
     :pattern ((Robs6 anc_1033I bv0 bv1))
     :pattern ((Rpos0 r bv0 bv1)))))
(assert (forall ((bv0 T31))
  (! (= (Rmem7 anc_1033I bv0) (Rtmem1 r bv0))
     :pattern ((Rmem7 anc_1033I bv0))
     :pattern ((Rtmem1 r bv0)))))
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (Robs6 anc_1030I bv0 bv1) (Rpos0 l bv0 bv1))
     :pattern ((Robs6 anc_1030I bv0 bv1))
     :pattern ((Rpos0 l bv0 bv1)))))
(assert (forall ((bv0 T31))
  (! (= (Rmem7 anc_1030I bv0) (Rtmem1 l bv0))
     :pattern ((Rmem7 anc_1030I bv0))
     :pattern ((Rtmem1 l bv0)))))
(declare-fun set348 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set348 bv0 bv1) (and (Rmem7 anc_1034I bv0) (Rmem7 anc_1039I bv1)))
     :pattern ((set348 bv0 bv1))
     :pattern ((Rmem7 anc_1034I bv0) (Rmem7 anc_1039I bv1)))))
(declare-fun set349 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set349 bv0 bv1) (or (Robs6 anc_1039I bv0 bv1) (set348 bv0 bv1)))
     :pattern ((set349 bv0 bv1))
     :pattern ((Robs6 anc_1039I bv0 bv1))
     :pattern ((set348 bv0 bv1)))))
(declare-fun set350 (T31 T31) Bool)
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (set350 bv0 bv1) (or (Robs6 anc_1034I bv0 bv1) (set349 bv0 bv1)))
     :pattern ((set350 bv0 bv1))
     :pattern ((Robs6 anc_1034I bv0 bv1))
     :pattern ((set349 bv0 bv1)))))
(assert (forall ((bv1 T31) (bv0 T31))
  (! (= (Robs6 v_15 bv0 bv1) (set350 bv0 bv1))
     :pattern ((Robs6 v_15 bv0 bv1))
     :pattern ((set350 bv0 bv1)))))
(declare-fun set351 (T31) Bool)
(assert (forall ((bv0 T31))
  (! (= (set351 bv0) (or (Rmem7 anc_1034I bv0) (Rmem7 anc_1039I bv0)))
     :pattern ((set351 bv0))
     :pattern ((Rmem7 anc_1034I bv0))
     :pattern ((Rmem7 anc_1039I bv0)))))
(assert (forall ((bv0 T31))
  (! (= (Rmem7 v_15 bv0) (set351 bv0))
     :pattern ((Rmem7 v_15 bv0))
     :pattern ((set351 bv0)))))
(assert (not (forall ((bv0 T31))
       (! (= (Rmem7 v_15 bv0) (Rtmem1 x_3 bv0))
          :pattern ((Rmem7 v_15 bv0))
          :pattern ((Rtmem1 x_3 bv0))))))
(check-sat)

