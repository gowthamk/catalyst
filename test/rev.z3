(declare-sort T0)
(declare-const v_6 T0)
(declare-const x_1 T0)
(declare-const x_0 T0)
(declare-const anc_1032I T0)
(declare-const anc_1033I T0)
(declare-const l1 T0)
(declare-const l2 T0)
(declare-const sv_4100 T0)
(declare-sort T1)
(declare-fun Rhd5 (T0 T1) Bool)
(declare-fun Rmem4 (T0 T1) Bool)
(declare-fun Rob3 (T0 T1 T1) Bool)
(declare-fun Roa2 (T0 T1 T1) Bool)
(declare-fun Robs1 (T0 T1 T1) Bool)
(declare-fun Roas0 (T0 T1 T1) Bool)
(assert (= anc_1033I x_1))
(assert (= anc_1032I x_0))
(assert (= l2 x_1))
(assert (= l2 anc_1033I))
(assert (= l1 x_0))
(assert (= l1 anc_1032I))
(declare-fun set0 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set0 bv0 bv1) false) :pattern ((set0 bv0 bv1)))))
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (Roas0 l1 bv0 bv1) (set0 bv0 bv1))
     :pattern ((Roas0 l1 bv0 bv1))
     :pattern ((set0 bv0 bv1)))))
(declare-fun set1 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set1 bv0 bv1) false) :pattern ((set1 bv0 bv1)))))
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (Robs1 l1 bv0 bv1) (set1 bv0 bv1))
     :pattern ((Robs1 l1 bv0 bv1))
     :pattern ((set1 bv0 bv1)))))
(declare-fun set2 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set2 bv0 bv1) false) :pattern ((set2 bv0 bv1)))))
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (Roa2 l1 bv0 bv1) (set2 bv0 bv1))
     :pattern ((Roa2 l1 bv0 bv1))
     :pattern ((set2 bv0 bv1)))))
(declare-fun set3 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set3 bv0 bv1) false) :pattern ((set3 bv0 bv1)))))
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (Rob3 l1 bv0 bv1) (set3 bv0 bv1))
     :pattern ((Rob3 l1 bv0 bv1))
     :pattern ((set3 bv0 bv1)))))
(declare-fun set4 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set4 bv0) false) :pattern ((set4 bv0)))))
(assert (forall ((bv0 T1))
  (! (= (Rmem4 l1 bv0) (set4 bv0))
     :pattern ((Rmem4 l1 bv0))
     :pattern ((set4 bv0)))))
(declare-fun set5 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set5 bv0) false) :pattern ((set5 bv0)))))
(assert (forall ((bv0 T1))
  (! (= (Rhd5 l1 bv0) (set5 bv0))
     :pattern ((Rhd5 l1 bv0))
     :pattern ((set5 bv0)))))
(assert (= v_6 x_1))
(assert (= v_6 anc_1033I))
(assert (= v_6 l2))
(declare-fun set6 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set6 bv0 bv1) (and (Rmem4 x_0 bv0) (Rmem4 x_1 bv1)))
     :pattern ((set6 bv0 bv1))
     :pattern ((Rmem4 x_0 bv0) (Rmem4 x_1 bv1)))))
(declare-fun set7 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set7 bv0 bv1) (or (Robs1 x_1 bv0 bv1) (set6 bv0 bv1)))
     :pattern ((set7 bv0 bv1))
     :pattern ((Robs1 x_1 bv0 bv1))
     :pattern ((set6 bv0 bv1)))))
(declare-fun set8 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set8 bv0 bv1) (or (Robs1 x_0 bv0 bv1) (set7 bv0 bv1)))
     :pattern ((set8 bv0 bv1))
     :pattern ((Robs1 x_0 bv0 bv1))
     :pattern ((set7 bv0 bv1)))))
(assert (not (forall ((bv1 T1) (bv0 T1))
       (! (= (Robs1 v_6 bv0 bv1) (set8 bv0 bv1))
          :pattern ((Robs1 v_6 bv0 bv1))
          :pattern ((set8 bv0 bv1))))))
(check-sat)

(declare-sort T2)
(declare-const v_6 T2)
(declare-const x_1 T2)
(declare-const x_0 T2)
(declare-const anc_1032I T2)
(declare-const anc_1033I T2)
(declare-const l1 T2)
(declare-const l2 T2)
(declare-const sv_4100 T2)
(declare-sort T3)
(declare-fun Rhd5 (T2 T3) Bool)
(declare-fun Rmem4 (T2 T3) Bool)
(declare-fun Rob3 (T2 T3 T3) Bool)
(declare-fun Roa2 (T2 T3 T3) Bool)
(declare-fun Robs1 (T2 T3 T3) Bool)
(declare-fun Roas0 (T2 T3 T3) Bool)
(assert (= anc_1033I x_1))
(assert (= anc_1032I x_0))
(assert (= l2 x_1))
(assert (= l2 anc_1033I))
(assert (= l1 x_0))
(assert (= l1 anc_1032I))
(declare-fun set9 (T3 T3) Bool)
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (set9 bv0 bv1) false) :pattern ((set9 bv0 bv1)))))
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (Roas0 l1 bv0 bv1) (set9 bv0 bv1))
     :pattern ((Roas0 l1 bv0 bv1))
     :pattern ((set9 bv0 bv1)))))
(declare-fun set10 (T3 T3) Bool)
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (set10 bv0 bv1) false) :pattern ((set10 bv0 bv1)))))
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (Robs1 l1 bv0 bv1) (set10 bv0 bv1))
     :pattern ((Robs1 l1 bv0 bv1))
     :pattern ((set10 bv0 bv1)))))
(declare-fun set11 (T3 T3) Bool)
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (set11 bv0 bv1) false) :pattern ((set11 bv0 bv1)))))
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (Roa2 l1 bv0 bv1) (set11 bv0 bv1))
     :pattern ((Roa2 l1 bv0 bv1))
     :pattern ((set11 bv0 bv1)))))
(declare-fun set12 (T3 T3) Bool)
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (set12 bv0 bv1) false) :pattern ((set12 bv0 bv1)))))
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (Rob3 l1 bv0 bv1) (set12 bv0 bv1))
     :pattern ((Rob3 l1 bv0 bv1))
     :pattern ((set12 bv0 bv1)))))
(declare-fun set13 (T3) Bool)
(assert (forall ((bv0 T3)) (! (= (set13 bv0) false) :pattern ((set13 bv0)))))
(assert (forall ((bv0 T3))
  (! (= (Rmem4 l1 bv0) (set13 bv0))
     :pattern ((Rmem4 l1 bv0))
     :pattern ((set13 bv0)))))
(declare-fun set14 (T3) Bool)
(assert (forall ((bv0 T3)) (! (= (set14 bv0) false) :pattern ((set14 bv0)))))
(assert (forall ((bv0 T3))
  (! (= (Rhd5 l1 bv0) (set14 bv0))
     :pattern ((Rhd5 l1 bv0))
     :pattern ((set14 bv0)))))
(assert (= v_6 x_1))
(assert (= v_6 anc_1033I))
(assert (= v_6 l2))
(declare-fun set15 (T3) Bool)
(assert (forall ((bv0 T3))
  (! (= (set15 bv0) (or (Rmem4 x_0 bv0) (Rmem4 x_1 bv0)))
     :pattern ((set15 bv0))
     :pattern ((Rmem4 x_0 bv0))
     :pattern ((Rmem4 x_1 bv0)))))
(assert (not (forall ((bv0 T3))
       (! (= (Rmem4 v_6 bv0) (set15 bv0))
          :pattern ((Rmem4 v_6 bv0))
          :pattern ((set15 bv0))))))
(check-sat)

(declare-sort T4)
(declare-const v_6 T4)
(declare-const x_1 T4)
(declare-const x_0 T4)
(declare-const anc_1032I T4)
(declare-const anc_1033I T4)
(declare-const l1 T4)
(declare-const l2 T4)
(declare-sort T5)
(declare-const x T5)
(declare-const xs T4)
(declare-const sv_4103 T4)
(declare-const anc_1035I T5)
(declare-const anc_1038I T4)
(declare-fun Rhd5 (T4 T5) Bool)
(declare-fun Rob4 (T4 T5 T5) Bool)
(declare-fun Roa3 (T4 T5 T5) Bool)
(declare-fun Robs2 (T4 T5 T5) Bool)
(declare-fun Rmem1 (T4 T5) Bool)
(declare-fun Roas0 (T4 T5 T5) Bool)
(assert (= anc_1033I x_1))
(assert (= anc_1032I x_0))
(assert (= l2 x_1))
(assert (= l2 anc_1033I))
(assert (= l1 x_0))
(assert (= l1 anc_1032I))
(declare-fun set16 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set16 bv0) (and (= bv0 x))) :pattern ((set16 bv0)))))
(declare-fun set17 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set17 bv0 bv1) (and (Rmem1 xs bv0) (set16 bv1)))
     :pattern ((set17 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set16 bv1)))))
(declare-fun set18 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set18 bv0 bv1) (or (set17 bv0 bv1) (Roas0 xs bv0 bv1)))
     :pattern ((set18 bv0 bv1))
     :pattern ((set17 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Roas0 l1 bv0 bv1) (set18 bv0 bv1))
     :pattern ((Roas0 l1 bv0 bv1))
     :pattern ((set18 bv0 bv1)))))
(declare-fun set19 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set19 bv0) (and (= bv0 x))) :pattern ((set19 bv0)))))
(declare-fun set20 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set20 bv0 bv1) (and (set19 bv0) (Rmem1 xs bv1)))
     :pattern ((set20 bv0 bv1))
     :pattern ((set19 bv0) (Rmem1 xs bv1)))))
(declare-fun set21 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set21 bv0 bv1) (or (set20 bv0 bv1) (Robs2 xs bv0 bv1)))
     :pattern ((set21 bv0 bv1))
     :pattern ((set20 bv0 bv1))
     :pattern ((Robs2 xs bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Robs2 l1 bv0 bv1) (set21 bv0 bv1))
     :pattern ((Robs2 l1 bv0 bv1))
     :pattern ((set21 bv0 bv1)))))
(declare-fun set22 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set22 bv0) (and (= bv0 x))) :pattern ((set22 bv0)))))
(declare-fun set23 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set23 bv0 bv1) (and (Rmem1 xs bv0) (set22 bv1)))
     :pattern ((set23 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set22 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Roa3 l1 bv0 bv1) (set23 bv0 bv1))
     :pattern ((Roa3 l1 bv0 bv1))
     :pattern ((set23 bv0 bv1)))))
(declare-fun set24 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set24 bv0) (and (= bv0 x))) :pattern ((set24 bv0)))))
(declare-fun set25 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set25 bv0 bv1) (and (set24 bv0) (Rmem1 xs bv1)))
     :pattern ((set25 bv0 bv1))
     :pattern ((set24 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rob4 l1 bv0 bv1) (set25 bv0 bv1))
     :pattern ((Rob4 l1 bv0 bv1))
     :pattern ((set25 bv0 bv1)))))
(declare-fun set26 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set26 bv0) (and (= bv0 x))) :pattern ((set26 bv0)))))
(declare-fun set27 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set27 bv0) (or (set26 bv0) (Rmem1 xs bv0)))
     :pattern ((set27 bv0))
     :pattern ((set26 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rmem1 l1 bv0) (set27 bv0))
     :pattern ((Rmem1 l1 bv0))
     :pattern ((set27 bv0)))))
(declare-fun set28 (T5) Bool)
(assert (forall ((bv0 T5)) (! (= (set28 bv0) (and (= bv0 x))) :pattern ((set28 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rhd5 l1 bv0) (set28 bv0))
     :pattern ((Rhd5 l1 bv0))
     :pattern ((set28 bv0)))))
(declare-fun set29 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set29 bv0 bv1) (and (Rmem1 xs bv0) (Rmem1 l2 bv1)))
     :pattern ((set29 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (Rmem1 l2 bv1)))))
(declare-fun set30 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set30 bv0 bv1) (or (Robs2 l2 bv0 bv1) (set29 bv0 bv1)))
     :pattern ((set30 bv0 bv1))
     :pattern ((Robs2 l2 bv0 bv1))
     :pattern ((set29 bv0 bv1)))))
(declare-fun set31 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set31 bv0 bv1) (or (Robs2 xs bv0 bv1) (set30 bv0 bv1)))
     :pattern ((set31 bv0 bv1))
     :pattern ((Robs2 xs bv0 bv1))
     :pattern ((set30 bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Robs2 anc_1038I bv0 bv1) (set31 bv0 bv1))
     :pattern ((Robs2 anc_1038I bv0 bv1))
     :pattern ((set31 bv0 bv1)))))
(declare-fun set32 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set32 bv0) (or (Rmem1 xs bv0) (Rmem1 l2 bv0)))
     :pattern ((set32 bv0))
     :pattern ((Rmem1 xs bv0))
     :pattern ((Rmem1 l2 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rmem1 anc_1038I bv0) (set32 bv0))
     :pattern ((Rmem1 anc_1038I bv0))
     :pattern ((set32 bv0)))))
(assert (= anc_1035I x))
(declare-fun set33 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set33 bv0) (and (= bv0 anc_1035I))) :pattern ((set33 bv0)))))
(declare-fun set34 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set34 bv0 bv1) (and (Rmem1 anc_1038I bv0) (set33 bv1)))
     :pattern ((set34 bv0 bv1))
     :pattern ((Rmem1 anc_1038I bv0) (set33 bv1)))))
(declare-fun set35 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set35 bv0 bv1) (or (set34 bv0 bv1) (Roas0 anc_1038I bv0 bv1)))
     :pattern ((set35 bv0 bv1))
     :pattern ((set34 bv0 bv1))
     :pattern ((Roas0 anc_1038I bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Roas0 v_6 bv0 bv1) (set35 bv0 bv1))
     :pattern ((Roas0 v_6 bv0 bv1))
     :pattern ((set35 bv0 bv1)))))
(declare-fun set36 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set36 bv0) (and (= bv0 anc_1035I))) :pattern ((set36 bv0)))))
(declare-fun set37 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set37 bv0 bv1) (and (set36 bv0) (Rmem1 anc_1038I bv1)))
     :pattern ((set37 bv0 bv1))
     :pattern ((set36 bv0) (Rmem1 anc_1038I bv1)))))
(declare-fun set38 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set38 bv0 bv1) (or (set37 bv0 bv1) (Robs2 anc_1038I bv0 bv1)))
     :pattern ((set38 bv0 bv1))
     :pattern ((set37 bv0 bv1))
     :pattern ((Robs2 anc_1038I bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Robs2 v_6 bv0 bv1) (set38 bv0 bv1))
     :pattern ((Robs2 v_6 bv0 bv1))
     :pattern ((set38 bv0 bv1)))))
(declare-fun set39 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set39 bv0) (and (= bv0 anc_1035I))) :pattern ((set39 bv0)))))
(declare-fun set40 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set40 bv0 bv1) (and (Rmem1 anc_1038I bv0) (set39 bv1)))
     :pattern ((set40 bv0 bv1))
     :pattern ((Rmem1 anc_1038I bv0) (set39 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Roa3 v_6 bv0 bv1) (set40 bv0 bv1))
     :pattern ((Roa3 v_6 bv0 bv1))
     :pattern ((set40 bv0 bv1)))))
(declare-fun set41 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set41 bv0) (and (= bv0 anc_1035I))) :pattern ((set41 bv0)))))
(declare-fun set42 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set42 bv0 bv1) (and (set41 bv0) (Rmem1 anc_1038I bv1)))
     :pattern ((set42 bv0 bv1))
     :pattern ((set41 bv0) (Rmem1 anc_1038I bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rob4 v_6 bv0 bv1) (set42 bv0 bv1))
     :pattern ((Rob4 v_6 bv0 bv1))
     :pattern ((set42 bv0 bv1)))))
(declare-fun set43 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set43 bv0) (and (= bv0 anc_1035I))) :pattern ((set43 bv0)))))
(declare-fun set44 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set44 bv0) (or (set43 bv0) (Rmem1 anc_1038I bv0)))
     :pattern ((set44 bv0))
     :pattern ((set43 bv0))
     :pattern ((Rmem1 anc_1038I bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rmem1 v_6 bv0) (set44 bv0))
     :pattern ((Rmem1 v_6 bv0))
     :pattern ((set44 bv0)))))
(declare-fun set45 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set45 bv0) (and (= bv0 anc_1035I))) :pattern ((set45 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rhd5 v_6 bv0) (set45 bv0))
     :pattern ((Rhd5 v_6 bv0))
     :pattern ((set45 bv0)))))
(declare-fun set46 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set46 bv0 bv1) (and (Rmem1 x_0 bv0) (Rmem1 x_1 bv1)))
     :pattern ((set46 bv0 bv1))
     :pattern ((Rmem1 x_0 bv0) (Rmem1 x_1 bv1)))))
(declare-fun set47 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set47 bv0 bv1) (or (Robs2 x_1 bv0 bv1) (set46 bv0 bv1)))
     :pattern ((set47 bv0 bv1))
     :pattern ((Robs2 x_1 bv0 bv1))
     :pattern ((set46 bv0 bv1)))))
(declare-fun set48 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set48 bv0 bv1) (or (Robs2 x_0 bv0 bv1) (set47 bv0 bv1)))
     :pattern ((set48 bv0 bv1))
     :pattern ((Robs2 x_0 bv0 bv1))
     :pattern ((set47 bv0 bv1)))))
(assert (not (forall ((bv1 T5) (bv0 T5))
       (! (= (Robs2 v_6 bv0 bv1) (set48 bv0 bv1))
          :pattern ((Robs2 v_6 bv0 bv1))
          :pattern ((set48 bv0 bv1))))))
(check-sat)

(declare-sort T6)
(declare-const v_6 T6)
(declare-const x_1 T6)
(declare-const x_0 T6)
(declare-const anc_1032I T6)
(declare-const anc_1033I T6)
(declare-const l1 T6)
(declare-const l2 T6)
(declare-sort T7)
(declare-const x T7)
(declare-const xs T6)
(declare-const sv_4103 T6)
(declare-const anc_1035I T7)
(declare-const anc_1038I T6)
(declare-fun Rhd5 (T6 T7) Bool)
(declare-fun Rob4 (T6 T7 T7) Bool)
(declare-fun Roa3 (T6 T7 T7) Bool)
(declare-fun Robs2 (T6 T7 T7) Bool)
(declare-fun Rmem1 (T6 T7) Bool)
(declare-fun Roas0 (T6 T7 T7) Bool)
(assert (= anc_1033I x_1))
(assert (= anc_1032I x_0))
(assert (= l2 x_1))
(assert (= l2 anc_1033I))
(assert (= l1 x_0))
(assert (= l1 anc_1032I))
(declare-fun set49 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set49 bv0) (and (= bv0 x))) :pattern ((set49 bv0)))))
(declare-fun set50 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set50 bv0 bv1) (and (Rmem1 xs bv0) (set49 bv1)))
     :pattern ((set50 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set49 bv1)))))
(declare-fun set51 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set51 bv0 bv1) (or (set50 bv0 bv1) (Roas0 xs bv0 bv1)))
     :pattern ((set51 bv0 bv1))
     :pattern ((set50 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Roas0 l1 bv0 bv1) (set51 bv0 bv1))
     :pattern ((Roas0 l1 bv0 bv1))
     :pattern ((set51 bv0 bv1)))))
(declare-fun set52 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set52 bv0) (and (= bv0 x))) :pattern ((set52 bv0)))))
(declare-fun set53 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set53 bv0 bv1) (and (set52 bv0) (Rmem1 xs bv1)))
     :pattern ((set53 bv0 bv1))
     :pattern ((set52 bv0) (Rmem1 xs bv1)))))
(declare-fun set54 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set54 bv0 bv1) (or (set53 bv0 bv1) (Robs2 xs bv0 bv1)))
     :pattern ((set54 bv0 bv1))
     :pattern ((set53 bv0 bv1))
     :pattern ((Robs2 xs bv0 bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Robs2 l1 bv0 bv1) (set54 bv0 bv1))
     :pattern ((Robs2 l1 bv0 bv1))
     :pattern ((set54 bv0 bv1)))))
(declare-fun set55 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set55 bv0) (and (= bv0 x))) :pattern ((set55 bv0)))))
(declare-fun set56 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set56 bv0 bv1) (and (Rmem1 xs bv0) (set55 bv1)))
     :pattern ((set56 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set55 bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Roa3 l1 bv0 bv1) (set56 bv0 bv1))
     :pattern ((Roa3 l1 bv0 bv1))
     :pattern ((set56 bv0 bv1)))))
(declare-fun set57 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set57 bv0) (and (= bv0 x))) :pattern ((set57 bv0)))))
(declare-fun set58 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set58 bv0 bv1) (and (set57 bv0) (Rmem1 xs bv1)))
     :pattern ((set58 bv0 bv1))
     :pattern ((set57 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Rob4 l1 bv0 bv1) (set58 bv0 bv1))
     :pattern ((Rob4 l1 bv0 bv1))
     :pattern ((set58 bv0 bv1)))))
(declare-fun set59 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set59 bv0) (and (= bv0 x))) :pattern ((set59 bv0)))))
(declare-fun set60 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set60 bv0) (or (set59 bv0) (Rmem1 xs bv0)))
     :pattern ((set60 bv0))
     :pattern ((set59 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rmem1 l1 bv0) (set60 bv0))
     :pattern ((Rmem1 l1 bv0))
     :pattern ((set60 bv0)))))
(declare-fun set61 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set61 bv0) (and (= bv0 x))) :pattern ((set61 bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rhd5 l1 bv0) (set61 bv0))
     :pattern ((Rhd5 l1 bv0))
     :pattern ((set61 bv0)))))
(declare-fun set62 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set62 bv0 bv1) (and (Rmem1 xs bv0) (Rmem1 l2 bv1)))
     :pattern ((set62 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (Rmem1 l2 bv1)))))
(declare-fun set63 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set63 bv0 bv1) (or (Robs2 l2 bv0 bv1) (set62 bv0 bv1)))
     :pattern ((set63 bv0 bv1))
     :pattern ((Robs2 l2 bv0 bv1))
     :pattern ((set62 bv0 bv1)))))
(declare-fun set64 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set64 bv0 bv1) (or (Robs2 xs bv0 bv1) (set63 bv0 bv1)))
     :pattern ((set64 bv0 bv1))
     :pattern ((Robs2 xs bv0 bv1))
     :pattern ((set63 bv0 bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Robs2 anc_1038I bv0 bv1) (set64 bv0 bv1))
     :pattern ((Robs2 anc_1038I bv0 bv1))
     :pattern ((set64 bv0 bv1)))))
(declare-fun set65 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set65 bv0) (or (Rmem1 xs bv0) (Rmem1 l2 bv0)))
     :pattern ((set65 bv0))
     :pattern ((Rmem1 xs bv0))
     :pattern ((Rmem1 l2 bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rmem1 anc_1038I bv0) (set65 bv0))
     :pattern ((Rmem1 anc_1038I bv0))
     :pattern ((set65 bv0)))))
(assert (= anc_1035I x))
(declare-fun set66 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set66 bv0) (and (= bv0 anc_1035I))) :pattern ((set66 bv0)))))
(declare-fun set67 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set67 bv0 bv1) (and (Rmem1 anc_1038I bv0) (set66 bv1)))
     :pattern ((set67 bv0 bv1))
     :pattern ((Rmem1 anc_1038I bv0) (set66 bv1)))))
(declare-fun set68 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set68 bv0 bv1) (or (set67 bv0 bv1) (Roas0 anc_1038I bv0 bv1)))
     :pattern ((set68 bv0 bv1))
     :pattern ((set67 bv0 bv1))
     :pattern ((Roas0 anc_1038I bv0 bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Roas0 v_6 bv0 bv1) (set68 bv0 bv1))
     :pattern ((Roas0 v_6 bv0 bv1))
     :pattern ((set68 bv0 bv1)))))
(declare-fun set69 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set69 bv0) (and (= bv0 anc_1035I))) :pattern ((set69 bv0)))))
(declare-fun set70 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set70 bv0 bv1) (and (set69 bv0) (Rmem1 anc_1038I bv1)))
     :pattern ((set70 bv0 bv1))
     :pattern ((set69 bv0) (Rmem1 anc_1038I bv1)))))
(declare-fun set71 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set71 bv0 bv1) (or (set70 bv0 bv1) (Robs2 anc_1038I bv0 bv1)))
     :pattern ((set71 bv0 bv1))
     :pattern ((set70 bv0 bv1))
     :pattern ((Robs2 anc_1038I bv0 bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Robs2 v_6 bv0 bv1) (set71 bv0 bv1))
     :pattern ((Robs2 v_6 bv0 bv1))
     :pattern ((set71 bv0 bv1)))))
(declare-fun set72 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set72 bv0) (and (= bv0 anc_1035I))) :pattern ((set72 bv0)))))
(declare-fun set73 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set73 bv0 bv1) (and (Rmem1 anc_1038I bv0) (set72 bv1)))
     :pattern ((set73 bv0 bv1))
     :pattern ((Rmem1 anc_1038I bv0) (set72 bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Roa3 v_6 bv0 bv1) (set73 bv0 bv1))
     :pattern ((Roa3 v_6 bv0 bv1))
     :pattern ((set73 bv0 bv1)))))
(declare-fun set74 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set74 bv0) (and (= bv0 anc_1035I))) :pattern ((set74 bv0)))))
(declare-fun set75 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set75 bv0 bv1) (and (set74 bv0) (Rmem1 anc_1038I bv1)))
     :pattern ((set75 bv0 bv1))
     :pattern ((set74 bv0) (Rmem1 anc_1038I bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Rob4 v_6 bv0 bv1) (set75 bv0 bv1))
     :pattern ((Rob4 v_6 bv0 bv1))
     :pattern ((set75 bv0 bv1)))))
(declare-fun set76 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set76 bv0) (and (= bv0 anc_1035I))) :pattern ((set76 bv0)))))
(declare-fun set77 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set77 bv0) (or (set76 bv0) (Rmem1 anc_1038I bv0)))
     :pattern ((set77 bv0))
     :pattern ((set76 bv0))
     :pattern ((Rmem1 anc_1038I bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rmem1 v_6 bv0) (set77 bv0))
     :pattern ((Rmem1 v_6 bv0))
     :pattern ((set77 bv0)))))
(declare-fun set78 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set78 bv0) (and (= bv0 anc_1035I))) :pattern ((set78 bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rhd5 v_6 bv0) (set78 bv0))
     :pattern ((Rhd5 v_6 bv0))
     :pattern ((set78 bv0)))))
(declare-fun set79 (T7) Bool)
(assert (forall ((bv0 T7))
  (! (= (set79 bv0) (or (Rmem1 x_0 bv0) (Rmem1 x_1 bv0)))
     :pattern ((set79 bv0))
     :pattern ((Rmem1 x_0 bv0))
     :pattern ((Rmem1 x_1 bv0)))))
(assert (not (forall ((bv0 T7))
       (! (= (Rmem1 v_6 bv0) (set79 bv0))
          :pattern ((Rmem1 v_6 bv0))
          :pattern ((set79 bv0))))))
(check-sat)

(declare-sort T8)
(declare-const v_9 T8)
(declare-const x_2 T8)
(declare-const l T8)
(declare-const sv_4108 T8)
(declare-sort T9)
(declare-fun Rhd5 (T8 T9) Bool)
(declare-fun Rmem4 (T8 T9) Bool)
(declare-fun Rob3 (T8 T9 T9) Bool)
(declare-fun Roa2 (T8 T9 T9) Bool)
(declare-fun Robs1 (T8 T9 T9) Bool)
(declare-fun Roas0 (T8 T9 T9) Bool)
(assert (= l x_2))
(declare-fun set80 (T9 T9) Bool)
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (set80 bv0 bv1) false) :pattern ((set80 bv0 bv1)))))
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (Roas0 l bv0 bv1) (set80 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set80 bv0 bv1)))))
(declare-fun set81 (T9 T9) Bool)
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (set81 bv0 bv1) false) :pattern ((set81 bv0 bv1)))))
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (Robs1 l bv0 bv1) (set81 bv0 bv1))
     :pattern ((Robs1 l bv0 bv1))
     :pattern ((set81 bv0 bv1)))))
(declare-fun set82 (T9 T9) Bool)
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (set82 bv0 bv1) false) :pattern ((set82 bv0 bv1)))))
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (Roa2 l bv0 bv1) (set82 bv0 bv1))
     :pattern ((Roa2 l bv0 bv1))
     :pattern ((set82 bv0 bv1)))))
(declare-fun set83 (T9 T9) Bool)
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (set83 bv0 bv1) false) :pattern ((set83 bv0 bv1)))))
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (Rob3 l bv0 bv1) (set83 bv0 bv1))
     :pattern ((Rob3 l bv0 bv1))
     :pattern ((set83 bv0 bv1)))))
(declare-fun set84 (T9) Bool)
(assert (forall ((bv0 T9)) (! (= (set84 bv0) false) :pattern ((set84 bv0)))))
(assert (forall ((bv0 T9))
  (! (= (Rmem4 l bv0) (set84 bv0))
     :pattern ((Rmem4 l bv0))
     :pattern ((set84 bv0)))))
(declare-fun set85 (T9) Bool)
(assert (forall ((bv0 T9)) (! (= (set85 bv0) false) :pattern ((set85 bv0)))))
(assert (forall ((bv0 T9))
  (! (= (Rhd5 l bv0) (set85 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set85 bv0)))))
(declare-fun set86 (T9 T9) Bool)
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (set86 bv0 bv1) false) :pattern ((set86 bv0 bv1)))))
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (Roas0 v_9 bv0 bv1) (set86 bv0 bv1))
     :pattern ((Roas0 v_9 bv0 bv1))
     :pattern ((set86 bv0 bv1)))))
(declare-fun set87 (T9 T9) Bool)
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (set87 bv0 bv1) false) :pattern ((set87 bv0 bv1)))))
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (Robs1 v_9 bv0 bv1) (set87 bv0 bv1))
     :pattern ((Robs1 v_9 bv0 bv1))
     :pattern ((set87 bv0 bv1)))))
(declare-fun set88 (T9 T9) Bool)
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (set88 bv0 bv1) false) :pattern ((set88 bv0 bv1)))))
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (Roa2 v_9 bv0 bv1) (set88 bv0 bv1))
     :pattern ((Roa2 v_9 bv0 bv1))
     :pattern ((set88 bv0 bv1)))))
(declare-fun set89 (T9 T9) Bool)
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (set89 bv0 bv1) false) :pattern ((set89 bv0 bv1)))))
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (Rob3 v_9 bv0 bv1) (set89 bv0 bv1))
     :pattern ((Rob3 v_9 bv0 bv1))
     :pattern ((set89 bv0 bv1)))))
(declare-fun set90 (T9) Bool)
(assert (forall ((bv0 T9)) (! (= (set90 bv0) false) :pattern ((set90 bv0)))))
(assert (forall ((bv0 T9))
  (! (= (Rmem4 v_9 bv0) (set90 bv0))
     :pattern ((Rmem4 v_9 bv0))
     :pattern ((set90 bv0)))))
(declare-fun set91 (T9) Bool)
(assert (forall ((bv0 T9)) (! (= (set91 bv0) false) :pattern ((set91 bv0)))))
(assert (forall ((bv0 T9))
  (! (= (Rhd5 v_9 bv0) (set91 bv0))
     :pattern ((Rhd5 v_9 bv0))
     :pattern ((set91 bv0)))))
(assert (not (forall ((bv1 T9) (bv0 T9))
       (! (= (Robs1 v_9 bv0 bv1) (Roas0 x_2 bv0 bv1))
          :pattern ((Robs1 v_9 bv0 bv1))
          :pattern ((Roas0 x_2 bv0 bv1))))))
(check-sat)

(declare-sort T10)
(declare-const v_9 T10)
(declare-const x_2 T10)
(declare-const l T10)
(declare-const sv_4108 T10)
(declare-sort T11)
(declare-fun Rhd5 (T10 T11) Bool)
(declare-fun Rmem4 (T10 T11) Bool)
(declare-fun Rob3 (T10 T11 T11) Bool)
(declare-fun Roa2 (T10 T11 T11) Bool)
(declare-fun Robs1 (T10 T11 T11) Bool)
(declare-fun Roas0 (T10 T11 T11) Bool)
(assert (= l x_2))
(declare-fun set92 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set92 bv0 bv1) false) :pattern ((set92 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Roas0 l bv0 bv1) (set92 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set92 bv0 bv1)))))
(declare-fun set93 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set93 bv0 bv1) false) :pattern ((set93 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Robs1 l bv0 bv1) (set93 bv0 bv1))
     :pattern ((Robs1 l bv0 bv1))
     :pattern ((set93 bv0 bv1)))))
(declare-fun set94 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set94 bv0 bv1) false) :pattern ((set94 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Roa2 l bv0 bv1) (set94 bv0 bv1))
     :pattern ((Roa2 l bv0 bv1))
     :pattern ((set94 bv0 bv1)))))
(declare-fun set95 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set95 bv0 bv1) false) :pattern ((set95 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rob3 l bv0 bv1) (set95 bv0 bv1))
     :pattern ((Rob3 l bv0 bv1))
     :pattern ((set95 bv0 bv1)))))
(declare-fun set96 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set96 bv0) false) :pattern ((set96 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rmem4 l bv0) (set96 bv0))
     :pattern ((Rmem4 l bv0))
     :pattern ((set96 bv0)))))
(declare-fun set97 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set97 bv0) false) :pattern ((set97 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rhd5 l bv0) (set97 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set97 bv0)))))
(declare-fun set98 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set98 bv0 bv1) false) :pattern ((set98 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Roas0 v_9 bv0 bv1) (set98 bv0 bv1))
     :pattern ((Roas0 v_9 bv0 bv1))
     :pattern ((set98 bv0 bv1)))))
(declare-fun set99 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set99 bv0 bv1) false) :pattern ((set99 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Robs1 v_9 bv0 bv1) (set99 bv0 bv1))
     :pattern ((Robs1 v_9 bv0 bv1))
     :pattern ((set99 bv0 bv1)))))
(declare-fun set100 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set100 bv0 bv1) false) :pattern ((set100 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Roa2 v_9 bv0 bv1) (set100 bv0 bv1))
     :pattern ((Roa2 v_9 bv0 bv1))
     :pattern ((set100 bv0 bv1)))))
(declare-fun set101 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set101 bv0 bv1) false) :pattern ((set101 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rob3 v_9 bv0 bv1) (set101 bv0 bv1))
     :pattern ((Rob3 v_9 bv0 bv1))
     :pattern ((set101 bv0 bv1)))))
(declare-fun set102 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set102 bv0) false) :pattern ((set102 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rmem4 v_9 bv0) (set102 bv0))
     :pattern ((Rmem4 v_9 bv0))
     :pattern ((set102 bv0)))))
(declare-fun set103 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set103 bv0) false) :pattern ((set103 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rhd5 v_9 bv0) (set103 bv0))
     :pattern ((Rhd5 v_9 bv0))
     :pattern ((set103 bv0)))))
(assert (not (forall ((bv0 T11))
       (! (= (Rmem4 v_9 bv0) (Rmem4 x_2 bv0))
          :pattern ((Rmem4 v_9 bv0))
          :pattern ((Rmem4 x_2 bv0))))))
(check-sat)

(declare-sort T12)
(declare-const v_9 T12)
(declare-const x_2 T12)
(declare-const l T12)
(declare-sort T13)
(declare-const x T13)
(declare-const xs T12)
(declare-const sv_4111 T12)
(declare-const anc_1026I T12)
(declare-const anc_1029I T13)
(declare-const anc_1030I T12)
(declare-const anc_1031I T12)
(declare-fun Rhd5 (T12 T13) Bool)
(declare-fun Rob4 (T12 T13 T13) Bool)
(declare-fun Roa3 (T12 T13 T13) Bool)
(declare-fun Robs2 (T12 T13 T13) Bool)
(declare-fun Rmem1 (T12 T13) Bool)
(declare-fun Roas0 (T12 T13 T13) Bool)
(assert (= l x_2))
(declare-fun set104 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set104 bv0) (and (= bv0 x))) :pattern ((set104 bv0)))))
(declare-fun set105 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set105 bv0 bv1) (and (Rmem1 xs bv0) (set104 bv1)))
     :pattern ((set105 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set104 bv1)))))
(declare-fun set106 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set106 bv0 bv1) (or (set105 bv0 bv1) (Roas0 xs bv0 bv1)))
     :pattern ((set106 bv0 bv1))
     :pattern ((set105 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Roas0 l bv0 bv1) (set106 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set106 bv0 bv1)))))
(declare-fun set107 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set107 bv0) (and (= bv0 x))) :pattern ((set107 bv0)))))
(declare-fun set108 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set108 bv0 bv1) (and (set107 bv0) (Rmem1 xs bv1)))
     :pattern ((set108 bv0 bv1))
     :pattern ((set107 bv0) (Rmem1 xs bv1)))))
(declare-fun set109 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set109 bv0 bv1) (or (set108 bv0 bv1) (Robs2 xs bv0 bv1)))
     :pattern ((set109 bv0 bv1))
     :pattern ((set108 bv0 bv1))
     :pattern ((Robs2 xs bv0 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Robs2 l bv0 bv1) (set109 bv0 bv1))
     :pattern ((Robs2 l bv0 bv1))
     :pattern ((set109 bv0 bv1)))))
(declare-fun set110 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set110 bv0) (and (= bv0 x))) :pattern ((set110 bv0)))))
(declare-fun set111 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set111 bv0 bv1) (and (Rmem1 xs bv0) (set110 bv1)))
     :pattern ((set111 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set110 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Roa3 l bv0 bv1) (set111 bv0 bv1))
     :pattern ((Roa3 l bv0 bv1))
     :pattern ((set111 bv0 bv1)))))
(declare-fun set112 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set112 bv0) (and (= bv0 x))) :pattern ((set112 bv0)))))
(declare-fun set113 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set113 bv0 bv1) (and (set112 bv0) (Rmem1 xs bv1)))
     :pattern ((set113 bv0 bv1))
     :pattern ((set112 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Rob4 l bv0 bv1) (set113 bv0 bv1))
     :pattern ((Rob4 l bv0 bv1))
     :pattern ((set113 bv0 bv1)))))
(declare-fun set114 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set114 bv0) (and (= bv0 x))) :pattern ((set114 bv0)))))
(declare-fun set115 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set115 bv0) (or (set114 bv0) (Rmem1 xs bv0)))
     :pattern ((set115 bv0))
     :pattern ((set114 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T13))
  (! (= (Rmem1 l bv0) (set115 bv0))
     :pattern ((Rmem1 l bv0))
     :pattern ((set115 bv0)))))
(declare-fun set116 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set116 bv0) (and (= bv0 x))) :pattern ((set116 bv0)))))
(assert (forall ((bv0 T13))
  (! (= (Rhd5 l bv0) (set116 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set116 bv0)))))
(declare-fun set117 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set117 bv0) (and (= bv0 anc_1029I))) :pattern ((set117 bv0)))))
(declare-fun set118 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set118 bv0 bv1) (and (Rmem1 anc_1030I bv0) (set117 bv1)))
     :pattern ((set118 bv0 bv1))
     :pattern ((Rmem1 anc_1030I bv0) (set117 bv1)))))
(declare-fun set119 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set119 bv0 bv1) (or (set118 bv0 bv1) (Roas0 anc_1030I bv0 bv1)))
     :pattern ((set119 bv0 bv1))
     :pattern ((set118 bv0 bv1))
     :pattern ((Roas0 anc_1030I bv0 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Roas0 anc_1031I bv0 bv1) (set119 bv0 bv1))
     :pattern ((Roas0 anc_1031I bv0 bv1))
     :pattern ((set119 bv0 bv1)))))
(declare-fun set120 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set120 bv0) (and (= bv0 anc_1029I))) :pattern ((set120 bv0)))))
(declare-fun set121 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set121 bv0 bv1) (and (set120 bv0) (Rmem1 anc_1030I bv1)))
     :pattern ((set121 bv0 bv1))
     :pattern ((set120 bv0) (Rmem1 anc_1030I bv1)))))
(declare-fun set122 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set122 bv0 bv1) (or (set121 bv0 bv1) (Robs2 anc_1030I bv0 bv1)))
     :pattern ((set122 bv0 bv1))
     :pattern ((set121 bv0 bv1))
     :pattern ((Robs2 anc_1030I bv0 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Robs2 anc_1031I bv0 bv1) (set122 bv0 bv1))
     :pattern ((Robs2 anc_1031I bv0 bv1))
     :pattern ((set122 bv0 bv1)))))
(declare-fun set123 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set123 bv0) (and (= bv0 anc_1029I))) :pattern ((set123 bv0)))))
(declare-fun set124 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set124 bv0 bv1) (and (Rmem1 anc_1030I bv0) (set123 bv1)))
     :pattern ((set124 bv0 bv1))
     :pattern ((Rmem1 anc_1030I bv0) (set123 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Roa3 anc_1031I bv0 bv1) (set124 bv0 bv1))
     :pattern ((Roa3 anc_1031I bv0 bv1))
     :pattern ((set124 bv0 bv1)))))
(declare-fun set125 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set125 bv0) (and (= bv0 anc_1029I))) :pattern ((set125 bv0)))))
(declare-fun set126 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set126 bv0 bv1) (and (set125 bv0) (Rmem1 anc_1030I bv1)))
     :pattern ((set126 bv0 bv1))
     :pattern ((set125 bv0) (Rmem1 anc_1030I bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Rob4 anc_1031I bv0 bv1) (set126 bv0 bv1))
     :pattern ((Rob4 anc_1031I bv0 bv1))
     :pattern ((set126 bv0 bv1)))))
(declare-fun set127 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set127 bv0) (and (= bv0 anc_1029I))) :pattern ((set127 bv0)))))
(declare-fun set128 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set128 bv0) (or (set127 bv0) (Rmem1 anc_1030I bv0)))
     :pattern ((set128 bv0))
     :pattern ((set127 bv0))
     :pattern ((Rmem1 anc_1030I bv0)))))
(assert (forall ((bv0 T13))
  (! (= (Rmem1 anc_1031I bv0) (set128 bv0))
     :pattern ((Rmem1 anc_1031I bv0))
     :pattern ((set128 bv0)))))
(declare-fun set129 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set129 bv0) (and (= bv0 anc_1029I))) :pattern ((set129 bv0)))))
(assert (forall ((bv0 T13))
  (! (= (Rhd5 anc_1031I bv0) (set129 bv0))
     :pattern ((Rhd5 anc_1031I bv0))
     :pattern ((set129 bv0)))))
(declare-fun set130 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set130 bv0 bv1) false) :pattern ((set130 bv0 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Roas0 anc_1030I bv0 bv1) (set130 bv0 bv1))
     :pattern ((Roas0 anc_1030I bv0 bv1))
     :pattern ((set130 bv0 bv1)))))
(declare-fun set131 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set131 bv0 bv1) false) :pattern ((set131 bv0 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Robs2 anc_1030I bv0 bv1) (set131 bv0 bv1))
     :pattern ((Robs2 anc_1030I bv0 bv1))
     :pattern ((set131 bv0 bv1)))))
(declare-fun set132 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set132 bv0 bv1) false) :pattern ((set132 bv0 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Roa3 anc_1030I bv0 bv1) (set132 bv0 bv1))
     :pattern ((Roa3 anc_1030I bv0 bv1))
     :pattern ((set132 bv0 bv1)))))
(declare-fun set133 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set133 bv0 bv1) false) :pattern ((set133 bv0 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Rob4 anc_1030I bv0 bv1) (set133 bv0 bv1))
     :pattern ((Rob4 anc_1030I bv0 bv1))
     :pattern ((set133 bv0 bv1)))))
(declare-fun set134 (T13) Bool)
(assert (forall ((bv0 T13)) (! (= (set134 bv0) false) :pattern ((set134 bv0)))))
(assert (forall ((bv0 T13))
  (! (= (Rmem1 anc_1030I bv0) (set134 bv0))
     :pattern ((Rmem1 anc_1030I bv0))
     :pattern ((set134 bv0)))))
(declare-fun set135 (T13) Bool)
(assert (forall ((bv0 T13)) (! (= (set135 bv0) false) :pattern ((set135 bv0)))))
(assert (forall ((bv0 T13))
  (! (= (Rhd5 anc_1030I bv0) (set135 bv0))
     :pattern ((Rhd5 anc_1030I bv0))
     :pattern ((set135 bv0)))))
(assert (= anc_1029I x))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Robs2 anc_1026I bv0 bv1) (Roas0 xs bv0 bv1))
     :pattern ((Robs2 anc_1026I bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv0 T13))
  (! (= (Rmem1 anc_1026I bv0) (Rmem1 xs bv0))
     :pattern ((Rmem1 anc_1026I bv0))
     :pattern ((Rmem1 xs bv0)))))
(declare-fun set136 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set136 bv0 bv1) (and (Rmem1 anc_1026I bv0) (Rmem1 anc_1031I bv1)))
     :pattern ((set136 bv0 bv1))
     :pattern ((Rmem1 anc_1026I bv0) (Rmem1 anc_1031I bv1)))))
(declare-fun set137 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set137 bv0 bv1) (or (Robs2 anc_1031I bv0 bv1) (set136 bv0 bv1)))
     :pattern ((set137 bv0 bv1))
     :pattern ((Robs2 anc_1031I bv0 bv1))
     :pattern ((set136 bv0 bv1)))))
(declare-fun set138 (T13 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (set138 bv0 bv1) (or (Robs2 anc_1026I bv0 bv1) (set137 bv0 bv1)))
     :pattern ((set138 bv0 bv1))
     :pattern ((Robs2 anc_1026I bv0 bv1))
     :pattern ((set137 bv0 bv1)))))
(assert (forall ((bv1 T13) (bv0 T13))
  (! (= (Robs2 v_9 bv0 bv1) (set138 bv0 bv1))
     :pattern ((Robs2 v_9 bv0 bv1))
     :pattern ((set138 bv0 bv1)))))
(declare-fun set139 (T13) Bool)
(assert (forall ((bv0 T13))
  (! (= (set139 bv0) (or (Rmem1 anc_1026I bv0) (Rmem1 anc_1031I bv0)))
     :pattern ((set139 bv0))
     :pattern ((Rmem1 anc_1026I bv0))
     :pattern ((Rmem1 anc_1031I bv0)))))
(assert (forall ((bv0 T13))
  (! (= (Rmem1 v_9 bv0) (set139 bv0))
     :pattern ((Rmem1 v_9 bv0))
     :pattern ((set139 bv0)))))
(assert (not (forall ((bv1 T13) (bv0 T13))
       (! (= (Robs2 v_9 bv0 bv1) (Roas0 x_2 bv0 bv1))
          :pattern ((Robs2 v_9 bv0 bv1))
          :pattern ((Roas0 x_2 bv0 bv1))))))
(check-sat)

(declare-sort T14)
(declare-const v_9 T14)
(declare-const x_2 T14)
(declare-const l T14)
(declare-sort T15)
(declare-const x T15)
(declare-const xs T14)
(declare-const sv_4111 T14)
(declare-const anc_1026I T14)
(declare-const anc_1029I T15)
(declare-const anc_1030I T14)
(declare-const anc_1031I T14)
(declare-fun Rhd5 (T14 T15) Bool)
(declare-fun Rob4 (T14 T15 T15) Bool)
(declare-fun Roa3 (T14 T15 T15) Bool)
(declare-fun Robs2 (T14 T15 T15) Bool)
(declare-fun Rmem1 (T14 T15) Bool)
(declare-fun Roas0 (T14 T15 T15) Bool)
(assert (= l x_2))
(declare-fun set140 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set140 bv0) (and (= bv0 x))) :pattern ((set140 bv0)))))
(declare-fun set141 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set141 bv0 bv1) (and (Rmem1 xs bv0) (set140 bv1)))
     :pattern ((set141 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set140 bv1)))))
(declare-fun set142 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set142 bv0 bv1) (or (set141 bv0 bv1) (Roas0 xs bv0 bv1)))
     :pattern ((set142 bv0 bv1))
     :pattern ((set141 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Roas0 l bv0 bv1) (set142 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set142 bv0 bv1)))))
(declare-fun set143 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set143 bv0) (and (= bv0 x))) :pattern ((set143 bv0)))))
(declare-fun set144 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set144 bv0 bv1) (and (set143 bv0) (Rmem1 xs bv1)))
     :pattern ((set144 bv0 bv1))
     :pattern ((set143 bv0) (Rmem1 xs bv1)))))
(declare-fun set145 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set145 bv0 bv1) (or (set144 bv0 bv1) (Robs2 xs bv0 bv1)))
     :pattern ((set145 bv0 bv1))
     :pattern ((set144 bv0 bv1))
     :pattern ((Robs2 xs bv0 bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Robs2 l bv0 bv1) (set145 bv0 bv1))
     :pattern ((Robs2 l bv0 bv1))
     :pattern ((set145 bv0 bv1)))))
(declare-fun set146 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set146 bv0) (and (= bv0 x))) :pattern ((set146 bv0)))))
(declare-fun set147 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set147 bv0 bv1) (and (Rmem1 xs bv0) (set146 bv1)))
     :pattern ((set147 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set146 bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Roa3 l bv0 bv1) (set147 bv0 bv1))
     :pattern ((Roa3 l bv0 bv1))
     :pattern ((set147 bv0 bv1)))))
(declare-fun set148 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set148 bv0) (and (= bv0 x))) :pattern ((set148 bv0)))))
(declare-fun set149 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set149 bv0 bv1) (and (set148 bv0) (Rmem1 xs bv1)))
     :pattern ((set149 bv0 bv1))
     :pattern ((set148 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Rob4 l bv0 bv1) (set149 bv0 bv1))
     :pattern ((Rob4 l bv0 bv1))
     :pattern ((set149 bv0 bv1)))))
(declare-fun set150 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set150 bv0) (and (= bv0 x))) :pattern ((set150 bv0)))))
(declare-fun set151 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set151 bv0) (or (set150 bv0) (Rmem1 xs bv0)))
     :pattern ((set151 bv0))
     :pattern ((set150 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T15))
  (! (= (Rmem1 l bv0) (set151 bv0))
     :pattern ((Rmem1 l bv0))
     :pattern ((set151 bv0)))))
(declare-fun set152 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set152 bv0) (and (= bv0 x))) :pattern ((set152 bv0)))))
(assert (forall ((bv0 T15))
  (! (= (Rhd5 l bv0) (set152 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set152 bv0)))))
(declare-fun set153 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set153 bv0) (and (= bv0 anc_1029I))) :pattern ((set153 bv0)))))
(declare-fun set154 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set154 bv0 bv1) (and (Rmem1 anc_1030I bv0) (set153 bv1)))
     :pattern ((set154 bv0 bv1))
     :pattern ((Rmem1 anc_1030I bv0) (set153 bv1)))))
(declare-fun set155 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set155 bv0 bv1) (or (set154 bv0 bv1) (Roas0 anc_1030I bv0 bv1)))
     :pattern ((set155 bv0 bv1))
     :pattern ((set154 bv0 bv1))
     :pattern ((Roas0 anc_1030I bv0 bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Roas0 anc_1031I bv0 bv1) (set155 bv0 bv1))
     :pattern ((Roas0 anc_1031I bv0 bv1))
     :pattern ((set155 bv0 bv1)))))
(declare-fun set156 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set156 bv0) (and (= bv0 anc_1029I))) :pattern ((set156 bv0)))))
(declare-fun set157 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set157 bv0 bv1) (and (set156 bv0) (Rmem1 anc_1030I bv1)))
     :pattern ((set157 bv0 bv1))
     :pattern ((set156 bv0) (Rmem1 anc_1030I bv1)))))
(declare-fun set158 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set158 bv0 bv1) (or (set157 bv0 bv1) (Robs2 anc_1030I bv0 bv1)))
     :pattern ((set158 bv0 bv1))
     :pattern ((set157 bv0 bv1))
     :pattern ((Robs2 anc_1030I bv0 bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Robs2 anc_1031I bv0 bv1) (set158 bv0 bv1))
     :pattern ((Robs2 anc_1031I bv0 bv1))
     :pattern ((set158 bv0 bv1)))))
(declare-fun set159 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set159 bv0) (and (= bv0 anc_1029I))) :pattern ((set159 bv0)))))
(declare-fun set160 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set160 bv0 bv1) (and (Rmem1 anc_1030I bv0) (set159 bv1)))
     :pattern ((set160 bv0 bv1))
     :pattern ((Rmem1 anc_1030I bv0) (set159 bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Roa3 anc_1031I bv0 bv1) (set160 bv0 bv1))
     :pattern ((Roa3 anc_1031I bv0 bv1))
     :pattern ((set160 bv0 bv1)))))
(declare-fun set161 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set161 bv0) (and (= bv0 anc_1029I))) :pattern ((set161 bv0)))))
(declare-fun set162 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set162 bv0 bv1) (and (set161 bv0) (Rmem1 anc_1030I bv1)))
     :pattern ((set162 bv0 bv1))
     :pattern ((set161 bv0) (Rmem1 anc_1030I bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Rob4 anc_1031I bv0 bv1) (set162 bv0 bv1))
     :pattern ((Rob4 anc_1031I bv0 bv1))
     :pattern ((set162 bv0 bv1)))))
(declare-fun set163 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set163 bv0) (and (= bv0 anc_1029I))) :pattern ((set163 bv0)))))
(declare-fun set164 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set164 bv0) (or (set163 bv0) (Rmem1 anc_1030I bv0)))
     :pattern ((set164 bv0))
     :pattern ((set163 bv0))
     :pattern ((Rmem1 anc_1030I bv0)))))
(assert (forall ((bv0 T15))
  (! (= (Rmem1 anc_1031I bv0) (set164 bv0))
     :pattern ((Rmem1 anc_1031I bv0))
     :pattern ((set164 bv0)))))
(declare-fun set165 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set165 bv0) (and (= bv0 anc_1029I))) :pattern ((set165 bv0)))))
(assert (forall ((bv0 T15))
  (! (= (Rhd5 anc_1031I bv0) (set165 bv0))
     :pattern ((Rhd5 anc_1031I bv0))
     :pattern ((set165 bv0)))))
(declare-fun set166 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set166 bv0 bv1) false) :pattern ((set166 bv0 bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Roas0 anc_1030I bv0 bv1) (set166 bv0 bv1))
     :pattern ((Roas0 anc_1030I bv0 bv1))
     :pattern ((set166 bv0 bv1)))))
(declare-fun set167 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set167 bv0 bv1) false) :pattern ((set167 bv0 bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Robs2 anc_1030I bv0 bv1) (set167 bv0 bv1))
     :pattern ((Robs2 anc_1030I bv0 bv1))
     :pattern ((set167 bv0 bv1)))))
(declare-fun set168 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set168 bv0 bv1) false) :pattern ((set168 bv0 bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Roa3 anc_1030I bv0 bv1) (set168 bv0 bv1))
     :pattern ((Roa3 anc_1030I bv0 bv1))
     :pattern ((set168 bv0 bv1)))))
(declare-fun set169 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set169 bv0 bv1) false) :pattern ((set169 bv0 bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Rob4 anc_1030I bv0 bv1) (set169 bv0 bv1))
     :pattern ((Rob4 anc_1030I bv0 bv1))
     :pattern ((set169 bv0 bv1)))))
(declare-fun set170 (T15) Bool)
(assert (forall ((bv0 T15)) (! (= (set170 bv0) false) :pattern ((set170 bv0)))))
(assert (forall ((bv0 T15))
  (! (= (Rmem1 anc_1030I bv0) (set170 bv0))
     :pattern ((Rmem1 anc_1030I bv0))
     :pattern ((set170 bv0)))))
(declare-fun set171 (T15) Bool)
(assert (forall ((bv0 T15)) (! (= (set171 bv0) false) :pattern ((set171 bv0)))))
(assert (forall ((bv0 T15))
  (! (= (Rhd5 anc_1030I bv0) (set171 bv0))
     :pattern ((Rhd5 anc_1030I bv0))
     :pattern ((set171 bv0)))))
(assert (= anc_1029I x))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Robs2 anc_1026I bv0 bv1) (Roas0 xs bv0 bv1))
     :pattern ((Robs2 anc_1026I bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv0 T15))
  (! (= (Rmem1 anc_1026I bv0) (Rmem1 xs bv0))
     :pattern ((Rmem1 anc_1026I bv0))
     :pattern ((Rmem1 xs bv0)))))
(declare-fun set172 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set172 bv0 bv1) (and (Rmem1 anc_1026I bv0) (Rmem1 anc_1031I bv1)))
     :pattern ((set172 bv0 bv1))
     :pattern ((Rmem1 anc_1026I bv0) (Rmem1 anc_1031I bv1)))))
(declare-fun set173 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set173 bv0 bv1) (or (Robs2 anc_1031I bv0 bv1) (set172 bv0 bv1)))
     :pattern ((set173 bv0 bv1))
     :pattern ((Robs2 anc_1031I bv0 bv1))
     :pattern ((set172 bv0 bv1)))))
(declare-fun set174 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set174 bv0 bv1) (or (Robs2 anc_1026I bv0 bv1) (set173 bv0 bv1)))
     :pattern ((set174 bv0 bv1))
     :pattern ((Robs2 anc_1026I bv0 bv1))
     :pattern ((set173 bv0 bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Robs2 v_9 bv0 bv1) (set174 bv0 bv1))
     :pattern ((Robs2 v_9 bv0 bv1))
     :pattern ((set174 bv0 bv1)))))
(declare-fun set175 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set175 bv0) (or (Rmem1 anc_1026I bv0) (Rmem1 anc_1031I bv0)))
     :pattern ((set175 bv0))
     :pattern ((Rmem1 anc_1026I bv0))
     :pattern ((Rmem1 anc_1031I bv0)))))
(assert (forall ((bv0 T15))
  (! (= (Rmem1 v_9 bv0) (set175 bv0))
     :pattern ((Rmem1 v_9 bv0))
     :pattern ((set175 bv0)))))
(assert (not (forall ((bv0 T15))
       (! (= (Rmem1 v_9 bv0) (Rmem1 x_2 bv0))
          :pattern ((Rmem1 v_9 bv0))
          :pattern ((Rmem1 x_2 bv0))))))
(check-sat)

