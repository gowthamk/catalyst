Catalyst rexported (built Sat Feb 15 11:56:42 EST 2014 on tycon.lan)
  created this file on Wed Mar 05 12:13:18 2014.
Do not edit this file.
Flag settings: 
   align: 4
   atMLtons: ()
   chunk: coalesce 4096
   closureConvertGlobalize: true
   closureConvertShrink: true
   codegen: x86
   contifyIntoMain: false
   debug: false
   defaultChar: char8
   defaultWideChar: widechar32
   defaultInt: int32
   defaultReal: real64
   defaultWord: word32
   diag passes: []
   drop passes: []
   elaborate allowConstant (default): false
   elaborate allowConstant (enabled): true
   elaborate allowFFI (default): false
   elaborate allowFFI (enabled): true
   elaborate allowPrim (default): false
   elaborate allowPrim (enabled): true
   elaborate allowOverload (default): false
   elaborate allowOverload (enabled): true
   elaborate allowRebindEquals (default): false
   elaborate allowRebindEquals (enabled): true
   elaborate deadCode (default): false
   elaborate deadCode (enabled): true
   elaborate forceUsed (default): false
   elaborate forceUsed (enabled): true
   elaborate ffiStr (default): 
   elaborate ffiStr (enabled): true
   elaborate nonexhaustiveExnMatch (default): default
   elaborate nonexhaustiveExnMatch (enabled): true
   elaborate nonexhaustiveMatch (default): warn
   elaborate nonexhaustiveMatch (enabled): true
   elaborate redundantMatch (default): warn
   elaborate redundantMatch (enabled): true
   elaborate resolveScope (default): strdec
   elaborate resolveScope (enabled): true
   elaborate sequenceNonUnit (default): ignore
   elaborate sequenceNonUnit (enabled): true
   elaborate warnUnused (default): false
   elaborate warnUnused (enabled): true
   elaborate only: false
   emit main: true
   export header: None
   exn history: false
   generated output format: executable
   gc check: Limit
   indentation: 3
   inlineIntoMain: true
   inlineLeafA: {loops = true, repeat = true, size = Some 20}
   inlineLeafB: {loops = true, repeat = true, size = Some 40}
   inlineNonRec: {small = 60, product = 320}
   input file: fold.an-core-ml
   spec file: test/fold.spec
   keep CoreML: true
   keep Env: false
   keep def use: true
   keep dot: false
   keep Machine: false
   keep passes: []
   keep RSSA: false
   keep SSA: false
   keep SSA2: false
   keep SXML: false
   keep XML: false
   extra_: false
   lib dir: /Users/gowtham/git/mlton/newexecs/usr/local/lib/mlton
   lib target dir: /Users/gowtham/git/mlton/newexecs/usr/local/lib/mlton/targets/self
   loop passes: 1
   mark cards: true
   max function size: 10000
   mlb path vars: [{var = MLTON_ROOT, path = $(LIB_MLTON_DIR)/sml}, {var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}]
   native commented: 0
   native live stack: false
   native optimize: 1
   native move hoist: true
   native copy prop: true
   native copy prop cutoff: 1000
   native cutoff: 100
   native live transfer: 8
   native shuffle: true
   native ieee fp: false
   native split: Some 20000
   optimizationPasses: []
   polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300}
   prefer abs paths: false
   prof passes: []
   profile: None
   profile branch: false
   profile C: []
   profile IL: ProfileSource
   profile include/exclude: []
   profile raise: false
   profile stack: false
   profile val: false
   show basis: None
   show def-use: None
   show types: true
   target: self
   target arch: X86
   target OS: Linux
   type check: false
   verbosity: Pass
   warn unrecognized annotation: true
   warn deprecated features: true
   zone cut depth: 100


Decs:
datatype 'a_2 list = nil
		     | :: of 'a_2 * 'a_2 list
		     | cons of 'a_2 * 'a_2 list
val rec ('b, 'a)
   foldl: 'a list -> 'b -> ('a -> 'b -> 'b) -> 'b = 
      (fn x_0: 'a list =>
       (fn x_1: 'b =>
	(fn x_2: 'a -> 'b -> 'b =>
	 let val anc_9 =. x_0
	     val anc_10 =. x_1
	     val anc_11 =. x_2
	 in
	    case (anc_9, anc_10, anc_11) of
	      (l, b, f) =>
	      case l of
		nil['a] => b
	      | ::['a](x, xs) =>
		let val anc_12 =. foldl ('b, 'a)
		    val anc_13 =. (anc_12 xs)
		    val anc_14 =. f
		    val anc_15 =. (anc_14 x)
		    val anc_16 =. (anc_15 b)
		    val anc_17 =. (anc_13 anc_16)
		in
		   (anc_17 f)
		end
	 end)))
val rec ('b, 'a)
   foldr: 'a list -> 'b -> ('a -> 'b -> 'b) -> 'b = 
      (fn x_3: 'a list =>
       (fn x_4: 'b =>
	(fn x_5: 'a -> 'b -> 'b =>
	 let val anc_0 =. x_3
	     val anc_1 =. x_4
	     val anc_2 =. x_5
	 in
	    case (anc_0, anc_1, anc_2) of
	      (l, b, f) =>
	      case l of
		nil['a] => b
	      | ::['a](x, xs) =>
		let val anc_3 =. f
		    val anc_4 =. (anc_3 x)
		    val anc_5 =. foldr ('b, 'a)
		    val anc_6 =. (anc_5 xs)
		    val anc_7 =. (anc_6 b)
		    val anc_8 =. (anc_7 f)
		in
		   (anc_4 anc_8)
		end
	 end)))
