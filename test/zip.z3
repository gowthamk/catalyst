(set-option :auto-config false)
(set-option :smt.mbqi false)
(declare-sort T0)
(declare-const v_3 T0)
(declare-sort T1)
(declare-const x_1 T1)
(declare-sort T2)
(declare-const x_0 T2)
(declare-const anc_0 T2)
(declare-const anc_1 T1)
(declare-const l1 T2)
(declare-const l2 T1)
(declare-const anc_2 T2)
(declare-const anc_3 T1)
(declare-const anc_7 T2)
(declare-const anc_6 T1)
(declare-sort T3)
(declare-const x1 T3)
(declare-const xs1 T2)
(declare-const sv_4108 T2)
(declare-sort T4)
(declare-const x2 T4)
(declare-const xs2 T1)
(declare-const sv_4110 T1)
(declare-const anc_10 T3)
(declare-const anc_11 T4)
(declare-sort T5)
(declare-const anc_12 T5)
(declare-const anc_15 T0)
(declare-fun Rhd16 (T0 T5) Bool)
(declare-fun Rob15 (T0 T5 T5) Bool)
(declare-fun Rmem14 (T0 T5) Bool)
(declare-fun Robs13 (T0 T5 T5) Bool)
(declare-fun Rhd12 (T2 T3) Bool)
(declare-fun Rob11 (T2 T3 T3) Bool)
(declare-fun Rmem10 (T2 T3) Bool)
(declare-fun Robs9 (T2 T3 T3) Bool)
(declare-fun Rhd8 (T1 T4) Bool)
(declare-fun Rob7 (T1 T4 T4) Bool)
(declare-fun Rmem6 (T1 T4) Bool)
(declare-fun Robs5 (T1 T4 T4) Bool)
(declare-fun Rsnd4 (T5 T4) Bool)
(declare-fun Rmem3 (T2 T3) Bool)
(declare-fun RId2 (T3 T3) Bool)
(declare-fun Rmem1 (T0 T3) Bool)
(declare-fun Rfst0 (T5 T3) Bool)
(declare-fun set0 (T5 T3) Bool)
(assert (forall ((bv1 T3) (bv0 T5))
  (! (= (set0 bv0 bv1) (and (Rfst0 bv0 bv1)))
     :pattern ((set0 bv0 bv1))
     :pattern ((Rfst0 bv0 bv1)))))
(declare-fun set1 (T0 T5 T3) Bool)
(assert (forall ((bv2 T3) (bv1 T5) (bv0 T0))
  (! (= (set1 bv0 bv1 bv2) (and (Rmem14 bv0 bv1) (set0 bv1 bv2)))
     :pattern ((set1 bv0 bv1 bv2))
     :pattern ((Rmem14 bv0 bv1) (set0 bv1 bv2)))))
(assert (forall ((bv2 T3) (bv1 T5) (bv0 T0))
  (! (=> (set1 bv0 bv1 bv2) (Rmem1 bv0 bv2))
     :pattern ((set1 bv0 bv1 bv2) (Rmem1 bv0 bv2)))))
(assert (forall ((bv2 T3) (bv1 T0))
  (exists ((ev0 T5))
    (! (=> (Rmem1 bv1 bv2) (set1 bv1 ev0 bv2))
       :pattern ((Rmem1 bv1 bv2) (set1 bv1 ev0 bv2))))))
(declare-fun set2 (T3 T3) Bool)
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (set2 bv0 bv1) (= bv0 bv1)) :pattern ((set2 bv0 bv1)))))
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (RId2 bv0 bv1) (set2 bv0 bv1))
     :pattern ((RId2 bv0 bv1))
     :pattern ((set2 bv0 bv1)))))
(declare-fun set3 (T3 T3) Bool)
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (set3 bv0 bv1) (and (RId2 bv0 bv1)))
     :pattern ((set3 bv0 bv1))
     :pattern ((RId2 bv0 bv1)))))
(declare-fun set4 (T2 T3 T3) Bool)
(assert (forall ((bv2 T3) (bv1 T3) (bv0 T2))
  (! (= (set4 bv0 bv1 bv2) (and (Rmem10 bv0 bv1) (set3 bv1 bv2)))
     :pattern ((set4 bv0 bv1 bv2))
     :pattern ((Rmem10 bv0 bv1) (set3 bv1 bv2)))))
(assert (forall ((bv2 T3) (bv1 T3) (bv0 T2))
  (! (=> (set4 bv0 bv1 bv2) (Rmem3 bv0 bv2))
     :pattern ((set4 bv0 bv1 bv2) (Rmem3 bv0 bv2)))))
(assert (forall ((bv2 T3) (bv1 T2))
  (exists ((ev0 T3))
    (! (=> (Rmem3 bv1 bv2) (set4 bv1 ev0 bv2))
       :pattern ((Rmem3 bv1 bv2) (set4 bv1 ev0 bv2))))))
(assert (= anc_1 x_1))
(assert (= anc_0 x_0))
(assert (= l2 x_1))
(assert (= l2 anc_1))
(assert (= l1 x_0))
(assert (= l1 anc_0))
(assert (= anc_3 x_1))
(assert (= anc_3 anc_1))
(assert (= anc_3 l2))
(assert (= anc_2 x_0))
(assert (= anc_2 anc_0))
(assert (= anc_2 l1))
(assert (= anc_6 x_1))
(assert (= anc_6 anc_1))
(assert (= anc_6 l2))
(assert (= anc_6 anc_3))
(assert (= anc_7 x_0))
(assert (= anc_7 anc_0))
(assert (= anc_7 l1))
(assert (= anc_7 anc_2))
(assert (forall ((bv0 T3))
  (! (= (Rmem1 anc_15 bv0) (Rmem3 xs1 bv0))
     :pattern ((Rmem1 anc_15 bv0))
     :pattern ((Rmem3 xs1 bv0)))))
(declare-fun set5 (T4) Bool)
(assert (forall ((bv0 T4))
  (! (= (set5 bv0) (and (= bv0 anc_11))) :pattern ((set5 bv0)))))
(assert (forall ((bv0 T4))
  (! (= (Rsnd4 anc_12 bv0) (set5 bv0))
     :pattern ((Rsnd4 anc_12 bv0))
     :pattern ((set5 bv0)))))
(declare-fun set6 (T3) Bool)
(assert (forall ((bv0 T3))
  (! (= (set6 bv0) (and (= bv0 anc_10))) :pattern ((set6 bv0)))))
(assert (forall ((bv0 T3))
  (! (= (Rfst0 anc_12 bv0) (set6 bv0))
     :pattern ((Rfst0 anc_12 bv0))
     :pattern ((set6 bv0)))))
(assert (= anc_11 x2))
(assert (= anc_10 x1))
(declare-fun set7 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set7 bv0) (and (= bv0 x2))) :pattern ((set7 bv0)))))
(declare-fun set8 (T4 T4) Bool)
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (set8 bv0 bv1) (and (set7 bv0) (Rmem6 xs2 bv1)))
     :pattern ((set8 bv0 bv1))
     :pattern ((set7 bv0) (Rmem6 xs2 bv1)))))
(declare-fun set9 (T4 T4) Bool)
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (set9 bv0 bv1) (or (set8 bv0 bv1) (Robs5 xs2 bv0 bv1)))
     :pattern ((set9 bv0 bv1))
     :pattern ((set8 bv0 bv1))
     :pattern ((Robs5 xs2 bv0 bv1)))))
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (Robs5 anc_6 bv0 bv1) (set9 bv0 bv1))
     :pattern ((Robs5 anc_6 bv0 bv1))
     :pattern ((set9 bv0 bv1)))))
(declare-fun set10 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set10 bv0) (and (= bv0 x2))) :pattern ((set10 bv0)))))
(declare-fun set11 (T4 T4) Bool)
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (set11 bv0 bv1) (and (set10 bv0) (Rmem6 xs2 bv1)))
     :pattern ((set11 bv0 bv1))
     :pattern ((set10 bv0) (Rmem6 xs2 bv1)))))
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (Rob7 anc_6 bv0 bv1) (set11 bv0 bv1))
     :pattern ((Rob7 anc_6 bv0 bv1))
     :pattern ((set11 bv0 bv1)))))
(declare-fun set12 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set12 bv0) (and (= bv0 x2))) :pattern ((set12 bv0)))))
(declare-fun set13 (T4) Bool)
(assert (forall ((bv0 T4))
  (! (= (set13 bv0) (or (set12 bv0) (Rmem6 xs2 bv0)))
     :pattern ((set13 bv0))
     :pattern ((set12 bv0))
     :pattern ((Rmem6 xs2 bv0)))))
(assert (forall ((bv0 T4))
  (! (= (Rmem6 anc_6 bv0) (set13 bv0))
     :pattern ((Rmem6 anc_6 bv0))
     :pattern ((set13 bv0)))))
(declare-fun set14 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set14 bv0) (and (= bv0 x2))) :pattern ((set14 bv0)))))
(assert (forall ((bv0 T4))
  (! (= (Rhd8 anc_6 bv0) (set14 bv0))
     :pattern ((Rhd8 anc_6 bv0))
     :pattern ((set14 bv0)))))
(declare-fun set15 (T3) Bool)
(assert (forall ((bv0 T3)) (! (= (set15 bv0) (and (= bv0 x1))) :pattern ((set15 bv0)))))
(declare-fun set16 (T3 T3) Bool)
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (set16 bv0 bv1) (and (set15 bv0) (Rmem10 xs1 bv1)))
     :pattern ((set16 bv0 bv1))
     :pattern ((set15 bv0) (Rmem10 xs1 bv1)))))
(declare-fun set17 (T3 T3) Bool)
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (set17 bv0 bv1) (or (set16 bv0 bv1) (Robs9 xs1 bv0 bv1)))
     :pattern ((set17 bv0 bv1))
     :pattern ((set16 bv0 bv1))
     :pattern ((Robs9 xs1 bv0 bv1)))))
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (Robs9 anc_7 bv0 bv1) (set17 bv0 bv1))
     :pattern ((Robs9 anc_7 bv0 bv1))
     :pattern ((set17 bv0 bv1)))))
(declare-fun set18 (T3) Bool)
(assert (forall ((bv0 T3)) (! (= (set18 bv0) (and (= bv0 x1))) :pattern ((set18 bv0)))))
(declare-fun set19 (T3 T3) Bool)
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (set19 bv0 bv1) (and (set18 bv0) (Rmem10 xs1 bv1)))
     :pattern ((set19 bv0 bv1))
     :pattern ((set18 bv0) (Rmem10 xs1 bv1)))))
(assert (forall ((bv1 T3) (bv0 T3))
  (! (= (Rob11 anc_7 bv0 bv1) (set19 bv0 bv1))
     :pattern ((Rob11 anc_7 bv0 bv1))
     :pattern ((set19 bv0 bv1)))))
(declare-fun set20 (T3) Bool)
(assert (forall ((bv0 T3)) (! (= (set20 bv0) (and (= bv0 x1))) :pattern ((set20 bv0)))))
(declare-fun set21 (T3) Bool)
(assert (forall ((bv0 T3))
  (! (= (set21 bv0) (or (set20 bv0) (Rmem10 xs1 bv0)))
     :pattern ((set21 bv0))
     :pattern ((set20 bv0))
     :pattern ((Rmem10 xs1 bv0)))))
(assert (forall ((bv0 T3))
  (! (= (Rmem10 anc_7 bv0) (set21 bv0))
     :pattern ((Rmem10 anc_7 bv0))
     :pattern ((set21 bv0)))))
(declare-fun set22 (T3) Bool)
(assert (forall ((bv0 T3)) (! (= (set22 bv0) (and (= bv0 x1))) :pattern ((set22 bv0)))))
(assert (forall ((bv0 T3))
  (! (= (Rhd12 anc_7 bv0) (set22 bv0))
     :pattern ((Rhd12 anc_7 bv0))
     :pattern ((set22 bv0)))))
(declare-fun set23 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set23 bv0) (and (= bv0 anc_12))) :pattern ((set23 bv0)))))
(declare-fun set24 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set24 bv0 bv1) (and (set23 bv0) (Rmem14 anc_15 bv1)))
     :pattern ((set24 bv0 bv1))
     :pattern ((set23 bv0) (Rmem14 anc_15 bv1)))))
(declare-fun set25 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set25 bv0 bv1) (or (set24 bv0 bv1) (Robs13 anc_15 bv0 bv1)))
     :pattern ((set25 bv0 bv1))
     :pattern ((set24 bv0 bv1))
     :pattern ((Robs13 anc_15 bv0 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Robs13 v_3 bv0 bv1) (set25 bv0 bv1))
     :pattern ((Robs13 v_3 bv0 bv1))
     :pattern ((set25 bv0 bv1)))))
(declare-fun set26 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set26 bv0) (and (= bv0 anc_12))) :pattern ((set26 bv0)))))
(declare-fun set27 (T5 T5) Bool)
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (set27 bv0 bv1) (and (set26 bv0) (Rmem14 anc_15 bv1)))
     :pattern ((set27 bv0 bv1))
     :pattern ((set26 bv0) (Rmem14 anc_15 bv1)))))
(assert (forall ((bv1 T5) (bv0 T5))
  (! (= (Rob15 v_3 bv0 bv1) (set27 bv0 bv1))
     :pattern ((Rob15 v_3 bv0 bv1))
     :pattern ((set27 bv0 bv1)))))
(declare-fun set28 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set28 bv0) (and (= bv0 anc_12))) :pattern ((set28 bv0)))))
(declare-fun set29 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set29 bv0) (or (set28 bv0) (Rmem14 anc_15 bv0)))
     :pattern ((set29 bv0))
     :pattern ((set28 bv0))
     :pattern ((Rmem14 anc_15 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rmem14 v_3 bv0) (set29 bv0))
     :pattern ((Rmem14 v_3 bv0))
     :pattern ((set29 bv0)))))
(declare-fun set30 (T5) Bool)
(assert (forall ((bv0 T5))
  (! (= (set30 bv0) (and (= bv0 anc_12))) :pattern ((set30 bv0)))))
(assert (forall ((bv0 T5))
  (! (= (Rhd16 v_3 bv0) (set30 bv0))
     :pattern ((Rhd16 v_3 bv0))
     :pattern ((set30 bv0)))))
(assert (not (forall ((bv0 T3))
       (! (= (Rmem1 v_3 bv0) (Rmem3 x_0 bv0))
          :pattern ((Rmem1 v_3 bv0))
          :pattern ((Rmem3 x_0 bv0))))))
(check-sat)

(declare-sort T6)
(declare-const v_3 T6)
(declare-sort T7)
(declare-const x_1 T7)
(declare-sort T8)
(declare-const x_0 T8)
(declare-const anc_0 T8)
(declare-const anc_1 T7)
(declare-const l1 T8)
(declare-const l2 T7)
(declare-const anc_2 T8)
(declare-const anc_3 T7)
(declare-const anc_5 T8)
(declare-const anc_4 T7)
(declare-const sv_4102 T8)
(declare-const sv_4104 T7)
(declare-sort T9)
(declare-fun Rmem15 (T8 T9) Bool)
(declare-fun RId14 (T9 T9) Bool)
(declare-fun Rmem13 (T6 T9) Bool)
(declare-sort T10)
(declare-fun Rfst12 (T10 T9) Bool)
(declare-fun Rhd11 (T6 T10) Bool)
(declare-fun Rmem10 (T6 T10) Bool)
(declare-fun Rob9 (T6 T10 T10) Bool)
(declare-fun Robs8 (T6 T10 T10) Bool)
(declare-fun Rhd7 (T8 T9) Bool)
(declare-fun Rmem6 (T8 T9) Bool)
(declare-fun Rob5 (T8 T9 T9) Bool)
(declare-fun Robs4 (T8 T9 T9) Bool)
(declare-sort T11)
(declare-fun Rhd3 (T7 T11) Bool)
(declare-fun Rmem2 (T7 T11) Bool)
(declare-fun Rob1 (T7 T11 T11) Bool)
(declare-fun Robs0 (T7 T11 T11) Bool)
(declare-fun set31 (T10 T9) Bool)
(assert (forall ((bv1 T9) (bv0 T10))
  (! (= (set31 bv0 bv1) (and (Rfst12 bv0 bv1)))
     :pattern ((set31 bv0 bv1))
     :pattern ((Rfst12 bv0 bv1)))))
(declare-fun set32 (T6 T10 T9) Bool)
(assert (forall ((bv2 T9) (bv1 T10) (bv0 T6))
  (! (= (set32 bv0 bv1 bv2) (and (Rmem10 bv0 bv1) (set31 bv1 bv2)))
     :pattern ((set32 bv0 bv1 bv2))
     :pattern ((Rmem10 bv0 bv1) (set31 bv1 bv2)))))
(assert (forall ((bv2 T9) (bv1 T10) (bv0 T6))
  (! (=> (set32 bv0 bv1 bv2) (Rmem13 bv0 bv2))
     :pattern ((set32 bv0 bv1 bv2) (Rmem13 bv0 bv2)))))
(assert (forall ((bv2 T9) (bv1 T6))
  (exists ((ev0 T10))
    (! (=> (Rmem13 bv1 bv2) (set32 bv1 ev0 bv2))
       :pattern ((Rmem13 bv1 bv2) (set32 bv1 ev0 bv2))))))
(declare-fun set33 (T9 T9) Bool)
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (set33 bv0 bv1) (= bv0 bv1)) :pattern ((set33 bv0 bv1)))))
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (RId14 bv0 bv1) (set33 bv0 bv1))
     :pattern ((RId14 bv0 bv1))
     :pattern ((set33 bv0 bv1)))))
(declare-fun set34 (T9 T9) Bool)
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (set34 bv0 bv1) (and (RId14 bv0 bv1)))
     :pattern ((set34 bv0 bv1))
     :pattern ((RId14 bv0 bv1)))))
(declare-fun set35 (T8 T9 T9) Bool)
(assert (forall ((bv2 T9) (bv1 T9) (bv0 T8))
  (! (= (set35 bv0 bv1 bv2) (and (Rmem6 bv0 bv1) (set34 bv1 bv2)))
     :pattern ((set35 bv0 bv1 bv2))
     :pattern ((Rmem6 bv0 bv1) (set34 bv1 bv2)))))
(assert (forall ((bv2 T9) (bv1 T9) (bv0 T8))
  (! (=> (set35 bv0 bv1 bv2) (Rmem15 bv0 bv2))
     :pattern ((set35 bv0 bv1 bv2) (Rmem15 bv0 bv2)))))
(assert (forall ((bv2 T9) (bv1 T8))
  (exists ((ev0 T9))
    (! (=> (Rmem15 bv1 bv2) (set35 bv1 ev0 bv2))
       :pattern ((Rmem15 bv1 bv2) (set35 bv1 ev0 bv2))))))
(assert (= anc_1 x_1))
(assert (= anc_0 x_0))
(assert (= l2 x_1))
(assert (= l2 anc_1))
(assert (= l1 x_0))
(assert (= l1 anc_0))
(assert (= anc_3 x_1))
(assert (= anc_3 anc_1))
(assert (= anc_3 l2))
(assert (= anc_2 x_0))
(assert (= anc_2 anc_0))
(assert (= anc_2 l1))
(assert (= anc_4 x_1))
(assert (= anc_4 anc_1))
(assert (= anc_4 l2))
(assert (= anc_4 anc_3))
(assert (= anc_5 x_0))
(assert (= anc_5 anc_0))
(assert (= anc_5 l1))
(assert (= anc_5 anc_2))
(declare-fun set36 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set36 bv0 bv1) false) :pattern ((set36 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Robs0 anc_4 bv0 bv1) (set36 bv0 bv1))
     :pattern ((Robs0 anc_4 bv0 bv1))
     :pattern ((set36 bv0 bv1)))))
(declare-fun set37 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set37 bv0 bv1) false) :pattern ((set37 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rob1 anc_4 bv0 bv1) (set37 bv0 bv1))
     :pattern ((Rob1 anc_4 bv0 bv1))
     :pattern ((set37 bv0 bv1)))))
(declare-fun set38 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set38 bv0) false) :pattern ((set38 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rmem2 anc_4 bv0) (set38 bv0))
     :pattern ((Rmem2 anc_4 bv0))
     :pattern ((set38 bv0)))))
(declare-fun set39 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set39 bv0) false) :pattern ((set39 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rhd3 anc_4 bv0) (set39 bv0))
     :pattern ((Rhd3 anc_4 bv0))
     :pattern ((set39 bv0)))))
(declare-fun set40 (T9 T9) Bool)
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (set40 bv0 bv1) false) :pattern ((set40 bv0 bv1)))))
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (Robs4 anc_5 bv0 bv1) (set40 bv0 bv1))
     :pattern ((Robs4 anc_5 bv0 bv1))
     :pattern ((set40 bv0 bv1)))))
(declare-fun set41 (T9 T9) Bool)
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (set41 bv0 bv1) false) :pattern ((set41 bv0 bv1)))))
(assert (forall ((bv1 T9) (bv0 T9))
  (! (= (Rob5 anc_5 bv0 bv1) (set41 bv0 bv1))
     :pattern ((Rob5 anc_5 bv0 bv1))
     :pattern ((set41 bv0 bv1)))))
(declare-fun set42 (T9) Bool)
(assert (forall ((bv0 T9)) (! (= (set42 bv0) false) :pattern ((set42 bv0)))))
(assert (forall ((bv0 T9))
  (! (= (Rmem6 anc_5 bv0) (set42 bv0))
     :pattern ((Rmem6 anc_5 bv0))
     :pattern ((set42 bv0)))))
(declare-fun set43 (T9) Bool)
(assert (forall ((bv0 T9)) (! (= (set43 bv0) false) :pattern ((set43 bv0)))))
(assert (forall ((bv0 T9))
  (! (= (Rhd7 anc_5 bv0) (set43 bv0))
     :pattern ((Rhd7 anc_5 bv0))
     :pattern ((set43 bv0)))))
(declare-fun set44 (T10 T10) Bool)
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (set44 bv0 bv1) false) :pattern ((set44 bv0 bv1)))))
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (Robs8 v_3 bv0 bv1) (set44 bv0 bv1))
     :pattern ((Robs8 v_3 bv0 bv1))
     :pattern ((set44 bv0 bv1)))))
(declare-fun set45 (T10 T10) Bool)
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (set45 bv0 bv1) false) :pattern ((set45 bv0 bv1)))))
(assert (forall ((bv1 T10) (bv0 T10))
  (! (= (Rob9 v_3 bv0 bv1) (set45 bv0 bv1))
     :pattern ((Rob9 v_3 bv0 bv1))
     :pattern ((set45 bv0 bv1)))))
(declare-fun set46 (T10) Bool)
(assert (forall ((bv0 T10)) (! (= (set46 bv0) false) :pattern ((set46 bv0)))))
(assert (forall ((bv0 T10))
  (! (= (Rmem10 v_3 bv0) (set46 bv0))
     :pattern ((Rmem10 v_3 bv0))
     :pattern ((set46 bv0)))))
(declare-fun set47 (T10) Bool)
(assert (forall ((bv0 T10)) (! (= (set47 bv0) false) :pattern ((set47 bv0)))))
(assert (forall ((bv0 T10))
  (! (= (Rhd11 v_3 bv0) (set47 bv0))
     :pattern ((Rhd11 v_3 bv0))
     :pattern ((set47 bv0)))))
(assert (not (forall ((bv0 T9))
       (! (= (Rmem13 v_3 bv0) (Rmem15 x_0 bv0))
          :pattern ((Rmem13 v_3 bv0))
          :pattern ((Rmem15 x_0 bv0))))))
(check-sat)

