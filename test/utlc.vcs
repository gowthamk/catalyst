Catalyst rexported (built Sat Feb 15 11:56:42 EST 2014 on tycon.lan)
  created this file on Sat Feb 15 15:54:20 2014.
Do not edit this file.
Flag settings: 
   align: 4
   atMLtons: ()
   chunk: coalesce 4096
   closureConvertGlobalize: true
   closureConvertShrink: true
   codegen: x86
   contifyIntoMain: false
   debug: false
   defaultChar: char8
   defaultWideChar: widechar32
   defaultInt: int32
   defaultReal: real64
   defaultWord: word32
   diag passes: []
   drop passes: []
   elaborate allowConstant (default): false
   elaborate allowConstant (enabled): true
   elaborate allowFFI (default): false
   elaborate allowFFI (enabled): true
   elaborate allowPrim (default): false
   elaborate allowPrim (enabled): true
   elaborate allowOverload (default): false
   elaborate allowOverload (enabled): true
   elaborate allowRebindEquals (default): false
   elaborate allowRebindEquals (enabled): true
   elaborate deadCode (default): false
   elaborate deadCode (enabled): true
   elaborate forceUsed (default): false
   elaborate forceUsed (enabled): true
   elaborate ffiStr (default): 
   elaborate ffiStr (enabled): true
   elaborate nonexhaustiveExnMatch (default): default
   elaborate nonexhaustiveExnMatch (enabled): true
   elaborate nonexhaustiveMatch (default): warn
   elaborate nonexhaustiveMatch (enabled): true
   elaborate redundantMatch (default): warn
   elaborate redundantMatch (enabled): true
   elaborate resolveScope (default): strdec
   elaborate resolveScope (enabled): true
   elaborate sequenceNonUnit (default): ignore
   elaborate sequenceNonUnit (enabled): true
   elaborate warnUnused (default): false
   elaborate warnUnused (enabled): true
   elaborate only: false
   emit main: true
   export header: None
   exn history: false
   generated output format: executable
   gc check: Limit
   indentation: 3
   inlineIntoMain: true
   inlineLeafA: {loops = true, repeat = true, size = Some 20}
   inlineLeafB: {loops = true, repeat = true, size = Some 40}
   inlineNonRec: {small = 60, product = 320}
   input file: utlc.vcs
   spec file: test/utlc.spec
   keep CoreML: true
   keep Env: false
   keep def use: true
   keep dot: false
   keep Machine: false
   keep passes: []
   keep RSSA: false
   keep SSA: false
   keep SSA2: false
   keep SXML: false
   keep XML: false
   extra_: false
   lib dir: /Users/gowtham/git/mlton/newexecs/usr/local/lib/mlton
   lib target dir: /Users/gowtham/git/mlton/newexecs/usr/local/lib/mlton/targets/self
   loop passes: 1
   mark cards: true
   max function size: 10000
   mlb path vars: [{var = MLTON_ROOT, path = $(LIB_MLTON_DIR)/sml}, {var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}]
   native commented: 0
   native live stack: false
   native optimize: 1
   native move hoist: true
   native copy prop: true
   native copy prop cutoff: 1000
   native cutoff: 100
   native live transfer: 8
   native shuffle: true
   native ieee fp: false
   native split: Some 20000
   optimizationPasses: []
   polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300}
   prefer abs paths: false
   prof passes: []
   profile: None
   profile branch: false
   profile C: []
   profile IL: ProfileSource
   profile include/exclude: []
   profile raise: false
   profile stack: false
   profile val: false
   show basis: None
   show def-use: None
   show types: true
   target: self
   target arch: X86
   target OS: Linux
   type check: false
   verbosity: Pass
   warn unrecognized annotation: true
   warn deprecated features: true
   zone cut depth: 100
Elaborated VarEnv:

:: :-> ('a_2)v_23:(1:{v_24:'a_2 | true}, 2:{v_25: 'a_2 list | true})
	      -> {v_26: 'a_2 list | true
				    /\ Rmem(v_26) = ({(v_23.1)} U (Rmem(v_23.2) U {()}))
				    /\ Rhd(v_26) = {(v_23.1)}}
subst :-> ()e1:{v_13:<?> | true}
	     -> id:{v_14:<?> | true}
		 -> e2:{v_15:<?> | true}
		     -> {v_16:<?> | {(id)} C= Rfv(e2)
				    /\ Rfv(v_16) = ((Rfv(e2) - {(id)}) U Rfv(e1))
				    \/ not ({(id)} C= Rfv(e2))
				       /\ Rfv(v_16) = Rfv(e2)}
alphaConvert :-> ()e:{v_11:<?> | true}
		    -> {v_12:<?> | Rfv(v_12) = Rfv(e)}
createNewName :-> Assumption: ()fvs:{v_8:<?> | true}
				 -> id:{v_9:<?> | true}
				     -> {v_10:<?> | not ({(v_10)} = {(id)})
						    /\ (Rmem(fvs) - {(v_10)}) = Rmem(fvs)}
freeVars :-> Assumption: ()e:{v_6:<?> | true}
			    -> {v_7:<?> | Rmem(v_7) = Rfv(e)}
listHas :-> Assumption: ()l:{v_3:<?> | true}
			   -> x:{v_4:<?> | true}
			       -> {v_5:<?> | v_5 = true
					      <=> {(x)} C= Rmem(l)}
idEq :-> Assumption: ()sp_0:(x:{v_0:<?> | true}, y:{v_1:<?> | true})
		        -> {v_2:<?> | v_2 = true
				       <=> {(x)} = {(y)}}
nil :-> ('a_2){v_18: 'a_2 list | true
				 /\ Rmem(v_18) = {()}
				 /\ Rhd(v_18) = {()}}
Abs :-> ()v_34:(1:{v_35:  char8 vector | true}, 2:{v_36: exp | true})
	   -> {v_37: exp | true
			   /\ Rfv(v_37) = (Rfv(v_34.2) - {(v_34.1)})}
App :-> ()v_30:(1:{v_31: exp | true}, 2:{v_32: exp | true})
	   -> {v_33: exp | true
			   /\ Rfv(v_33) = (Rfv(v_30.1) U Rfv(v_30.2))}
Var :-> ()v_27:{v_28:  char8 vector | true}
	   -> {v_29: exp | true
			   /\ Rfv(v_29) = {(v_27)}}
false :-> (){v_17: bool | v_17 = false}
true :-> (){v_17: bool | v_17 = true}
Verification Conditions:

bindings(v_37 :  exp,
	 x_11 :  exp,
	 e :  exp,
	 id :   char8 vector,
	 e' :  exp,
	 sv_4105 :  exp,
	 fv_e' :    char8 vector list,
	 id' :   char8 vector,
	 anc_1025 :   char8 vector,
	 anc_1028 :  exp,
	 anc_1031 :  exp)
in
      e = x_11
      Rfv(e) = (Rfv(e') - {(id)})
      OR [{(id)} C= Rfv(e')
	  Rfv(anc_1031) = ((Rfv(e') - {(id)}) U Rfv(anc_1028))]
      OR [NOT [{(id)} C= Rfv(e')]
	  Rfv(anc_1031) = Rfv(e')]
      Rfv(anc_1028) = {(id')}
      NOT [{(anc_1025)} = {(id)}]
      (Rmem(fv_e') - {(anc_1025)}) = Rmem(fv_e')
      anc_1025 = id'
      NOT [{(id')} = {(id)}]
      (Rmem(fv_e') - {(id')}) = Rmem(fv_e')
      Rmem(fv_e') = Rfv(e')
      Rfv(v_37) = (Rfv(anc_1031) - {(anc_1025)})
   =>
      Rfv(v_37) = Rfv(x_11)
end
bindings(v_37 :  exp,
	 x_10 :  exp,
	 x_9 :   char8 vector,
	 x_8 :  exp,
	 anc_1035 :  exp,
	 anc_1036 :   char8 vector,
	 anc_1037 :  exp,
	 e1 :  exp,
	 id :   char8 vector,
	 e2 :  exp,
	 e21 :  exp,
	 e22 :  exp,
	 sv_4122 :  exp,
	 anc_1046 :  exp,
	 anc_1050 :  exp)
in
      anc_1037 = x_10
      anc_1036 = x_9
      anc_1035 = x_8
      e2 = x_10
      e2 = anc_1037
      id = x_9
      id = anc_1036
      e1 = x_8
      e1 = anc_1035
      Rfv(e2) = (Rfv(e21) U Rfv(e22))
      OR [{(id)} C= Rfv(e22)
	  Rfv(anc_1050) = ((Rfv(e22) - {(id)}) U Rfv(e1))]
      OR [NOT [{(id)} C= Rfv(e22)]
	  Rfv(anc_1050) = Rfv(e22)]
      OR [{(id)} C= Rfv(e21)
	  Rfv(anc_1046) = ((Rfv(e21) - {(id)}) U Rfv(e1))]
      OR [NOT [{(id)} C= Rfv(e21)]
	  Rfv(anc_1046) = Rfv(e21)]
      Rfv(v_37) = (Rfv(anc_1046) U Rfv(anc_1050))
   =>
      OR [{(x_9)} C= Rfv(x_10)
	  Rfv(v_37) = ((Rfv(x_10) - {(x_9)}) U Rfv(x_8))]
      OR [NOT [{(x_9)} C= Rfv(x_10)]
	  Rfv(v_37) = Rfv(x_10)]
end
bindings(v_37 :  exp,
	 x_10 :  exp,
	 x_9 :   char8 vector,
	 x_8 :  exp,
	 anc_1035 :  exp,
	 anc_1036 :   char8 vector,
	 anc_1037 :  exp,
	 e1 :  exp,
	 id :   char8 vector,
	 e2 :  exp,
	 id' :   char8 vector,
	 sv_4112 :  exp,
	 anc_1039 :   char8 vector,
	 anc_1040 :   char8 vector,
	 anc_1041 :  bool,
	 sv_4116 :  bool)
in
      anc_1037 = x_10
      anc_1036 = x_9
      anc_1035 = x_8
      e2 = x_10
      e2 = anc_1037
      id = x_9
      id = anc_1036
      e1 = x_8
      e1 = anc_1035
      Rfv(e2) = {(id')}
      anc_1041 = true <=> {(anc_1039)} = {(anc_1040)}
      anc_1040 = id'
      anc_1039 = x_9
      anc_1039 = anc_1036
      anc_1039 = id
      anc_1041 = true
      v_37 = x_8
      v_37 = anc_1035
      v_37 = e1
   =>
      OR [{(x_9)} C= Rfv(x_10)
	  Rfv(v_37) = ((Rfv(x_10) - {(x_9)}) U Rfv(x_8))]
      OR [NOT [{(x_9)} C= Rfv(x_10)]
	  Rfv(v_37) = Rfv(x_10)]
end
bindings(v_37 :  exp,
	 x_10 :  exp,
	 x_9 :   char8 vector,
	 x_8 :  exp,
	 anc_1035 :  exp,
	 anc_1036 :   char8 vector,
	 anc_1037 :  exp,
	 e1 :  exp,
	 id :   char8 vector,
	 e2 :  exp,
	 id' :   char8 vector,
	 sv_4112 :  exp,
	 anc_1039 :   char8 vector,
	 anc_1040 :   char8 vector,
	 anc_1041 :  bool,
	 sv_4119 :  bool)
in
      anc_1037 = x_10
      anc_1036 = x_9
      anc_1035 = x_8
      e2 = x_10
      e2 = anc_1037
      id = x_9
      id = anc_1036
      e1 = x_8
      e1 = anc_1035
      Rfv(e2) = {(id')}
      anc_1041 = true <=> {(anc_1039)} = {(anc_1040)}
      anc_1040 = id'
      anc_1039 = x_9
      anc_1039 = anc_1036
      anc_1039 = id
      anc_1041 = false
      v_37 = x_10
      v_37 = anc_1037
      v_37 = e2
   =>
      OR [{(x_9)} C= Rfv(x_10)
	  Rfv(v_37) = ((Rfv(x_10) - {(x_9)}) U Rfv(x_8))]
      OR [NOT [{(x_9)} C= Rfv(x_10)]
	  Rfv(v_37) = Rfv(x_10)]
end
bindings(v_37 :  exp,
	 x_10 :  exp,
	 x_9 :   char8 vector,
	 x_8 :  exp,
	 anc_1035 :  exp,
	 anc_1036 :   char8 vector,
	 anc_1037 :  exp,
	 e1 :  exp,
	 id :   char8 vector,
	 e2 :  exp,
	 id' :   char8 vector,
	 e2' :  exp,
	 sv_4126 :  exp,
	 anc_1052 :   char8 vector,
	 anc_1053 :   char8 vector,
	 anc_1054 :  bool,
	 sv_4130 :  bool)
in
      anc_1037 = x_10
      anc_1036 = x_9
      anc_1035 = x_8
      e2 = x_10
      e2 = anc_1037
      id = x_9
      id = anc_1036
      e1 = x_8
      e1 = anc_1035
      Rfv(e2) = (Rfv(e2') - {(id')})
      anc_1054 = true <=> {(anc_1052)} = {(anc_1053)}
      anc_1053 = x_9
      anc_1053 = anc_1036
      anc_1053 = id
      anc_1052 = id'
      anc_1054 = true
      v_37 = x_10
      v_37 = anc_1037
      v_37 = e2
   =>
      OR [{(x_9)} C= Rfv(x_10)
	  Rfv(v_37) = ((Rfv(x_10) - {(x_9)}) U Rfv(x_8))]
      OR [NOT [{(x_9)} C= Rfv(x_10)]
	  Rfv(v_37) = Rfv(x_10)]
end
bindings(v_37 :  exp,
	 x_10 :  exp,
	 x_9 :   char8 vector,
	 x_8 :  exp,
	 anc_1035 :  exp,
	 anc_1036 :   char8 vector,
	 anc_1037 :  exp,
	 e1 :  exp,
	 id :   char8 vector,
	 e2 :  exp,
	 id' :   char8 vector,
	 e2' :  exp,
	 sv_4126 :  exp,
	 anc_1052 :   char8 vector,
	 anc_1053 :   char8 vector,
	 anc_1054 :  bool,
	 sv_4133 :  bool,
	 fv_e1 :    char8 vector list,
	 anc_1057 :  bool,
	 sv_4137 :  bool,
	 anc_1062 :  exp)
in
      anc_1037 = x_10
      anc_1036 = x_9
      anc_1035 = x_8
      e2 = x_10
      e2 = anc_1037
      id = x_9
      id = anc_1036
      e1 = x_8
      e1 = anc_1035
      Rfv(e2) = (Rfv(e2') - {(id')})
      anc_1054 = true <=> {(anc_1052)} = {(anc_1053)}
      anc_1053 = x_9
      anc_1053 = anc_1036
      anc_1053 = id
      anc_1052 = id'
      anc_1054 = false
      anc_1057 = true <=> {(id')} C= Rmem(fv_e1)
      Rmem(fv_e1) = Rfv(e1)
      anc_1057 = true
      Rfv(anc_1062) = Rfv(e2)
      OR [{(id)} C= Rfv(anc_1062)
	  Rfv(v_37) = ((Rfv(anc_1062) - {(id)}) U Rfv(e1))]
      OR [NOT [{(id)} C= Rfv(anc_1062)]
	  Rfv(v_37) = Rfv(anc_1062)]
   =>
      OR [{(x_9)} C= Rfv(x_10)
	  Rfv(v_37) = ((Rfv(x_10) - {(x_9)}) U Rfv(x_8))]
      OR [NOT [{(x_9)} C= Rfv(x_10)]
	  Rfv(v_37) = Rfv(x_10)]
end
bindings(v_37 :  exp,
	 x_10 :  exp,
	 x_9 :   char8 vector,
	 x_8 :  exp,
	 anc_1035 :  exp,
	 anc_1036 :   char8 vector,
	 anc_1037 :  exp,
	 e1 :  exp,
	 id :   char8 vector,
	 e2 :  exp,
	 id' :   char8 vector,
	 e2' :  exp,
	 sv_4126 :  exp,
	 anc_1052 :   char8 vector,
	 anc_1053 :   char8 vector,
	 anc_1054 :  bool,
	 sv_4133 :  bool,
	 fv_e1 :    char8 vector list,
	 anc_1057 :  bool,
	 sv_4141 :  bool,
	 anc_1064 :   char8 vector,
	 anc_1068 :  exp)
in
      anc_1037 = x_10
      anc_1036 = x_9
      anc_1035 = x_8
      e2 = x_10
      e2 = anc_1037
      id = x_9
      id = anc_1036
      e1 = x_8
      e1 = anc_1035
      Rfv(e2) = (Rfv(e2') - {(id')})
      anc_1054 = true <=> {(anc_1052)} = {(anc_1053)}
      anc_1053 = x_9
      anc_1053 = anc_1036
      anc_1053 = id
      anc_1052 = id'
      anc_1054 = false
      anc_1057 = true <=> {(id')} C= Rmem(fv_e1)
      Rmem(fv_e1) = Rfv(e1)
      anc_1057 = false
      OR [{(id)} C= Rfv(e2')
	  Rfv(anc_1068) = ((Rfv(e2') - {(id)}) U Rfv(e1))]
      OR [NOT [{(id)} C= Rfv(e2')]
	  Rfv(anc_1068) = Rfv(e2')]
      anc_1064 = id'
      Rfv(v_37) = (Rfv(anc_1068) - {(anc_1064)})
   =>
      OR [{(x_9)} C= Rfv(x_10)
	  Rfv(v_37) = ((Rfv(x_10) - {(x_9)}) U Rfv(x_8))]
      OR [NOT [{(x_9)} C= Rfv(x_10)]
	  Rfv(v_37) = Rfv(x_10)]
end
