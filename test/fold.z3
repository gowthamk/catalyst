(declare-sort T0)
(declare-const v T0)
(declare-const acc T0)
(declare-sort T1)
(declare-const y T1)
(declare-const anc_16 T0)
(declare-sort T2)
(declare-const sv_4104 T2)
(declare-const xs T2)
(declare-const x T1)
(declare-const b T0)
(declare-const l T2)
(declare-const anc_10 T0)
(declare-const anc_9 T2)
(declare-const x_1 T0)
(declare-const x_0 T2)
(declare-fun Rhd7 (T2 T1) Bool)
(declare-fun Rob6 (T2 T1 T1) Bool)
(declare-fun Roa5 (T2 T1 T1) Bool)
(declare-fun Robs4 (T2 T1 T1) Bool)
(declare-fun Rmem3 (T2 T1) Bool)
(declare-fun Roas2 (T2 T1 T1) Bool)
(declare-fun qRo1 (T0 T1 T1) Bool)
(declare-fun qRm0 (T0 T1) Bool)
(declare-fun set0 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set0 bv0) (and (= bv0 x))) :pattern ((set0 bv0)))))
(declare-fun set1 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set1 bv0) (or (set0 bv0) (qRm0 b bv0)))
     :pattern ((set1 bv0))
     :pattern ((set0 bv0))
     :pattern ((qRm0 b bv0)))))
(assert (forall ((bv0 T1))
  (! (= (qRm0 anc_16 bv0) (set1 bv0))
     :pattern ((qRm0 anc_16 bv0))
     :pattern ((set1 bv0)))))
(declare-fun set2 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set2 bv0) (and (= bv0 x))) :pattern ((set2 bv0)))))
(declare-fun set3 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set3 bv0 bv1) (and (set2 bv0) (qRm0 b bv1)))
     :pattern ((set3 bv0 bv1))
     :pattern ((set2 bv0) (qRm0 b bv1)))))
(declare-fun set4 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set4 bv0 bv1) (or (set3 bv0 bv1) (qRo1 b bv0 bv1)))
     :pattern ((set4 bv0 bv1))
     :pattern ((set3 bv0 bv1))
     :pattern ((qRo1 b bv0 bv1)))))
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (qRo1 anc_16 bv0 bv1) (set4 bv0 bv1))
     :pattern ((qRo1 anc_16 bv0 bv1))
     :pattern ((set4 bv0 bv1)))))
(declare-fun set5 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set5 bv0) (and (= bv0 x))) :pattern ((set5 bv0)))))
(declare-fun set6 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set6 bv0 bv1) (and (Rmem3 xs bv0) (set5 bv1)))
     :pattern ((set6 bv0 bv1))
     :pattern ((Rmem3 xs bv0) (set5 bv1)))))
(declare-fun set7 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set7 bv0 bv1) (or (set6 bv0 bv1) (Roas2 xs bv0 bv1)))
     :pattern ((set7 bv0 bv1))
     :pattern ((set6 bv0 bv1))
     :pattern ((Roas2 xs bv0 bv1)))))
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (Roas2 l bv0 bv1) (set7 bv0 bv1))
     :pattern ((Roas2 l bv0 bv1))
     :pattern ((set7 bv0 bv1)))))
(declare-fun set8 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set8 bv0) (and (= bv0 x))) :pattern ((set8 bv0)))))
(declare-fun set9 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set9 bv0 bv1) (and (set8 bv0) (Rmem3 xs bv1)))
     :pattern ((set9 bv0 bv1))
     :pattern ((set8 bv0) (Rmem3 xs bv1)))))
(declare-fun set10 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set10 bv0 bv1) (or (set9 bv0 bv1) (Robs4 xs bv0 bv1)))
     :pattern ((set10 bv0 bv1))
     :pattern ((set9 bv0 bv1))
     :pattern ((Robs4 xs bv0 bv1)))))
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (Robs4 l bv0 bv1) (set10 bv0 bv1))
     :pattern ((Robs4 l bv0 bv1))
     :pattern ((set10 bv0 bv1)))))
(declare-fun set11 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set11 bv0) (and (= bv0 x))) :pattern ((set11 bv0)))))
(declare-fun set12 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set12 bv0 bv1) (and (Rmem3 xs bv0) (set11 bv1)))
     :pattern ((set12 bv0 bv1))
     :pattern ((Rmem3 xs bv0) (set11 bv1)))))
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (Roa5 l bv0 bv1) (set12 bv0 bv1))
     :pattern ((Roa5 l bv0 bv1))
     :pattern ((set12 bv0 bv1)))))
(declare-fun set13 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set13 bv0) (and (= bv0 x))) :pattern ((set13 bv0)))))
(declare-fun set14 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set14 bv0 bv1) (and (set13 bv0) (Rmem3 xs bv1)))
     :pattern ((set14 bv0 bv1))
     :pattern ((set13 bv0) (Rmem3 xs bv1)))))
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (Rob6 l bv0 bv1) (set14 bv0 bv1))
     :pattern ((Rob6 l bv0 bv1))
     :pattern ((set14 bv0 bv1)))))
(declare-fun set15 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set15 bv0) (and (= bv0 x))) :pattern ((set15 bv0)))))
(declare-fun set16 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set16 bv0) (or (set15 bv0) (Rmem3 xs bv0)))
     :pattern ((set16 bv0))
     :pattern ((set15 bv0))
     :pattern ((Rmem3 xs bv0)))))
(assert (forall ((bv0 T1))
  (! (= (Rmem3 l bv0) (set16 bv0))
     :pattern ((Rmem3 l bv0))
     :pattern ((set16 bv0)))))
(declare-fun set17 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set17 bv0) (and (= bv0 x))) :pattern ((set17 bv0)))))
(assert (forall ((bv0 T1))
  (! (= (Rhd7 l bv0) (set17 bv0))
     :pattern ((Rhd7 l bv0))
     :pattern ((set17 bv0)))))
(assert (= b x_1))
(assert (= b anc_10))
(assert (= l x_0))
(assert (= l anc_9))
(assert (= anc_10 x_1))
(assert (= anc_9 x_0))
(declare-fun set18 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set18 bv0) (and (= bv0 y))) :pattern ((set18 bv0)))))
(declare-fun set19 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set19 bv0) (or (set18 bv0) (qRm0 acc bv0)))
     :pattern ((set19 bv0))
     :pattern ((set18 bv0))
     :pattern ((qRm0 acc bv0)))))
(assert (forall ((bv0 T1))
  (! (= (qRm0 v bv0) (set19 bv0))
     :pattern ((qRm0 v bv0))
     :pattern ((set19 bv0)))))
(declare-fun set20 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set20 bv0) (and (= bv0 x))) :pattern ((set20 bv0)))))
(declare-fun set21 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set21 bv0 bv1) (and (set20 bv0) (qRm0 acc bv1)))
     :pattern ((set21 bv0 bv1))
     :pattern ((set20 bv0) (qRm0 acc bv1)))))
(declare-fun set22 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set22 bv0 bv1) (or (set21 bv0 bv1) (qRo1 acc bv0 bv1)))
     :pattern ((set22 bv0 bv1))
     :pattern ((set21 bv0 bv1))
     :pattern ((qRo1 acc bv0 bv1)))))
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (qRo1 v bv0 bv1) (set22 bv0 bv1))
     :pattern ((qRo1 v bv0 bv1))
     :pattern ((set22 bv0 bv1)))))
(declare-fun set23 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set23 bv0) (and (= bv0 y))) :pattern ((set23 bv0)))))
(declare-fun set24 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set24 bv0) (or (set23 bv0) (qRm0 acc bv0)))
     :pattern ((set24 bv0))
     :pattern ((set23 bv0))
     :pattern ((qRm0 acc bv0)))))
(assert (not (forall ((bv0 T1))
       (! (= (qRm0 v bv0) (set24 bv0))
          :pattern ((qRm0 v bv0))
          :pattern ((set24 bv0))))))
(check-sat)

(declare-sort T3)
(declare-const v T3)
(declare-const acc T3)
(declare-sort T4)
(declare-const y T4)
(declare-const anc_16 T3)
(declare-sort T5)
(declare-const sv_4104 T5)
(declare-const xs T5)
(declare-const x T4)
(declare-const b T3)
(declare-const l T5)
(declare-const anc_10 T3)
(declare-const anc_9 T5)
(declare-const x_1 T3)
(declare-const x_0 T5)
(declare-fun Rhd7 (T5 T4) Bool)
(declare-fun Rob6 (T5 T4 T4) Bool)
(declare-fun Roa5 (T5 T4 T4) Bool)
(declare-fun Robs4 (T5 T4 T4) Bool)
(declare-fun Rmem3 (T5 T4) Bool)
(declare-fun Roas2 (T5 T4 T4) Bool)
(declare-fun qRo1 (T3 T4 T4) Bool)
(declare-fun qRm0 (T3 T4) Bool)
(declare-fun set25 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set25 bv0) (and (= bv0 x))) :pattern ((set25 bv0)))))
(declare-fun set26 (T4) Bool)
(assert (forall ((bv0 T4))
  (! (= (set26 bv0) (or (set25 bv0) (qRm0 b bv0)))
     :pattern ((set26 bv0))
     :pattern ((set25 bv0))
     :pattern ((qRm0 b bv0)))))
(assert (forall ((bv0 T4))
  (! (= (qRm0 anc_16 bv0) (set26 bv0))
     :pattern ((qRm0 anc_16 bv0))
     :pattern ((set26 bv0)))))
(declare-fun set27 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set27 bv0) (and (= bv0 x))) :pattern ((set27 bv0)))))
(declare-fun set28 (T4 T4) Bool)
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (set28 bv0 bv1) (and (set27 bv0) (qRm0 b bv1)))
     :pattern ((set28 bv0 bv1))
     :pattern ((set27 bv0) (qRm0 b bv1)))))
(declare-fun set29 (T4 T4) Bool)
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (set29 bv0 bv1) (or (set28 bv0 bv1) (qRo1 b bv0 bv1)))
     :pattern ((set29 bv0 bv1))
     :pattern ((set28 bv0 bv1))
     :pattern ((qRo1 b bv0 bv1)))))
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (qRo1 anc_16 bv0 bv1) (set29 bv0 bv1))
     :pattern ((qRo1 anc_16 bv0 bv1))
     :pattern ((set29 bv0 bv1)))))
(declare-fun set30 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set30 bv0) (and (= bv0 x))) :pattern ((set30 bv0)))))
(declare-fun set31 (T4 T4) Bool)
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (set31 bv0 bv1) (and (Rmem3 xs bv0) (set30 bv1)))
     :pattern ((set31 bv0 bv1))
     :pattern ((Rmem3 xs bv0) (set30 bv1)))))
(declare-fun set32 (T4 T4) Bool)
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (set32 bv0 bv1) (or (set31 bv0 bv1) (Roas2 xs bv0 bv1)))
     :pattern ((set32 bv0 bv1))
     :pattern ((set31 bv0 bv1))
     :pattern ((Roas2 xs bv0 bv1)))))
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (Roas2 l bv0 bv1) (set32 bv0 bv1))
     :pattern ((Roas2 l bv0 bv1))
     :pattern ((set32 bv0 bv1)))))
(declare-fun set33 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set33 bv0) (and (= bv0 x))) :pattern ((set33 bv0)))))
(declare-fun set34 (T4 T4) Bool)
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (set34 bv0 bv1) (and (set33 bv0) (Rmem3 xs bv1)))
     :pattern ((set34 bv0 bv1))
     :pattern ((set33 bv0) (Rmem3 xs bv1)))))
(declare-fun set35 (T4 T4) Bool)
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (set35 bv0 bv1) (or (set34 bv0 bv1) (Robs4 xs bv0 bv1)))
     :pattern ((set35 bv0 bv1))
     :pattern ((set34 bv0 bv1))
     :pattern ((Robs4 xs bv0 bv1)))))
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (Robs4 l bv0 bv1) (set35 bv0 bv1))
     :pattern ((Robs4 l bv0 bv1))
     :pattern ((set35 bv0 bv1)))))
(declare-fun set36 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set36 bv0) (and (= bv0 x))) :pattern ((set36 bv0)))))
(declare-fun set37 (T4 T4) Bool)
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (set37 bv0 bv1) (and (Rmem3 xs bv0) (set36 bv1)))
     :pattern ((set37 bv0 bv1))
     :pattern ((Rmem3 xs bv0) (set36 bv1)))))
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (Roa5 l bv0 bv1) (set37 bv0 bv1))
     :pattern ((Roa5 l bv0 bv1))
     :pattern ((set37 bv0 bv1)))))
(declare-fun set38 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set38 bv0) (and (= bv0 x))) :pattern ((set38 bv0)))))
(declare-fun set39 (T4 T4) Bool)
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (set39 bv0 bv1) (and (set38 bv0) (Rmem3 xs bv1)))
     :pattern ((set39 bv0 bv1))
     :pattern ((set38 bv0) (Rmem3 xs bv1)))))
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (Rob6 l bv0 bv1) (set39 bv0 bv1))
     :pattern ((Rob6 l bv0 bv1))
     :pattern ((set39 bv0 bv1)))))
(declare-fun set40 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set40 bv0) (and (= bv0 x))) :pattern ((set40 bv0)))))
(declare-fun set41 (T4) Bool)
(assert (forall ((bv0 T4))
  (! (= (set41 bv0) (or (set40 bv0) (Rmem3 xs bv0)))
     :pattern ((set41 bv0))
     :pattern ((set40 bv0))
     :pattern ((Rmem3 xs bv0)))))
(assert (forall ((bv0 T4))
  (! (= (Rmem3 l bv0) (set41 bv0))
     :pattern ((Rmem3 l bv0))
     :pattern ((set41 bv0)))))
(declare-fun set42 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set42 bv0) (and (= bv0 x))) :pattern ((set42 bv0)))))
(assert (forall ((bv0 T4))
  (! (= (Rhd7 l bv0) (set42 bv0))
     :pattern ((Rhd7 l bv0))
     :pattern ((set42 bv0)))))
(assert (= b x_1))
(assert (= b anc_10))
(assert (= l x_0))
(assert (= l anc_9))
(assert (= anc_10 x_1))
(assert (= anc_9 x_0))
(declare-fun set43 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set43 bv0) (and (= bv0 y))) :pattern ((set43 bv0)))))
(declare-fun set44 (T4) Bool)
(assert (forall ((bv0 T4))
  (! (= (set44 bv0) (or (set43 bv0) (qRm0 acc bv0)))
     :pattern ((set44 bv0))
     :pattern ((set43 bv0))
     :pattern ((qRm0 acc bv0)))))
(assert (forall ((bv0 T4))
  (! (= (qRm0 v bv0) (set44 bv0))
     :pattern ((qRm0 v bv0))
     :pattern ((set44 bv0)))))
(declare-fun set45 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set45 bv0) (and (= bv0 x))) :pattern ((set45 bv0)))))
(declare-fun set46 (T4 T4) Bool)
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (set46 bv0 bv1) (and (set45 bv0) (qRm0 acc bv1)))
     :pattern ((set46 bv0 bv1))
     :pattern ((set45 bv0) (qRm0 acc bv1)))))
(declare-fun set47 (T4 T4) Bool)
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (set47 bv0 bv1) (or (set46 bv0 bv1) (qRo1 acc bv0 bv1)))
     :pattern ((set47 bv0 bv1))
     :pattern ((set46 bv0 bv1))
     :pattern ((qRo1 acc bv0 bv1)))))
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (qRo1 v bv0 bv1) (set47 bv0 bv1))
     :pattern ((qRo1 v bv0 bv1))
     :pattern ((set47 bv0 bv1)))))
(declare-fun set48 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set48 bv0) (and (= bv0 x))) :pattern ((set48 bv0)))))
(declare-fun set49 (T4 T4) Bool)
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (set49 bv0 bv1) (and (set48 bv0) (qRm0 acc bv1)))
     :pattern ((set49 bv0 bv1))
     :pattern ((set48 bv0) (qRm0 acc bv1)))))
(declare-fun set50 (T4 T4) Bool)
(assert (forall ((bv1 T4) (bv0 T4))
  (! (= (set50 bv0 bv1) (or (set49 bv0 bv1) (qRo1 acc bv0 bv1)))
     :pattern ((set50 bv0 bv1))
     :pattern ((set49 bv0 bv1))
     :pattern ((qRo1 acc bv0 bv1)))))
(assert (not (forall ((bv1 T4) (bv0 T4))
       (! (= (qRo1 v bv0 bv1) (set50 bv0 bv1))
          :pattern ((qRo1 v bv0 bv1))
          :pattern ((set50 bv0 bv1))))))
(check-sat)

(declare-sort T6)
(declare-const v T6)
(declare-const x_1 T6)
(declare-sort T7)
(declare-const x_0 T7)
(declare-const anc_9 T7)
(declare-const anc_10 T6)
(declare-const l T7)
(declare-const b T6)
(declare-const sv_4101 T7)
(declare-sort T8)
(declare-fun qRm6 (T6 T8) Bool)
(declare-fun Rhd5 (T7 T8) Bool)
(declare-fun Rmem4 (T7 T8) Bool)
(declare-fun Rob3 (T7 T8 T8) Bool)
(declare-fun Roa2 (T7 T8 T8) Bool)
(declare-fun Robs1 (T7 T8 T8) Bool)
(declare-fun Roas0 (T7 T8 T8) Bool)
(assert (= anc_10 x_1))
(assert (= anc_9 x_0))
(assert (= b x_1))
(assert (= b anc_10))
(assert (= l x_0))
(assert (= l anc_9))
(declare-fun set51 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set51 bv0 bv1) false) :pattern ((set51 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Roas0 l bv0 bv1) (set51 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set51 bv0 bv1)))))
(declare-fun set52 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set52 bv0 bv1) false) :pattern ((set52 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Robs1 l bv0 bv1) (set52 bv0 bv1))
     :pattern ((Robs1 l bv0 bv1))
     :pattern ((set52 bv0 bv1)))))
(declare-fun set53 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set53 bv0 bv1) false) :pattern ((set53 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Roa2 l bv0 bv1) (set53 bv0 bv1))
     :pattern ((Roa2 l bv0 bv1))
     :pattern ((set53 bv0 bv1)))))
(declare-fun set54 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set54 bv0 bv1) false) :pattern ((set54 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Rob3 l bv0 bv1) (set54 bv0 bv1))
     :pattern ((Rob3 l bv0 bv1))
     :pattern ((set54 bv0 bv1)))))
(declare-fun set55 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set55 bv0) false) :pattern ((set55 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rmem4 l bv0) (set55 bv0))
     :pattern ((Rmem4 l bv0))
     :pattern ((set55 bv0)))))
(declare-fun set56 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set56 bv0) false) :pattern ((set56 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rhd5 l bv0) (set56 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set56 bv0)))))
(assert (= v x_1))
(assert (= v anc_10))
(assert (= v b))
(declare-fun set57 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set57 bv0) (or (Rmem4 x_0 bv0) (qRm6 x_1 bv0)))
     :pattern ((set57 bv0))
     :pattern ((Rmem4 x_0 bv0))
     :pattern ((qRm6 x_1 bv0)))))
(assert (not (forall ((bv0 T8))
       (! (= (qRm6 v bv0) (set57 bv0))
          :pattern ((qRm6 v bv0))
          :pattern ((set57 bv0))))))
(check-sat)

(declare-sort T9)
(declare-const v T9)
(declare-const x_1 T9)
(declare-sort T10)
(declare-const x_0 T10)
(declare-const anc_9 T10)
(declare-const anc_10 T9)
(declare-const l T10)
(declare-const b T9)
(declare-const sv_4101 T10)
(declare-sort T11)
(declare-fun qRm7 (T9 T11) Bool)
(declare-fun qRo6 (T9 T11 T11) Bool)
(declare-fun Rhd5 (T10 T11) Bool)
(declare-fun Rmem4 (T10 T11) Bool)
(declare-fun Rob3 (T10 T11 T11) Bool)
(declare-fun Roa2 (T10 T11 T11) Bool)
(declare-fun Robs1 (T10 T11 T11) Bool)
(declare-fun Roas0 (T10 T11 T11) Bool)
(assert (= anc_10 x_1))
(assert (= anc_9 x_0))
(assert (= b x_1))
(assert (= b anc_10))
(assert (= l x_0))
(assert (= l anc_9))
(declare-fun set58 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set58 bv0 bv1) false) :pattern ((set58 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Roas0 l bv0 bv1) (set58 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set58 bv0 bv1)))))
(declare-fun set59 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set59 bv0 bv1) false) :pattern ((set59 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Robs1 l bv0 bv1) (set59 bv0 bv1))
     :pattern ((Robs1 l bv0 bv1))
     :pattern ((set59 bv0 bv1)))))
(declare-fun set60 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set60 bv0 bv1) false) :pattern ((set60 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Roa2 l bv0 bv1) (set60 bv0 bv1))
     :pattern ((Roa2 l bv0 bv1))
     :pattern ((set60 bv0 bv1)))))
(declare-fun set61 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set61 bv0 bv1) false) :pattern ((set61 bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rob3 l bv0 bv1) (set61 bv0 bv1))
     :pattern ((Rob3 l bv0 bv1))
     :pattern ((set61 bv0 bv1)))))
(declare-fun set62 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set62 bv0) false) :pattern ((set62 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rmem4 l bv0) (set62 bv0))
     :pattern ((Rmem4 l bv0))
     :pattern ((set62 bv0)))))
(declare-fun set63 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set63 bv0) false) :pattern ((set63 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rhd5 l bv0) (set63 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set63 bv0)))))
(assert (= v x_1))
(assert (= v anc_10))
(assert (= v b))
(declare-fun set64 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set64 bv0 bv1) (and (Rmem4 x_0 bv0) (qRm7 x_1 bv1)))
     :pattern ((set64 bv0 bv1))
     :pattern ((Rmem4 x_0 bv0) (qRm7 x_1 bv1)))))
(declare-fun set65 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set65 bv0 bv1) (or (qRo6 x_1 bv0 bv1) (set64 bv0 bv1)))
     :pattern ((set65 bv0 bv1))
     :pattern ((qRo6 x_1 bv0 bv1))
     :pattern ((set64 bv0 bv1)))))
(declare-fun set66 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set66 bv0 bv1) (or (Roas0 x_0 bv0 bv1) (set65 bv0 bv1)))
     :pattern ((set66 bv0 bv1))
     :pattern ((Roas0 x_0 bv0 bv1))
     :pattern ((set65 bv0 bv1)))))
(assert (not (forall ((bv1 T11) (bv0 T11))
       (! (= (qRo6 v bv0 bv1) (set66 bv0 bv1))
          :pattern ((qRo6 v bv0 bv1))
          :pattern ((set66 bv0 bv1))))))
(check-sat)

(declare-sort T12)
(declare-const v T12)
(declare-const x_1 T12)
(declare-sort T13)
(declare-const x_0 T13)
(declare-const anc_9 T13)
(declare-const anc_10 T12)
(declare-const l T13)
(declare-const b T12)
(declare-sort T14)
(declare-const x T14)
(declare-const xs T13)
(declare-const sv_4104 T13)
(declare-const anc_16 T12)
(declare-fun qRo7 (T12 T14 T14) Bool)
(declare-fun qRm6 (T12 T14) Bool)
(declare-fun Rhd5 (T13 T14) Bool)
(declare-fun Rob4 (T13 T14 T14) Bool)
(declare-fun Roa3 (T13 T14 T14) Bool)
(declare-fun Robs2 (T13 T14 T14) Bool)
(declare-fun Rmem1 (T13 T14) Bool)
(declare-fun Roas0 (T13 T14 T14) Bool)
(assert (= anc_10 x_1))
(assert (= anc_9 x_0))
(assert (= b x_1))
(assert (= b anc_10))
(assert (= l x_0))
(assert (= l anc_9))
(declare-fun set67 (T14) Bool)
(assert (forall ((bv0 T14)) (! (= (set67 bv0) (and (= bv0 x))) :pattern ((set67 bv0)))))
(declare-fun set68 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set68 bv0 bv1) (and (Rmem1 xs bv0) (set67 bv1)))
     :pattern ((set68 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set67 bv1)))))
(declare-fun set69 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set69 bv0 bv1) (or (set68 bv0 bv1) (Roas0 xs bv0 bv1)))
     :pattern ((set69 bv0 bv1))
     :pattern ((set68 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (Roas0 l bv0 bv1) (set69 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set69 bv0 bv1)))))
(declare-fun set70 (T14) Bool)
(assert (forall ((bv0 T14)) (! (= (set70 bv0) (and (= bv0 x))) :pattern ((set70 bv0)))))
(declare-fun set71 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set71 bv0 bv1) (and (set70 bv0) (Rmem1 xs bv1)))
     :pattern ((set71 bv0 bv1))
     :pattern ((set70 bv0) (Rmem1 xs bv1)))))
(declare-fun set72 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set72 bv0 bv1) (or (set71 bv0 bv1) (Robs2 xs bv0 bv1)))
     :pattern ((set72 bv0 bv1))
     :pattern ((set71 bv0 bv1))
     :pattern ((Robs2 xs bv0 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (Robs2 l bv0 bv1) (set72 bv0 bv1))
     :pattern ((Robs2 l bv0 bv1))
     :pattern ((set72 bv0 bv1)))))
(declare-fun set73 (T14) Bool)
(assert (forall ((bv0 T14)) (! (= (set73 bv0) (and (= bv0 x))) :pattern ((set73 bv0)))))
(declare-fun set74 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set74 bv0 bv1) (and (Rmem1 xs bv0) (set73 bv1)))
     :pattern ((set74 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set73 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (Roa3 l bv0 bv1) (set74 bv0 bv1))
     :pattern ((Roa3 l bv0 bv1))
     :pattern ((set74 bv0 bv1)))))
(declare-fun set75 (T14) Bool)
(assert (forall ((bv0 T14)) (! (= (set75 bv0) (and (= bv0 x))) :pattern ((set75 bv0)))))
(declare-fun set76 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set76 bv0 bv1) (and (set75 bv0) (Rmem1 xs bv1)))
     :pattern ((set76 bv0 bv1))
     :pattern ((set75 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (Rob4 l bv0 bv1) (set76 bv0 bv1))
     :pattern ((Rob4 l bv0 bv1))
     :pattern ((set76 bv0 bv1)))))
(declare-fun set77 (T14) Bool)
(assert (forall ((bv0 T14)) (! (= (set77 bv0) (and (= bv0 x))) :pattern ((set77 bv0)))))
(declare-fun set78 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set78 bv0) (or (set77 bv0) (Rmem1 xs bv0)))
     :pattern ((set78 bv0))
     :pattern ((set77 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T14))
  (! (= (Rmem1 l bv0) (set78 bv0))
     :pattern ((Rmem1 l bv0))
     :pattern ((set78 bv0)))))
(declare-fun set79 (T14) Bool)
(assert (forall ((bv0 T14)) (! (= (set79 bv0) (and (= bv0 x))) :pattern ((set79 bv0)))))
(assert (forall ((bv0 T14))
  (! (= (Rhd5 l bv0) (set79 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set79 bv0)))))
(declare-fun set80 (T14) Bool)
(assert (forall ((bv0 T14)) (! (= (set80 bv0) (and (= bv0 x))) :pattern ((set80 bv0)))))
(declare-fun set81 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set81 bv0) (or (set80 bv0) (qRm6 b bv0)))
     :pattern ((set81 bv0))
     :pattern ((set80 bv0))
     :pattern ((qRm6 b bv0)))))
(assert (forall ((bv0 T14))
  (! (= (qRm6 anc_16 bv0) (set81 bv0))
     :pattern ((qRm6 anc_16 bv0))
     :pattern ((set81 bv0)))))
(declare-fun set82 (T14) Bool)
(assert (forall ((bv0 T14)) (! (= (set82 bv0) (and (= bv0 x))) :pattern ((set82 bv0)))))
(declare-fun set83 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set83 bv0 bv1) (and (set82 bv0) (qRm6 b bv1)))
     :pattern ((set83 bv0 bv1))
     :pattern ((set82 bv0) (qRm6 b bv1)))))
(declare-fun set84 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set84 bv0 bv1) (or (set83 bv0 bv1) (qRo7 b bv0 bv1)))
     :pattern ((set84 bv0 bv1))
     :pattern ((set83 bv0 bv1))
     :pattern ((qRo7 b bv0 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (qRo7 anc_16 bv0 bv1) (set84 bv0 bv1))
     :pattern ((qRo7 anc_16 bv0 bv1))
     :pattern ((set84 bv0 bv1)))))
(declare-fun set85 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set85 bv0) (or (Rmem1 xs bv0) (qRm6 anc_16 bv0)))
     :pattern ((set85 bv0))
     :pattern ((Rmem1 xs bv0))
     :pattern ((qRm6 anc_16 bv0)))))
(assert (forall ((bv0 T14))
  (! (= (qRm6 v bv0) (set85 bv0))
     :pattern ((qRm6 v bv0))
     :pattern ((set85 bv0)))))
(declare-fun set86 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set86 bv0 bv1) (and (Rmem1 xs bv0) (qRm6 anc_16 bv1)))
     :pattern ((set86 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (qRm6 anc_16 bv1)))))
(declare-fun set87 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set87 bv0 bv1) (or (qRo7 anc_16 bv0 bv1) (set86 bv0 bv1)))
     :pattern ((set87 bv0 bv1))
     :pattern ((qRo7 anc_16 bv0 bv1))
     :pattern ((set86 bv0 bv1)))))
(declare-fun set88 (T14 T14) Bool)
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (set88 bv0 bv1) (or (Roas0 xs bv0 bv1) (set87 bv0 bv1)))
     :pattern ((set88 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1))
     :pattern ((set87 bv0 bv1)))))
(assert (forall ((bv1 T14) (bv0 T14))
  (! (= (qRo7 v bv0 bv1) (set88 bv0 bv1))
     :pattern ((qRo7 v bv0 bv1))
     :pattern ((set88 bv0 bv1)))))
(declare-fun set89 (T14) Bool)
(assert (forall ((bv0 T14))
  (! (= (set89 bv0) (or (Rmem1 x_0 bv0) (qRm6 x_1 bv0)))
     :pattern ((set89 bv0))
     :pattern ((Rmem1 x_0 bv0))
     :pattern ((qRm6 x_1 bv0)))))
(assert (not (forall ((bv0 T14))
       (! (= (qRm6 v bv0) (set89 bv0))
          :pattern ((qRm6 v bv0))
          :pattern ((set89 bv0))))))
(check-sat)

(declare-sort T15)
(declare-const v T15)
(declare-const x_1 T15)
(declare-sort T16)
(declare-const x_0 T16)
(declare-const anc_9 T16)
(declare-const anc_10 T15)
(declare-const l T16)
(declare-const b T15)
(declare-sort T17)
(declare-const x T17)
(declare-const xs T16)
(declare-const sv_4104 T16)
(declare-const anc_16 T15)
(declare-fun qRo7 (T15 T17 T17) Bool)
(declare-fun qRm6 (T15 T17) Bool)
(declare-fun Rhd5 (T16 T17) Bool)
(declare-fun Rob4 (T16 T17 T17) Bool)
(declare-fun Roa3 (T16 T17 T17) Bool)
(declare-fun Robs2 (T16 T17 T17) Bool)
(declare-fun Rmem1 (T16 T17) Bool)
(declare-fun Roas0 (T16 T17 T17) Bool)
(assert (= anc_10 x_1))
(assert (= anc_9 x_0))
(assert (= b x_1))
(assert (= b anc_10))
(assert (= l x_0))
(assert (= l anc_9))
(declare-fun set90 (T17) Bool)
(assert (forall ((bv0 T17)) (! (= (set90 bv0) (and (= bv0 x))) :pattern ((set90 bv0)))))
(declare-fun set91 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set91 bv0 bv1) (and (Rmem1 xs bv0) (set90 bv1)))
     :pattern ((set91 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set90 bv1)))))
(declare-fun set92 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set92 bv0 bv1) (or (set91 bv0 bv1) (Roas0 xs bv0 bv1)))
     :pattern ((set92 bv0 bv1))
     :pattern ((set91 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (Roas0 l bv0 bv1) (set92 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set92 bv0 bv1)))))
(declare-fun set93 (T17) Bool)
(assert (forall ((bv0 T17)) (! (= (set93 bv0) (and (= bv0 x))) :pattern ((set93 bv0)))))
(declare-fun set94 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set94 bv0 bv1) (and (set93 bv0) (Rmem1 xs bv1)))
     :pattern ((set94 bv0 bv1))
     :pattern ((set93 bv0) (Rmem1 xs bv1)))))
(declare-fun set95 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set95 bv0 bv1) (or (set94 bv0 bv1) (Robs2 xs bv0 bv1)))
     :pattern ((set95 bv0 bv1))
     :pattern ((set94 bv0 bv1))
     :pattern ((Robs2 xs bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (Robs2 l bv0 bv1) (set95 bv0 bv1))
     :pattern ((Robs2 l bv0 bv1))
     :pattern ((set95 bv0 bv1)))))
(declare-fun set96 (T17) Bool)
(assert (forall ((bv0 T17)) (! (= (set96 bv0) (and (= bv0 x))) :pattern ((set96 bv0)))))
(declare-fun set97 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set97 bv0 bv1) (and (Rmem1 xs bv0) (set96 bv1)))
     :pattern ((set97 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set96 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (Roa3 l bv0 bv1) (set97 bv0 bv1))
     :pattern ((Roa3 l bv0 bv1))
     :pattern ((set97 bv0 bv1)))))
(declare-fun set98 (T17) Bool)
(assert (forall ((bv0 T17)) (! (= (set98 bv0) (and (= bv0 x))) :pattern ((set98 bv0)))))
(declare-fun set99 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set99 bv0 bv1) (and (set98 bv0) (Rmem1 xs bv1)))
     :pattern ((set99 bv0 bv1))
     :pattern ((set98 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (Rob4 l bv0 bv1) (set99 bv0 bv1))
     :pattern ((Rob4 l bv0 bv1))
     :pattern ((set99 bv0 bv1)))))
(declare-fun set100 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set100 bv0) (and (= bv0 x))) :pattern ((set100 bv0)))))
(declare-fun set101 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set101 bv0) (or (set100 bv0) (Rmem1 xs bv0)))
     :pattern ((set101 bv0))
     :pattern ((set100 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T17))
  (! (= (Rmem1 l bv0) (set101 bv0))
     :pattern ((Rmem1 l bv0))
     :pattern ((set101 bv0)))))
(declare-fun set102 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set102 bv0) (and (= bv0 x))) :pattern ((set102 bv0)))))
(assert (forall ((bv0 T17))
  (! (= (Rhd5 l bv0) (set102 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set102 bv0)))))
(declare-fun set103 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set103 bv0) (and (= bv0 x))) :pattern ((set103 bv0)))))
(declare-fun set104 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set104 bv0) (or (set103 bv0) (qRm6 b bv0)))
     :pattern ((set104 bv0))
     :pattern ((set103 bv0))
     :pattern ((qRm6 b bv0)))))
(assert (forall ((bv0 T17))
  (! (= (qRm6 anc_16 bv0) (set104 bv0))
     :pattern ((qRm6 anc_16 bv0))
     :pattern ((set104 bv0)))))
(declare-fun set105 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set105 bv0) (and (= bv0 x))) :pattern ((set105 bv0)))))
(declare-fun set106 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set106 bv0 bv1) (and (set105 bv0) (qRm6 b bv1)))
     :pattern ((set106 bv0 bv1))
     :pattern ((set105 bv0) (qRm6 b bv1)))))
(declare-fun set107 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set107 bv0 bv1) (or (set106 bv0 bv1) (qRo7 b bv0 bv1)))
     :pattern ((set107 bv0 bv1))
     :pattern ((set106 bv0 bv1))
     :pattern ((qRo7 b bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (qRo7 anc_16 bv0 bv1) (set107 bv0 bv1))
     :pattern ((qRo7 anc_16 bv0 bv1))
     :pattern ((set107 bv0 bv1)))))
(declare-fun set108 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set108 bv0) (or (Rmem1 xs bv0) (qRm6 anc_16 bv0)))
     :pattern ((set108 bv0))
     :pattern ((Rmem1 xs bv0))
     :pattern ((qRm6 anc_16 bv0)))))
(assert (forall ((bv0 T17))
  (! (= (qRm6 v bv0) (set108 bv0))
     :pattern ((qRm6 v bv0))
     :pattern ((set108 bv0)))))
(declare-fun set109 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set109 bv0 bv1) (and (Rmem1 xs bv0) (qRm6 anc_16 bv1)))
     :pattern ((set109 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (qRm6 anc_16 bv1)))))
(declare-fun set110 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set110 bv0 bv1) (or (qRo7 anc_16 bv0 bv1) (set109 bv0 bv1)))
     :pattern ((set110 bv0 bv1))
     :pattern ((qRo7 anc_16 bv0 bv1))
     :pattern ((set109 bv0 bv1)))))
(declare-fun set111 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set111 bv0 bv1) (or (Roas0 xs bv0 bv1) (set110 bv0 bv1)))
     :pattern ((set111 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1))
     :pattern ((set110 bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (qRo7 v bv0 bv1) (set111 bv0 bv1))
     :pattern ((qRo7 v bv0 bv1))
     :pattern ((set111 bv0 bv1)))))
(declare-fun set112 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set112 bv0 bv1) (and (Rmem1 x_0 bv0) (qRm6 x_1 bv1)))
     :pattern ((set112 bv0 bv1))
     :pattern ((Rmem1 x_0 bv0) (qRm6 x_1 bv1)))))
(declare-fun set113 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set113 bv0 bv1) (or (qRo7 x_1 bv0 bv1) (set112 bv0 bv1)))
     :pattern ((set113 bv0 bv1))
     :pattern ((qRo7 x_1 bv0 bv1))
     :pattern ((set112 bv0 bv1)))))
(declare-fun set114 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set114 bv0 bv1) (or (Roas0 x_0 bv0 bv1) (set113 bv0 bv1)))
     :pattern ((set114 bv0 bv1))
     :pattern ((Roas0 x_0 bv0 bv1))
     :pattern ((set113 bv0 bv1)))))
(assert (not (forall ((bv1 T17) (bv0 T17))
       (! (= (qRo7 v bv0 bv1) (set114 bv0 bv1))
          :pattern ((qRo7 v bv0 bv1))
          :pattern ((set114 bv0 bv1))))))
(check-sat)

(declare-sort T18)
(declare-const v T18)
(declare-const acc T18)
(declare-sort T19)
(declare-const y T19)
(declare-sort T20)
(declare-const sv_4114 T20)
(declare-const xs T20)
(declare-const x T19)
(declare-const b T18)
(declare-const l T20)
(declare-const anc_1 T18)
(declare-const anc_0 T20)
(declare-const x_4 T18)
(declare-const x_3 T20)
(declare-fun qRo7 (T18 T19 T19) Bool)
(declare-fun qRm6 (T18 T19) Bool)
(declare-fun Rhd5 (T20 T19) Bool)
(declare-fun Rob4 (T20 T19 T19) Bool)
(declare-fun Roa3 (T20 T19 T19) Bool)
(declare-fun Robs2 (T20 T19 T19) Bool)
(declare-fun Rmem1 (T20 T19) Bool)
(declare-fun Roas0 (T20 T19 T19) Bool)
(declare-fun set115 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set115 bv0) (and (= bv0 x))) :pattern ((set115 bv0)))))
(declare-fun set116 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set116 bv0 bv1) (and (Rmem1 xs bv0) (set115 bv1)))
     :pattern ((set116 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set115 bv1)))))
(declare-fun set117 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set117 bv0 bv1) (or (set116 bv0 bv1) (Roas0 xs bv0 bv1)))
     :pattern ((set117 bv0 bv1))
     :pattern ((set116 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Roas0 l bv0 bv1) (set117 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set117 bv0 bv1)))))
(declare-fun set118 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set118 bv0) (and (= bv0 x))) :pattern ((set118 bv0)))))
(declare-fun set119 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set119 bv0 bv1) (and (set118 bv0) (Rmem1 xs bv1)))
     :pattern ((set119 bv0 bv1))
     :pattern ((set118 bv0) (Rmem1 xs bv1)))))
(declare-fun set120 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set120 bv0 bv1) (or (set119 bv0 bv1) (Robs2 xs bv0 bv1)))
     :pattern ((set120 bv0 bv1))
     :pattern ((set119 bv0 bv1))
     :pattern ((Robs2 xs bv0 bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Robs2 l bv0 bv1) (set120 bv0 bv1))
     :pattern ((Robs2 l bv0 bv1))
     :pattern ((set120 bv0 bv1)))))
(declare-fun set121 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set121 bv0) (and (= bv0 x))) :pattern ((set121 bv0)))))
(declare-fun set122 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set122 bv0 bv1) (and (Rmem1 xs bv0) (set121 bv1)))
     :pattern ((set122 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set121 bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Roa3 l bv0 bv1) (set122 bv0 bv1))
     :pattern ((Roa3 l bv0 bv1))
     :pattern ((set122 bv0 bv1)))))
(declare-fun set123 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set123 bv0) (and (= bv0 x))) :pattern ((set123 bv0)))))
(declare-fun set124 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set124 bv0 bv1) (and (set123 bv0) (Rmem1 xs bv1)))
     :pattern ((set124 bv0 bv1))
     :pattern ((set123 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Rob4 l bv0 bv1) (set124 bv0 bv1))
     :pattern ((Rob4 l bv0 bv1))
     :pattern ((set124 bv0 bv1)))))
(declare-fun set125 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set125 bv0) (and (= bv0 x))) :pattern ((set125 bv0)))))
(declare-fun set126 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set126 bv0) (or (set125 bv0) (Rmem1 xs bv0)))
     :pattern ((set126 bv0))
     :pattern ((set125 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T19))
  (! (= (Rmem1 l bv0) (set126 bv0))
     :pattern ((Rmem1 l bv0))
     :pattern ((set126 bv0)))))
(declare-fun set127 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set127 bv0) (and (= bv0 x))) :pattern ((set127 bv0)))))
(assert (forall ((bv0 T19))
  (! (= (Rhd5 l bv0) (set127 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set127 bv0)))))
(assert (= b x_4))
(assert (= b anc_1))
(assert (= l x_3))
(assert (= l anc_0))
(assert (= anc_1 x_4))
(assert (= anc_0 x_3))
(declare-fun set128 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set128 bv0) (and (= bv0 y))) :pattern ((set128 bv0)))))
(declare-fun set129 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set129 bv0) (or (set128 bv0) (qRm6 acc bv0)))
     :pattern ((set129 bv0))
     :pattern ((set128 bv0))
     :pattern ((qRm6 acc bv0)))))
(assert (forall ((bv0 T19))
  (! (= (qRm6 v bv0) (set129 bv0))
     :pattern ((qRm6 v bv0))
     :pattern ((set129 bv0)))))
(declare-fun set130 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set130 bv0) (and (= bv0 x))) :pattern ((set130 bv0)))))
(declare-fun set131 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set131 bv0 bv1) (and (set130 bv0) (qRm6 acc bv1)))
     :pattern ((set131 bv0 bv1))
     :pattern ((set130 bv0) (qRm6 acc bv1)))))
(declare-fun set132 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set132 bv0 bv1) (or (set131 bv0 bv1) (qRo7 acc bv0 bv1)))
     :pattern ((set132 bv0 bv1))
     :pattern ((set131 bv0 bv1))
     :pattern ((qRo7 acc bv0 bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (qRo7 v bv0 bv1) (set132 bv0 bv1))
     :pattern ((qRo7 v bv0 bv1))
     :pattern ((set132 bv0 bv1)))))
(declare-fun set133 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set133 bv0) (and (= bv0 y))) :pattern ((set133 bv0)))))
(declare-fun set134 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set134 bv0) (or (set133 bv0) (qRm6 acc bv0)))
     :pattern ((set134 bv0))
     :pattern ((set133 bv0))
     :pattern ((qRm6 acc bv0)))))
(assert (not (forall ((bv0 T19))
       (! (= (qRm6 v bv0) (set134 bv0))
          :pattern ((qRm6 v bv0))
          :pattern ((set134 bv0))))))
(check-sat)

(declare-sort T21)
(declare-const v T21)
(declare-const acc T21)
(declare-sort T22)
(declare-const y T22)
(declare-sort T23)
(declare-const sv_4114 T23)
(declare-const xs T23)
(declare-const x T22)
(declare-const b T21)
(declare-const l T23)
(declare-const anc_1 T21)
(declare-const anc_0 T23)
(declare-const x_4 T21)
(declare-const x_3 T23)
(declare-fun qRo7 (T21 T22 T22) Bool)
(declare-fun qRm6 (T21 T22) Bool)
(declare-fun Rhd5 (T23 T22) Bool)
(declare-fun Rob4 (T23 T22 T22) Bool)
(declare-fun Roa3 (T23 T22 T22) Bool)
(declare-fun Robs2 (T23 T22 T22) Bool)
(declare-fun Rmem1 (T23 T22) Bool)
(declare-fun Roas0 (T23 T22 T22) Bool)
(declare-fun set135 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set135 bv0) (and (= bv0 x))) :pattern ((set135 bv0)))))
(declare-fun set136 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set136 bv0 bv1) (and (Rmem1 xs bv0) (set135 bv1)))
     :pattern ((set136 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set135 bv1)))))
(declare-fun set137 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set137 bv0 bv1) (or (set136 bv0 bv1) (Roas0 xs bv0 bv1)))
     :pattern ((set137 bv0 bv1))
     :pattern ((set136 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (Roas0 l bv0 bv1) (set137 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set137 bv0 bv1)))))
(declare-fun set138 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set138 bv0) (and (= bv0 x))) :pattern ((set138 bv0)))))
(declare-fun set139 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set139 bv0 bv1) (and (set138 bv0) (Rmem1 xs bv1)))
     :pattern ((set139 bv0 bv1))
     :pattern ((set138 bv0) (Rmem1 xs bv1)))))
(declare-fun set140 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set140 bv0 bv1) (or (set139 bv0 bv1) (Robs2 xs bv0 bv1)))
     :pattern ((set140 bv0 bv1))
     :pattern ((set139 bv0 bv1))
     :pattern ((Robs2 xs bv0 bv1)))))
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (Robs2 l bv0 bv1) (set140 bv0 bv1))
     :pattern ((Robs2 l bv0 bv1))
     :pattern ((set140 bv0 bv1)))))
(declare-fun set141 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set141 bv0) (and (= bv0 x))) :pattern ((set141 bv0)))))
(declare-fun set142 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set142 bv0 bv1) (and (Rmem1 xs bv0) (set141 bv1)))
     :pattern ((set142 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set141 bv1)))))
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (Roa3 l bv0 bv1) (set142 bv0 bv1))
     :pattern ((Roa3 l bv0 bv1))
     :pattern ((set142 bv0 bv1)))))
(declare-fun set143 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set143 bv0) (and (= bv0 x))) :pattern ((set143 bv0)))))
(declare-fun set144 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set144 bv0 bv1) (and (set143 bv0) (Rmem1 xs bv1)))
     :pattern ((set144 bv0 bv1))
     :pattern ((set143 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (Rob4 l bv0 bv1) (set144 bv0 bv1))
     :pattern ((Rob4 l bv0 bv1))
     :pattern ((set144 bv0 bv1)))))
(declare-fun set145 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set145 bv0) (and (= bv0 x))) :pattern ((set145 bv0)))))
(declare-fun set146 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set146 bv0) (or (set145 bv0) (Rmem1 xs bv0)))
     :pattern ((set146 bv0))
     :pattern ((set145 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T22))
  (! (= (Rmem1 l bv0) (set146 bv0))
     :pattern ((Rmem1 l bv0))
     :pattern ((set146 bv0)))))
(declare-fun set147 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set147 bv0) (and (= bv0 x))) :pattern ((set147 bv0)))))
(assert (forall ((bv0 T22))
  (! (= (Rhd5 l bv0) (set147 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set147 bv0)))))
(assert (= b x_4))
(assert (= b anc_1))
(assert (= l x_3))
(assert (= l anc_0))
(assert (= anc_1 x_4))
(assert (= anc_0 x_3))
(declare-fun set148 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set148 bv0) (and (= bv0 y))) :pattern ((set148 bv0)))))
(declare-fun set149 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set149 bv0) (or (set148 bv0) (qRm6 acc bv0)))
     :pattern ((set149 bv0))
     :pattern ((set148 bv0))
     :pattern ((qRm6 acc bv0)))))
(assert (forall ((bv0 T22))
  (! (= (qRm6 v bv0) (set149 bv0))
     :pattern ((qRm6 v bv0))
     :pattern ((set149 bv0)))))
(declare-fun set150 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set150 bv0) (and (= bv0 x))) :pattern ((set150 bv0)))))
(declare-fun set151 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set151 bv0 bv1) (and (set150 bv0) (qRm6 acc bv1)))
     :pattern ((set151 bv0 bv1))
     :pattern ((set150 bv0) (qRm6 acc bv1)))))
(declare-fun set152 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set152 bv0 bv1) (or (set151 bv0 bv1) (qRo7 acc bv0 bv1)))
     :pattern ((set152 bv0 bv1))
     :pattern ((set151 bv0 bv1))
     :pattern ((qRo7 acc bv0 bv1)))))
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (qRo7 v bv0 bv1) (set152 bv0 bv1))
     :pattern ((qRo7 v bv0 bv1))
     :pattern ((set152 bv0 bv1)))))
(declare-fun set153 (T22) Bool)
(assert (forall ((bv0 T22))
  (! (= (set153 bv0) (and (= bv0 x))) :pattern ((set153 bv0)))))
(declare-fun set154 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set154 bv0 bv1) (and (set153 bv0) (qRm6 acc bv1)))
     :pattern ((set154 bv0 bv1))
     :pattern ((set153 bv0) (qRm6 acc bv1)))))
(declare-fun set155 (T22 T22) Bool)
(assert (forall ((bv1 T22) (bv0 T22))
  (! (= (set155 bv0 bv1) (or (set154 bv0 bv1) (qRo7 acc bv0 bv1)))
     :pattern ((set155 bv0 bv1))
     :pattern ((set154 bv0 bv1))
     :pattern ((qRo7 acc bv0 bv1)))))
(assert (not (forall ((bv1 T22) (bv0 T22))
       (! (= (qRo7 v bv0 bv1) (set155 bv0 bv1))
          :pattern ((qRo7 v bv0 bv1))
          :pattern ((set155 bv0 bv1))))))
(check-sat)

(declare-sort T24)
(declare-const v T24)
(declare-const x_4 T24)
(declare-sort T25)
(declare-const x_3 T25)
(declare-const anc_0 T25)
(declare-const anc_1 T24)
(declare-const l T25)
(declare-const b T24)
(declare-const sv_4111 T25)
(declare-sort T26)
(declare-fun qRm6 (T24 T26) Bool)
(declare-fun Rhd5 (T25 T26) Bool)
(declare-fun Rmem4 (T25 T26) Bool)
(declare-fun Rob3 (T25 T26 T26) Bool)
(declare-fun Roa2 (T25 T26 T26) Bool)
(declare-fun Robs1 (T25 T26 T26) Bool)
(declare-fun Roas0 (T25 T26 T26) Bool)
(assert (= anc_1 x_4))
(assert (= anc_0 x_3))
(assert (= b x_4))
(assert (= b anc_1))
(assert (= l x_3))
(assert (= l anc_0))
(declare-fun set156 (T26 T26) Bool)
(assert (forall ((bv1 T26) (bv0 T26))
  (! (= (set156 bv0 bv1) false) :pattern ((set156 bv0 bv1)))))
(assert (forall ((bv1 T26) (bv0 T26))
  (! (= (Roas0 l bv0 bv1) (set156 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set156 bv0 bv1)))))
(declare-fun set157 (T26 T26) Bool)
(assert (forall ((bv1 T26) (bv0 T26))
  (! (= (set157 bv0 bv1) false) :pattern ((set157 bv0 bv1)))))
(assert (forall ((bv1 T26) (bv0 T26))
  (! (= (Robs1 l bv0 bv1) (set157 bv0 bv1))
     :pattern ((Robs1 l bv0 bv1))
     :pattern ((set157 bv0 bv1)))))
(declare-fun set158 (T26 T26) Bool)
(assert (forall ((bv1 T26) (bv0 T26))
  (! (= (set158 bv0 bv1) false) :pattern ((set158 bv0 bv1)))))
(assert (forall ((bv1 T26) (bv0 T26))
  (! (= (Roa2 l bv0 bv1) (set158 bv0 bv1))
     :pattern ((Roa2 l bv0 bv1))
     :pattern ((set158 bv0 bv1)))))
(declare-fun set159 (T26 T26) Bool)
(assert (forall ((bv1 T26) (bv0 T26))
  (! (= (set159 bv0 bv1) false) :pattern ((set159 bv0 bv1)))))
(assert (forall ((bv1 T26) (bv0 T26))
  (! (= (Rob3 l bv0 bv1) (set159 bv0 bv1))
     :pattern ((Rob3 l bv0 bv1))
     :pattern ((set159 bv0 bv1)))))
(declare-fun set160 (T26) Bool)
(assert (forall ((bv0 T26)) (! (= (set160 bv0) false) :pattern ((set160 bv0)))))
(assert (forall ((bv0 T26))
  (! (= (Rmem4 l bv0) (set160 bv0))
     :pattern ((Rmem4 l bv0))
     :pattern ((set160 bv0)))))
(declare-fun set161 (T26) Bool)
(assert (forall ((bv0 T26)) (! (= (set161 bv0) false) :pattern ((set161 bv0)))))
(assert (forall ((bv0 T26))
  (! (= (Rhd5 l bv0) (set161 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set161 bv0)))))
(assert (= v x_4))
(assert (= v anc_1))
(assert (= v b))
(declare-fun set162 (T26) Bool)
(assert (forall ((bv0 T26))
  (! (= (set162 bv0) (or (Rmem4 x_3 bv0) (qRm6 x_4 bv0)))
     :pattern ((set162 bv0))
     :pattern ((Rmem4 x_3 bv0))
     :pattern ((qRm6 x_4 bv0)))))
(assert (not (forall ((bv0 T26))
       (! (= (qRm6 v bv0) (set162 bv0))
          :pattern ((qRm6 v bv0))
          :pattern ((set162 bv0))))))
(check-sat)

(declare-sort T27)
(declare-const v T27)
(declare-const x_4 T27)
(declare-sort T28)
(declare-const x_3 T28)
(declare-const anc_0 T28)
(declare-const anc_1 T27)
(declare-const l T28)
(declare-const b T27)
(declare-const sv_4111 T28)
(declare-sort T29)
(declare-fun qRm7 (T27 T29) Bool)
(declare-fun qRo6 (T27 T29 T29) Bool)
(declare-fun Rhd5 (T28 T29) Bool)
(declare-fun Rmem4 (T28 T29) Bool)
(declare-fun Rob3 (T28 T29 T29) Bool)
(declare-fun Roa2 (T28 T29 T29) Bool)
(declare-fun Robs1 (T28 T29 T29) Bool)
(declare-fun Roas0 (T28 T29 T29) Bool)
(assert (= anc_1 x_4))
(assert (= anc_0 x_3))
(assert (= b x_4))
(assert (= b anc_1))
(assert (= l x_3))
(assert (= l anc_0))
(declare-fun set163 (T29 T29) Bool)
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (set163 bv0 bv1) false) :pattern ((set163 bv0 bv1)))))
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (Roas0 l bv0 bv1) (set163 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set163 bv0 bv1)))))
(declare-fun set164 (T29 T29) Bool)
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (set164 bv0 bv1) false) :pattern ((set164 bv0 bv1)))))
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (Robs1 l bv0 bv1) (set164 bv0 bv1))
     :pattern ((Robs1 l bv0 bv1))
     :pattern ((set164 bv0 bv1)))))
(declare-fun set165 (T29 T29) Bool)
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (set165 bv0 bv1) false) :pattern ((set165 bv0 bv1)))))
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (Roa2 l bv0 bv1) (set165 bv0 bv1))
     :pattern ((Roa2 l bv0 bv1))
     :pattern ((set165 bv0 bv1)))))
(declare-fun set166 (T29 T29) Bool)
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (set166 bv0 bv1) false) :pattern ((set166 bv0 bv1)))))
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (Rob3 l bv0 bv1) (set166 bv0 bv1))
     :pattern ((Rob3 l bv0 bv1))
     :pattern ((set166 bv0 bv1)))))
(declare-fun set167 (T29) Bool)
(assert (forall ((bv0 T29)) (! (= (set167 bv0) false) :pattern ((set167 bv0)))))
(assert (forall ((bv0 T29))
  (! (= (Rmem4 l bv0) (set167 bv0))
     :pattern ((Rmem4 l bv0))
     :pattern ((set167 bv0)))))
(declare-fun set168 (T29) Bool)
(assert (forall ((bv0 T29)) (! (= (set168 bv0) false) :pattern ((set168 bv0)))))
(assert (forall ((bv0 T29))
  (! (= (Rhd5 l bv0) (set168 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set168 bv0)))))
(assert (= v x_4))
(assert (= v anc_1))
(assert (= v b))
(declare-fun set169 (T29 T29) Bool)
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (set169 bv0 bv1) (and (Rmem4 x_3 bv0) (qRm7 x_4 bv1)))
     :pattern ((set169 bv0 bv1))
     :pattern ((Rmem4 x_3 bv0) (qRm7 x_4 bv1)))))
(declare-fun set170 (T29 T29) Bool)
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (set170 bv0 bv1) (or (qRo6 x_4 bv0 bv1) (set169 bv0 bv1)))
     :pattern ((set170 bv0 bv1))
     :pattern ((qRo6 x_4 bv0 bv1))
     :pattern ((set169 bv0 bv1)))))
(declare-fun set171 (T29 T29) Bool)
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (set171 bv0 bv1) (or (Robs1 x_3 bv0 bv1) (set170 bv0 bv1)))
     :pattern ((set171 bv0 bv1))
     :pattern ((Robs1 x_3 bv0 bv1))
     :pattern ((set170 bv0 bv1)))))
(assert (not (forall ((bv1 T29) (bv0 T29))
       (! (= (qRo6 v bv0 bv1) (set171 bv0 bv1))
          :pattern ((qRo6 v bv0 bv1))
          :pattern ((set171 bv0 bv1))))))
(check-sat)

(declare-sort T30)
(declare-const v T30)
(declare-const x_4 T30)
(declare-sort T31)
(declare-const x_3 T31)
(declare-const anc_0 T31)
(declare-const anc_1 T30)
(declare-const l T31)
(declare-const b T30)
(declare-sort T32)
(declare-const x T32)
(declare-const xs T31)
(declare-const sv_4114 T31)
(declare-const anc_8 T30)
(declare-fun qRo7 (T30 T32 T32) Bool)
(declare-fun qRm6 (T30 T32) Bool)
(declare-fun Rhd5 (T31 T32) Bool)
(declare-fun Rob4 (T31 T32 T32) Bool)
(declare-fun Roa3 (T31 T32 T32) Bool)
(declare-fun Robs2 (T31 T32 T32) Bool)
(declare-fun Rmem1 (T31 T32) Bool)
(declare-fun Roas0 (T31 T32 T32) Bool)
(assert (= anc_1 x_4))
(assert (= anc_0 x_3))
(assert (= b x_4))
(assert (= b anc_1))
(assert (= l x_3))
(assert (= l anc_0))
(declare-fun set172 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set172 bv0) (and (= bv0 x))) :pattern ((set172 bv0)))))
(declare-fun set173 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set173 bv0 bv1) (and (Rmem1 xs bv0) (set172 bv1)))
     :pattern ((set173 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set172 bv1)))))
(declare-fun set174 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set174 bv0 bv1) (or (set173 bv0 bv1) (Roas0 xs bv0 bv1)))
     :pattern ((set174 bv0 bv1))
     :pattern ((set173 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (Roas0 l bv0 bv1) (set174 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set174 bv0 bv1)))))
(declare-fun set175 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set175 bv0) (and (= bv0 x))) :pattern ((set175 bv0)))))
(declare-fun set176 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set176 bv0 bv1) (and (set175 bv0) (Rmem1 xs bv1)))
     :pattern ((set176 bv0 bv1))
     :pattern ((set175 bv0) (Rmem1 xs bv1)))))
(declare-fun set177 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set177 bv0 bv1) (or (set176 bv0 bv1) (Robs2 xs bv0 bv1)))
     :pattern ((set177 bv0 bv1))
     :pattern ((set176 bv0 bv1))
     :pattern ((Robs2 xs bv0 bv1)))))
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (Robs2 l bv0 bv1) (set177 bv0 bv1))
     :pattern ((Robs2 l bv0 bv1))
     :pattern ((set177 bv0 bv1)))))
(declare-fun set178 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set178 bv0) (and (= bv0 x))) :pattern ((set178 bv0)))))
(declare-fun set179 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set179 bv0 bv1) (and (Rmem1 xs bv0) (set178 bv1)))
     :pattern ((set179 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set178 bv1)))))
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (Roa3 l bv0 bv1) (set179 bv0 bv1))
     :pattern ((Roa3 l bv0 bv1))
     :pattern ((set179 bv0 bv1)))))
(declare-fun set180 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set180 bv0) (and (= bv0 x))) :pattern ((set180 bv0)))))
(declare-fun set181 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set181 bv0 bv1) (and (set180 bv0) (Rmem1 xs bv1)))
     :pattern ((set181 bv0 bv1))
     :pattern ((set180 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (Rob4 l bv0 bv1) (set181 bv0 bv1))
     :pattern ((Rob4 l bv0 bv1))
     :pattern ((set181 bv0 bv1)))))
(declare-fun set182 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set182 bv0) (and (= bv0 x))) :pattern ((set182 bv0)))))
(declare-fun set183 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set183 bv0) (or (set182 bv0) (Rmem1 xs bv0)))
     :pattern ((set183 bv0))
     :pattern ((set182 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T32))
  (! (= (Rmem1 l bv0) (set183 bv0))
     :pattern ((Rmem1 l bv0))
     :pattern ((set183 bv0)))))
(declare-fun set184 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set184 bv0) (and (= bv0 x))) :pattern ((set184 bv0)))))
(assert (forall ((bv0 T32))
  (! (= (Rhd5 l bv0) (set184 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set184 bv0)))))
(declare-fun set185 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set185 bv0) (or (Rmem1 xs bv0) (qRm6 b bv0)))
     :pattern ((set185 bv0))
     :pattern ((Rmem1 xs bv0))
     :pattern ((qRm6 b bv0)))))
(assert (forall ((bv0 T32))
  (! (= (qRm6 anc_8 bv0) (set185 bv0))
     :pattern ((qRm6 anc_8 bv0))
     :pattern ((set185 bv0)))))
(declare-fun set186 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set186 bv0 bv1) (and (Rmem1 xs bv0) (qRm6 b bv1)))
     :pattern ((set186 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (qRm6 b bv1)))))
(declare-fun set187 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set187 bv0 bv1) (or (qRo7 b bv0 bv1) (set186 bv0 bv1)))
     :pattern ((set187 bv0 bv1))
     :pattern ((qRo7 b bv0 bv1))
     :pattern ((set186 bv0 bv1)))))
(declare-fun set188 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set188 bv0 bv1) (or (Robs2 xs bv0 bv1) (set187 bv0 bv1)))
     :pattern ((set188 bv0 bv1))
     :pattern ((Robs2 xs bv0 bv1))
     :pattern ((set187 bv0 bv1)))))
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (qRo7 anc_8 bv0 bv1) (set188 bv0 bv1))
     :pattern ((qRo7 anc_8 bv0 bv1))
     :pattern ((set188 bv0 bv1)))))
(declare-fun set189 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set189 bv0) (and (= bv0 x))) :pattern ((set189 bv0)))))
(declare-fun set190 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set190 bv0) (or (set189 bv0) (qRm6 anc_8 bv0)))
     :pattern ((set190 bv0))
     :pattern ((set189 bv0))
     :pattern ((qRm6 anc_8 bv0)))))
(assert (forall ((bv0 T32))
  (! (= (qRm6 v bv0) (set190 bv0))
     :pattern ((qRm6 v bv0))
     :pattern ((set190 bv0)))))
(declare-fun set191 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set191 bv0) (and (= bv0 x))) :pattern ((set191 bv0)))))
(declare-fun set192 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set192 bv0 bv1) (and (set191 bv0) (qRm6 anc_8 bv1)))
     :pattern ((set192 bv0 bv1))
     :pattern ((set191 bv0) (qRm6 anc_8 bv1)))))
(declare-fun set193 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set193 bv0 bv1) (or (set192 bv0 bv1) (qRo7 anc_8 bv0 bv1)))
     :pattern ((set193 bv0 bv1))
     :pattern ((set192 bv0 bv1))
     :pattern ((qRo7 anc_8 bv0 bv1)))))
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (qRo7 v bv0 bv1) (set193 bv0 bv1))
     :pattern ((qRo7 v bv0 bv1))
     :pattern ((set193 bv0 bv1)))))
(declare-fun set194 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set194 bv0) (or (Rmem1 x_3 bv0) (qRm6 x_4 bv0)))
     :pattern ((set194 bv0))
     :pattern ((Rmem1 x_3 bv0))
     :pattern ((qRm6 x_4 bv0)))))
(assert (not (forall ((bv0 T32))
       (! (= (qRm6 v bv0) (set194 bv0))
          :pattern ((qRm6 v bv0))
          :pattern ((set194 bv0))))))
(check-sat)

(declare-sort T33)
(declare-const v T33)
(declare-const x_4 T33)
(declare-sort T34)
(declare-const x_3 T34)
(declare-const anc_0 T34)
(declare-const anc_1 T33)
(declare-const l T34)
(declare-const b T33)
(declare-sort T35)
(declare-const x T35)
(declare-const xs T34)
(declare-const sv_4114 T34)
(declare-const anc_8 T33)
(declare-fun qRo7 (T33 T35 T35) Bool)
(declare-fun qRm6 (T33 T35) Bool)
(declare-fun Rhd5 (T34 T35) Bool)
(declare-fun Rob4 (T34 T35 T35) Bool)
(declare-fun Roa3 (T34 T35 T35) Bool)
(declare-fun Robs2 (T34 T35 T35) Bool)
(declare-fun Rmem1 (T34 T35) Bool)
(declare-fun Roas0 (T34 T35 T35) Bool)
(assert (= anc_1 x_4))
(assert (= anc_0 x_3))
(assert (= b x_4))
(assert (= b anc_1))
(assert (= l x_3))
(assert (= l anc_0))
(declare-fun set195 (T35) Bool)
(assert (forall ((bv0 T35))
  (! (= (set195 bv0) (and (= bv0 x))) :pattern ((set195 bv0)))))
(declare-fun set196 (T35 T35) Bool)
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (set196 bv0 bv1) (and (Rmem1 xs bv0) (set195 bv1)))
     :pattern ((set196 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set195 bv1)))))
(declare-fun set197 (T35 T35) Bool)
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (set197 bv0 bv1) (or (set196 bv0 bv1) (Roas0 xs bv0 bv1)))
     :pattern ((set197 bv0 bv1))
     :pattern ((set196 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (Roas0 l bv0 bv1) (set197 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set197 bv0 bv1)))))
(declare-fun set198 (T35) Bool)
(assert (forall ((bv0 T35))
  (! (= (set198 bv0) (and (= bv0 x))) :pattern ((set198 bv0)))))
(declare-fun set199 (T35 T35) Bool)
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (set199 bv0 bv1) (and (set198 bv0) (Rmem1 xs bv1)))
     :pattern ((set199 bv0 bv1))
     :pattern ((set198 bv0) (Rmem1 xs bv1)))))
(declare-fun set200 (T35 T35) Bool)
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (set200 bv0 bv1) (or (set199 bv0 bv1) (Robs2 xs bv0 bv1)))
     :pattern ((set200 bv0 bv1))
     :pattern ((set199 bv0 bv1))
     :pattern ((Robs2 xs bv0 bv1)))))
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (Robs2 l bv0 bv1) (set200 bv0 bv1))
     :pattern ((Robs2 l bv0 bv1))
     :pattern ((set200 bv0 bv1)))))
(declare-fun set201 (T35) Bool)
(assert (forall ((bv0 T35))
  (! (= (set201 bv0) (and (= bv0 x))) :pattern ((set201 bv0)))))
(declare-fun set202 (T35 T35) Bool)
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (set202 bv0 bv1) (and (Rmem1 xs bv0) (set201 bv1)))
     :pattern ((set202 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set201 bv1)))))
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (Roa3 l bv0 bv1) (set202 bv0 bv1))
     :pattern ((Roa3 l bv0 bv1))
     :pattern ((set202 bv0 bv1)))))
(declare-fun set203 (T35) Bool)
(assert (forall ((bv0 T35))
  (! (= (set203 bv0) (and (= bv0 x))) :pattern ((set203 bv0)))))
(declare-fun set204 (T35 T35) Bool)
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (set204 bv0 bv1) (and (set203 bv0) (Rmem1 xs bv1)))
     :pattern ((set204 bv0 bv1))
     :pattern ((set203 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (Rob4 l bv0 bv1) (set204 bv0 bv1))
     :pattern ((Rob4 l bv0 bv1))
     :pattern ((set204 bv0 bv1)))))
(declare-fun set205 (T35) Bool)
(assert (forall ((bv0 T35))
  (! (= (set205 bv0) (and (= bv0 x))) :pattern ((set205 bv0)))))
(declare-fun set206 (T35) Bool)
(assert (forall ((bv0 T35))
  (! (= (set206 bv0) (or (set205 bv0) (Rmem1 xs bv0)))
     :pattern ((set206 bv0))
     :pattern ((set205 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T35))
  (! (= (Rmem1 l bv0) (set206 bv0))
     :pattern ((Rmem1 l bv0))
     :pattern ((set206 bv0)))))
(declare-fun set207 (T35) Bool)
(assert (forall ((bv0 T35))
  (! (= (set207 bv0) (and (= bv0 x))) :pattern ((set207 bv0)))))
(assert (forall ((bv0 T35))
  (! (= (Rhd5 l bv0) (set207 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set207 bv0)))))
(declare-fun set208 (T35) Bool)
(assert (forall ((bv0 T35))
  (! (= (set208 bv0) (or (Rmem1 xs bv0) (qRm6 b bv0)))
     :pattern ((set208 bv0))
     :pattern ((Rmem1 xs bv0))
     :pattern ((qRm6 b bv0)))))
(assert (forall ((bv0 T35))
  (! (= (qRm6 anc_8 bv0) (set208 bv0))
     :pattern ((qRm6 anc_8 bv0))
     :pattern ((set208 bv0)))))
(declare-fun set209 (T35 T35) Bool)
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (set209 bv0 bv1) (and (Rmem1 xs bv0) (qRm6 b bv1)))
     :pattern ((set209 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (qRm6 b bv1)))))
(declare-fun set210 (T35 T35) Bool)
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (set210 bv0 bv1) (or (qRo7 b bv0 bv1) (set209 bv0 bv1)))
     :pattern ((set210 bv0 bv1))
     :pattern ((qRo7 b bv0 bv1))
     :pattern ((set209 bv0 bv1)))))
(declare-fun set211 (T35 T35) Bool)
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (set211 bv0 bv1) (or (Robs2 xs bv0 bv1) (set210 bv0 bv1)))
     :pattern ((set211 bv0 bv1))
     :pattern ((Robs2 xs bv0 bv1))
     :pattern ((set210 bv0 bv1)))))
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (qRo7 anc_8 bv0 bv1) (set211 bv0 bv1))
     :pattern ((qRo7 anc_8 bv0 bv1))
     :pattern ((set211 bv0 bv1)))))
(declare-fun set212 (T35) Bool)
(assert (forall ((bv0 T35))
  (! (= (set212 bv0) (and (= bv0 x))) :pattern ((set212 bv0)))))
(declare-fun set213 (T35) Bool)
(assert (forall ((bv0 T35))
  (! (= (set213 bv0) (or (set212 bv0) (qRm6 anc_8 bv0)))
     :pattern ((set213 bv0))
     :pattern ((set212 bv0))
     :pattern ((qRm6 anc_8 bv0)))))
(assert (forall ((bv0 T35))
  (! (= (qRm6 v bv0) (set213 bv0))
     :pattern ((qRm6 v bv0))
     :pattern ((set213 bv0)))))
(declare-fun set214 (T35) Bool)
(assert (forall ((bv0 T35))
  (! (= (set214 bv0) (and (= bv0 x))) :pattern ((set214 bv0)))))
(declare-fun set215 (T35 T35) Bool)
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (set215 bv0 bv1) (and (set214 bv0) (qRm6 anc_8 bv1)))
     :pattern ((set215 bv0 bv1))
     :pattern ((set214 bv0) (qRm6 anc_8 bv1)))))
(declare-fun set216 (T35 T35) Bool)
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (set216 bv0 bv1) (or (set215 bv0 bv1) (qRo7 anc_8 bv0 bv1)))
     :pattern ((set216 bv0 bv1))
     :pattern ((set215 bv0 bv1))
     :pattern ((qRo7 anc_8 bv0 bv1)))))
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (qRo7 v bv0 bv1) (set216 bv0 bv1))
     :pattern ((qRo7 v bv0 bv1))
     :pattern ((set216 bv0 bv1)))))
(declare-fun set217 (T35 T35) Bool)
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (set217 bv0 bv1) (and (Rmem1 x_3 bv0) (qRm6 x_4 bv1)))
     :pattern ((set217 bv0 bv1))
     :pattern ((Rmem1 x_3 bv0) (qRm6 x_4 bv1)))))
(declare-fun set218 (T35 T35) Bool)
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (set218 bv0 bv1) (or (qRo7 x_4 bv0 bv1) (set217 bv0 bv1)))
     :pattern ((set218 bv0 bv1))
     :pattern ((qRo7 x_4 bv0 bv1))
     :pattern ((set217 bv0 bv1)))))
(declare-fun set219 (T35 T35) Bool)
(assert (forall ((bv1 T35) (bv0 T35))
  (! (= (set219 bv0 bv1) (or (Robs2 x_3 bv0 bv1) (set218 bv0 bv1)))
     :pattern ((set219 bv0 bv1))
     :pattern ((Robs2 x_3 bv0 bv1))
     :pattern ((set218 bv0 bv1)))))
(assert (not (forall ((bv1 T35) (bv0 T35))
       (! (= (qRo7 v bv0 bv1) (set219 bv0 bv1))
          :pattern ((qRo7 v bv0 bv1))
          :pattern ((set219 bv0 bv1))))))
(check-sat)

