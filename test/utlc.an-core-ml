Catalyst rexported (built Sat Feb 15 11:56:42 EST 2014 on tycon.lan)
  created this file on Sat Feb 15 15:54:20 2014.
Do not edit this file.
Flag settings: 
   align: 4
   atMLtons: ()
   chunk: coalesce 4096
   closureConvertGlobalize: true
   closureConvertShrink: true
   codegen: x86
   contifyIntoMain: false
   debug: false
   defaultChar: char8
   defaultWideChar: widechar32
   defaultInt: int32
   defaultReal: real64
   defaultWord: word32
   diag passes: []
   drop passes: []
   elaborate allowConstant (default): false
   elaborate allowConstant (enabled): true
   elaborate allowFFI (default): false
   elaborate allowFFI (enabled): true
   elaborate allowPrim (default): false
   elaborate allowPrim (enabled): true
   elaborate allowOverload (default): false
   elaborate allowOverload (enabled): true
   elaborate allowRebindEquals (default): false
   elaborate allowRebindEquals (enabled): true
   elaborate deadCode (default): false
   elaborate deadCode (enabled): true
   elaborate forceUsed (default): false
   elaborate forceUsed (enabled): true
   elaborate ffiStr (default): 
   elaborate ffiStr (enabled): true
   elaborate nonexhaustiveExnMatch (default): default
   elaborate nonexhaustiveExnMatch (enabled): true
   elaborate nonexhaustiveMatch (default): warn
   elaborate nonexhaustiveMatch (enabled): true
   elaborate redundantMatch (default): warn
   elaborate redundantMatch (enabled): true
   elaborate resolveScope (default): strdec
   elaborate resolveScope (enabled): true
   elaborate sequenceNonUnit (default): ignore
   elaborate sequenceNonUnit (enabled): true
   elaborate warnUnused (default): false
   elaborate warnUnused (enabled): true
   elaborate only: false
   emit main: true
   export header: None
   exn history: false
   generated output format: executable
   gc check: Limit
   indentation: 3
   inlineIntoMain: true
   inlineLeafA: {loops = true, repeat = true, size = Some 20}
   inlineLeafB: {loops = true, repeat = true, size = Some 40}
   inlineNonRec: {small = 60, product = 320}
   input file: utlc.an-core-ml
   spec file: test/utlc.spec
   keep CoreML: true
   keep Env: false
   keep def use: true
   keep dot: false
   keep Machine: false
   keep passes: []
   keep RSSA: false
   keep SSA: false
   keep SSA2: false
   keep SXML: false
   keep XML: false
   extra_: false
   lib dir: /Users/gowtham/git/mlton/newexecs/usr/local/lib/mlton
   lib target dir: /Users/gowtham/git/mlton/newexecs/usr/local/lib/mlton/targets/self
   loop passes: 1
   mark cards: true
   max function size: 10000
   mlb path vars: [{var = MLTON_ROOT, path = $(LIB_MLTON_DIR)/sml}, {var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}]
   native commented: 0
   native live stack: false
   native optimize: 1
   native move hoist: true
   native copy prop: true
   native copy prop cutoff: 1000
   native cutoff: 100
   native live transfer: 8
   native shuffle: true
   native ieee fp: false
   native split: Some 20000
   optimizationPasses: []
   polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300}
   prefer abs paths: false
   prof passes: []
   profile: None
   profile branch: false
   profile C: []
   profile IL: ProfileSource
   profile include/exclude: []
   profile raise: false
   profile stack: false
   profile val: false
   show basis: None
   show def-use: None
   show types: true
   target: self
   target arch: X86
   target OS: Linux
   type check: false
   verbosity: Pass
   warn unrecognized annotation: true
   warn deprecated features: true
   zone cut depth: 100


Decs:
datatype 'a_2 list = nil
		     | :: of 'a_2 * 'a_2 list
		     | cons of 'a_2 * 'a_2 list
datatype exp = Var of string
	       | App of exp * exp
	       | Abs of string * exp
val rec ''a_4258
   idEq: ''a_4258 * ''a_4258 -> bool = 
      (fn x_0: ''a_4258 * ''a_4258 =>
       case x_0 of
	 (x, y) =>
	 let val anc_1115 =. =_0 (''a_4258)
	     val anc_1116 =. x
	     val anc_1117 =. y
	 in
	    (anc_1115 (anc_1116, anc_1117))
	 end)
val rec ''a_4259
   listHas: ''a_4259 list -> ''a_4259 -> bool = 
      (fn x_1: ''a_4259 list =>
       (fn x_2: ''a_4259 =>
	let val anc_1107 =. x_1
	    val anc_1108 =. x_2
	in
	   case (anc_1107, anc_1108) of
	     (l, n) =>
	     case l of
	       nil[''a_4259] => false
	     | ::[''a_4259](x, xs) =>
	       let val anc_1109 =. idEq (''a_4259)
		   val anc_1110 =. x
		   val anc_1111 =. n
		   val anc_1112 =. (anc_1109 (anc_1110, anc_1111))
	       in
		  case anc_1112 of
		    true => true
		  | false =>
		    let val anc_1113 =. listHas (''a_4259)
			val anc_1114 =. (anc_1113 xs)
		    in
		       (anc_1114 n)
		    end
	       end
	end))
val rec
   freeVars: exp -> string list = 
      (fn x_3: exp =>
       case x_3 of
	 e =>
	 case e of
	   Varid =>
	   let val anc_1084 =. :: (string)
	       val anc_1085 =. id
	       val anc_1086 =. nil (string)
	   in
	      (anc_1084 (anc_1085, anc_1086))
	   end
	 | App(e1, e2) =>
	   let val anc_1087 =. concat_0 (string)
	       val anc_1088 =. :: (string list)
	       val anc_1089 =. freeVars
	       val anc_1090 =. (anc_1089 e1)
	       val anc_1091 =. :: (string list)
	       val anc_1092 =. freeVars
	       val anc_1093 =. (anc_1092 e2)
	       val anc_1094 =. nil (string list)
	       val anc_1095 =. (anc_1091 (anc_1093, anc_1094))
	       val anc_1096 =. (anc_1088 (anc_1090, anc_1095))
	   in
	      (anc_1087 anc_1096)
	   end
	 | Abs(id, e') =>
	   let val anc_1097 =. filter_0 (string)
	       val anc_1103 =.
		  (fn x_4: string =>
		   case x_4 of
		     fv =>
		     let val anc_1098 =. not
			 val anc_1099 =. =_0 (string)
			 val anc_1100 =. fv
			 val anc_1101 =. id
			 val anc_1102 =. (anc_1099 (anc_1100, anc_1101))
		     in
			(anc_1098 anc_1102)
		     end)
	       val anc_1104 =. (anc_1097 anc_1103)
	       val anc_1105 =. freeVars
	       val anc_1106 =. (anc_1105 e')
	   in
	      (anc_1104 anc_1106)
	   end)
val rec
   createNewName: string list -> string -> string = 
      (fn x_5: string list =>
       (fn x_6: string =>
	let val anc_1070 =. x_5
	    val anc_1071 =. x_6
	in
	   case (anc_1070, anc_1071) of
	     (fvs, base) =>
	     let val anc_1081 =. ^
		 val anc_1082 =. base
		 val anc_1083 =. "'"
		 val name =. (anc_1081 (anc_1082, anc_1083))
		 val anc_1072 =. exists_0 (string)
		 val anc_1076 =.
		    (fn x_7: string =>
		     case x_7 of
		       fv =>
		       let val anc_1073 =. =_0 (string)
			   val anc_1074 =. fv
			   val anc_1075 =. name
		       in
			  (anc_1073 (anc_1074, anc_1075))
		       end)
		 val anc_1077 =. (anc_1072 anc_1076)
		 val anc_1078 =. (anc_1077 fvs)
	     in
		case anc_1078 of
		  true =>
		  let val anc_1079 =. createNewName
		      val anc_1080 =. (anc_1079 fvs)
		  in
		     (anc_1080 name)
		  end
		| false => name
	     end
	end))
val rec
   alphaConvert: exp -> exp = 
      (fn x_11: exp =>
       case x_11 of
	 e =>
	 case e of
	   Abs(id, e') =>
	   let val anc_1034 =. freeVars
	       val fv_e' =. (anc_1034 e')
	       val anc_1032 =. createNewName
	       val anc_1033 =. (anc_1032 fv_e')
	       val id' =. (anc_1033 id)
	       val anc_1024 =. Abs
	       val anc_1025 =. id'
	       val anc_1026 =. subst
	       val anc_1027 =. Var
	       val anc_1028 =. (anc_1027 id')
	       val anc_1029 =. (anc_1026 anc_1028)
	       val anc_1030 =. (anc_1029 id)
	       val anc_1031 =. (anc_1030 e')
	   in
	      (anc_1024 (anc_1025, anc_1031))
	   end
	 | _ => Nop)
   subst: exp -> string -> exp -> exp = 
      (fn x_8: exp =>
       (fn x_9: string =>
	(fn x_10: exp =>
	 let val anc_1035 =. x_8
	     val anc_1036 =. x_9
	     val anc_1037 =. x_10
	 in
	    case (anc_1035, anc_1036, anc_1037) of
	      (e1, id, e2) =>
	      case e2 of
		Varid' =>
		let val anc_1038 =. idEq (string)
		    val anc_1039 =. id
		    val anc_1040 =. id'
		    val anc_1041 =. (anc_1038 (anc_1039, anc_1040))
		in
		   case anc_1041 of
		     true => e1 | false => e2
		end
	      | App(e21, e22) =>
		let val anc_1042 =. App
		    val anc_1043 =. subst
		    val anc_1044 =. (anc_1043 e1)
		    val anc_1045 =. (anc_1044 id)
		    val anc_1046 =. (anc_1045 e21)
		    val anc_1047 =. subst
		    val anc_1048 =. (anc_1047 e1)
		    val anc_1049 =. (anc_1048 id)
		    val anc_1050 =. (anc_1049 e22)
		in
		   (anc_1042 (anc_1046, anc_1050))
		end
	      | Abs(id', e2') =>
		let val anc_1051 =. idEq (string)
		    val anc_1052 =. id'
		    val anc_1053 =. id
		    val anc_1054 =. (anc_1051 (anc_1052, anc_1053))
		in
		   case anc_1054 of
		     true => e2
		   | false =>
		     let val anc_1069 =. freeVars
			 val fv_e1 =. (anc_1069 e1)
			 val anc_1055 =. listHas (string)
			 val anc_1056 =. (anc_1055 fv_e1)
			 val anc_1057 =. (anc_1056 id')
		     in
			case anc_1057 of
			  true =>
			  let val anc_1058 =. subst
			      val anc_1059 =. (anc_1058 e1)
			      val anc_1060 =. (anc_1059 id)
			      val anc_1061 =. alphaConvert
			      val anc_1062 =. (anc_1061 e2)
			  in
			     (anc_1060 anc_1062)
			  end
			| false =>
			  let val anc_1063 =. Abs
			      val anc_1064 =. id'
			      val anc_1065 =. subst
			      val anc_1066 =. (anc_1065 e1)
			      val anc_1067 =. (anc_1066 id)
			      val anc_1068 =. (anc_1067 e2')
			  in
			     (anc_1063 (anc_1064, anc_1068))
			  end
		     end
		end
	 end)))
