Catalyst rexported (built Sun Oct 20 16:30:57 EDT 2013 on pal-nat184-222-48.itap.purdue.edu)
  created this file on Sun Oct 20 16:31:11 2013.
Do not edit this file.
Flag settings: 
   align: 4
   atMLtons: ()
   chunk: coalesce 4096
   closureConvertGlobalize: true
   closureConvertShrink: true
   codegen: x86
   contifyIntoMain: false
   debug: false
   defaultChar: char8
   defaultWideChar: widechar32
   defaultInt: int32
   defaultReal: real64
   defaultWord: word32
   diag passes: []
   drop passes: []
   elaborate allowConstant (default): false
   elaborate allowConstant (enabled): true
   elaborate allowFFI (default): false
   elaborate allowFFI (enabled): true
   elaborate allowPrim (default): false
   elaborate allowPrim (enabled): true
   elaborate allowOverload (default): false
   elaborate allowOverload (enabled): true
   elaborate allowRebindEquals (default): false
   elaborate allowRebindEquals (enabled): true
   elaborate deadCode (default): false
   elaborate deadCode (enabled): true
   elaborate forceUsed (default): false
   elaborate forceUsed (enabled): true
   elaborate ffiStr (default): 
   elaborate ffiStr (enabled): true
   elaborate nonexhaustiveExnMatch (default): default
   elaborate nonexhaustiveExnMatch (enabled): true
   elaborate nonexhaustiveMatch (default): warn
   elaborate nonexhaustiveMatch (enabled): true
   elaborate redundantMatch (default): warn
   elaborate redundantMatch (enabled): true
   elaborate resolveScope (default): strdec
   elaborate resolveScope (enabled): true
   elaborate sequenceNonUnit (default): ignore
   elaborate sequenceNonUnit (enabled): true
   elaborate warnUnused (default): false
   elaborate warnUnused (enabled): true
   elaborate only: false
   emit main: true
   export header: None
   exn history: false
   generated output format: executable
   gc check: Limit
   indentation: 3
   inlineIntoMain: true
   inlineLeafA: {loops = true, repeat = true, size = Some 20}
   inlineLeafB: {loops = true, repeat = true, size = Some 40}
   inlineNonRec: {small = 60, product = 320}
   input file: concat.vcs
   spec file: test/concat.spec
   keep CoreML: true
   keep Env: false
   keep def use: true
   keep dot: false
   keep Machine: false
   keep passes: []
   keep RSSA: false
   keep SSA: false
   keep SSA2: false
   keep SXML: false
   keep XML: false
   extra_: false
   lib dir: /Users/gowtham/git/mlton/newexecs/usr/local/lib/mlton
   lib target dir: /Users/gowtham/git/mlton/newexecs/usr/local/lib/mlton/targets/self
   loop passes: 1
   mark cards: true
   max function size: 10000
   mlb path vars: [{var = MLTON_ROOT, path = $(LIB_MLTON_DIR)/sml}, {var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}]
   native commented: 0
   native live stack: false
   native optimize: 1
   native move hoist: true
   native copy prop: true
   native copy prop cutoff: 1000
   native cutoff: 100
   native live transfer: 8
   native shuffle: true
   native ieee fp: false
   native split: Some 20000
   optimizationPasses: []
   polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300}
   prefer abs paths: false
   prof passes: []
   profile: None
   profile branch: false
   profile C: []
   profile IL: ProfileSource
   profile include/exclude: []
   profile raise: false
   profile stack: false
   profile val: false
   show basis: None
   show def-use: None
   show types: true
   target: self
   target arch: X86
   target OS: Linux
   type check: false
   verbosity: Silent
   warn unrecognized annotation: true
   warn deprecated features: true
   zone cut depth: 100
Elaborated VarEnv:

:: :-> ('a_2)({1:'a_2 | true}, {2: 'a_2 list | true})
	      -> {v_6: 'a_2 list | true
				   /\ Robs(v_6) = (({(1)} X Rmem(2)) U (Robs(2) U {()}))
				   /\ Rob(v_6) = ({(1)} X Rmem(2))
				   /\ Rmem(v_6) = ({(1)} U (Rmem(2) U {()}))
				   /\ Rhd(v_6) = {(1)}}
concat :-> (){l1:<?> | true}
	      -> {l2:<?> | true}
		  -> {l:<?> | Rmem(l) = (Rmem(l1) U Rmem(l2))}
nil :-> ('a_2){v_0: 'a_2 list | true
				/\ Robs(v_0) = {()}
				/\ Rob(v_0) = {()}
				/\ Rmem(v_0) = {()}
				/\ Rhd(v_0) = {()}}
Verification Conditions:

bindings(x_1 :  'a_4258 list,
	 x_0 :  'a_4258 list,
	 nil :  'a_2 list,
	 anc_1024 :  'a_4258 list,
	 anc_1025 :  'a_4258 list,
	 l1 :  'a_4258 list,
	 l2 :  'a_4258 list)
in
      Robs(nil) = {()}
      Rob(nil) = {()}
      Rmem(nil) = {()}
      Rhd(nil) = {()}
      anc_1025 = x_1
      anc_1024 = x_0
      l2 = x_1
      l2 = anc_1025
      l1 = x_0
      l1 = anc_1024
      Robs(l1) = {()}
      Rob(l1) = {()}
      Rmem(l1) = {()}
      Rhd(l1) = {()}
      v_6 = x_1
      v_6 = anc_1025
      v_6 = l2
   =>
      Rmem(v_6) = (Rmem(l1) U Rmem(l2))
end
bindings(x_1 :  'a_4258 list,
	 x_0 :  'a_4258 list,
	 nil :  'a_2 list,
	 anc_1024 :  'a_4258 list,
	 anc_1025 :  'a_4258 list,
	 l1 :  'a_4258 list,
	 l2 :  'a_4258 list,
	 x : 'a_4258,
	 xs :  'a_4258 list,
	 sv_4103 :  'a_4258 list,
	 anc_1027 : 'a_4258,
	 anc_1030 :  'a_4258 list)
in
      Robs(nil) = {()}
      Rob(nil) = {()}
      Rmem(nil) = {()}
      Rhd(nil) = {()}
      anc_1025 = x_1
      anc_1024 = x_0
      l2 = x_1
      l2 = anc_1025
      l1 = x_0
      l1 = anc_1024
      Robs(l1) = (({(x)} X Rmem(xs)) U (Robs(xs) U {()}))
      Rob(l1) = ({(x)} X Rmem(xs))
      Rmem(l1) = ({(x)} U (Rmem(xs) U {()}))
      Rhd(l1) = {(x)}
      Rmem(anc_1030) = (Rmem(xs) U Rmem(l2))
      anc_1027 = x
      Robs(v_6) = (({(anc_1027)} X Rmem(anc_1030)) U (Robs(anc_1030) U {()}))
      Rob(v_6) = ({(anc_1027)} X Rmem(anc_1030))
      Rmem(v_6) = ({(anc_1027)} U (Rmem(anc_1030) U {()}))
      Rhd(v_6) = {(anc_1027)}
   =>
      Rmem(v_6) = (Rmem(l1) U Rmem(l2))
end
