(declare-sort T0)
(declare-const v T0)
(declare-sort T1)
(declare-const x T1)
(declare-const anc_13 T0)
(declare-sort T2)
(declare-const sv_4103 T2)
(declare-const xs T2)
(declare-const x T1)
(declare-const l T2)
(declare-const anc_9 T2)
(declare-const x_0 T2)
(declare-fun Rhd5 (T2 T1) Bool)
(declare-fun Rob4 (T2 T1 T1) Bool)
(declare-fun Robs3 (T2 T1 T1) Bool)
(declare-fun Roa2 (T2 T1 T1) Bool)
(declare-fun Rmem1 (T2 T1) Bool)
(declare-fun Roas0 (T2 T1 T1) Bool)
(declare-sort T3)
(declare-fun R1 (T1 T3) Bool)
(declare-fun R2 (T0 T3) Bool)
(assert (forall ((bv0 T3))
  (! (= (R2 anc_13 bv0) (R1 x bv0))
     :pattern ((R2 anc_13 bv0))
     :pattern ((R1 x bv0)))))
(declare-fun set0 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set0 bv0) (and (= bv0 x))) :pattern ((set0 bv0)))))
(declare-fun set1 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set1 bv0 bv1) (and (Rmem1 xs bv0) (set0 bv1)))
     :pattern ((set1 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set0 bv1)))))
(declare-fun set2 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set2 bv0 bv1) (or (set1 bv0 bv1) (Roas0 xs bv0 bv1)))
     :pattern ((set2 bv0 bv1))
     :pattern ((set1 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (Roas0 l bv0 bv1) (set2 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set2 bv0 bv1)))))
(declare-fun set3 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set3 bv0) (and (= bv0 x))) :pattern ((set3 bv0)))))
(declare-fun set4 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set4 bv0 bv1) (and (Rmem1 xs bv0) (set3 bv1)))
     :pattern ((set4 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set3 bv1)))))
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (Roa2 l bv0 bv1) (set4 bv0 bv1))
     :pattern ((Roa2 l bv0 bv1))
     :pattern ((set4 bv0 bv1)))))
(declare-fun set5 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set5 bv0) (and (= bv0 x))) :pattern ((set5 bv0)))))
(declare-fun set6 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set6 bv0 bv1) (and (set5 bv0) (Rmem1 xs bv1)))
     :pattern ((set6 bv0 bv1))
     :pattern ((set5 bv0) (Rmem1 xs bv1)))))
(declare-fun set7 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set7 bv0 bv1) (or (set6 bv0 bv1) (Robs3 xs bv0 bv1)))
     :pattern ((set7 bv0 bv1))
     :pattern ((set6 bv0 bv1))
     :pattern ((Robs3 xs bv0 bv1)))))
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (Robs3 l bv0 bv1) (set7 bv0 bv1))
     :pattern ((Robs3 l bv0 bv1))
     :pattern ((set7 bv0 bv1)))))
(declare-fun set8 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set8 bv0) (and (= bv0 x))) :pattern ((set8 bv0)))))
(declare-fun set9 (T1 T1) Bool)
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (set9 bv0 bv1) (and (set8 bv0) (Rmem1 xs bv1)))
     :pattern ((set9 bv0 bv1))
     :pattern ((set8 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T1) (bv0 T1))
  (! (= (Rob4 l bv0 bv1) (set9 bv0 bv1))
     :pattern ((Rob4 l bv0 bv1))
     :pattern ((set9 bv0 bv1)))))
(declare-fun set10 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set10 bv0) (and (= bv0 x))) :pattern ((set10 bv0)))))
(declare-fun set11 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set11 bv0) (or (set10 bv0) (Rmem1 xs bv0)))
     :pattern ((set11 bv0))
     :pattern ((set10 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T1))
  (! (= (Rmem1 l bv0) (set11 bv0))
     :pattern ((Rmem1 l bv0))
     :pattern ((set11 bv0)))))
(declare-fun set12 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set12 bv0) (and (= bv0 x))) :pattern ((set12 bv0)))))
(assert (forall ((bv0 T1))
  (! (= (Rhd5 l bv0) (set12 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set12 bv0)))))
(assert (= l x_0))
(assert (= l anc_9))
(assert (= anc_9 x_0))
(assert (forall ((bv0 T3))
  (! (= (R2 v bv0) (R1 x bv0)) :pattern ((R2 v bv0)) :pattern ((R1 x bv0)))))
(assert (not (forall ((bv0 T3))
       (! (= (R2 v bv0) (R1 x bv0)) :pattern ((R2 v bv0)) :pattern ((R1 x bv0))))))
(check-sat)

(declare-sort T4)
(declare-const v_15 T4)
(declare-sort T5)
(declare-const x_0 T5)
(declare-const anc_9 T5)
(declare-const l T5)
(declare-const sv_4100 T5)
(declare-sort T6)
(declare-fun Rmem13 (T5 T6) Bool)
(declare-fun Rmem12 (T4 T6) Bool)
(declare-sort T7)
(declare-fun Rhd11 (T4 T7) Bool)
(declare-fun Rmem10 (T4 T7) Bool)
(declare-fun Rob9 (T4 T7 T7) Bool)
(declare-fun Robs8 (T4 T7 T7) Bool)
(declare-fun Roa7 (T4 T7 T7) Bool)
(declare-fun Roas6 (T4 T7 T7) Bool)
(declare-sort T8)
(declare-fun Rhd5 (T5 T8) Bool)
(declare-fun Rmem4 (T5 T8) Bool)
(declare-fun Rob3 (T5 T8 T8) Bool)
(declare-fun Robs2 (T5 T8 T8) Bool)
(declare-fun Roa1 (T5 T8 T8) Bool)
(declare-fun Roas0 (T5 T8 T8) Bool)
(declare-fun R1 (T8 T6) Bool)
(declare-fun R2 (T7 T6) Bool)
(declare-fun set13 (T7 T6) Bool)
(assert (forall ((bv1 T6) (bv0 T7))
  (! (= (set13 bv0 bv1) (and (R2 bv0 bv1)))
     :pattern ((set13 bv0 bv1))
     :pattern ((R2 bv0 bv1)))))
(declare-fun set14 (T4 T7 T6) Bool)
(assert (forall ((bv2 T6) (bv1 T7) (bv0 T4))
  (! (= (set14 bv0 bv1 bv2) (and (Rmem10 bv0 bv1) (set13 bv1 bv2)))
     :pattern ((set14 bv0 bv1 bv2))
     :pattern ((Rmem10 bv0 bv1) (set13 bv1 bv2)))))
(assert (forall ((bv2 T6) (bv1 T7) (bv0 T4))
  (! (=> (set14 bv0 bv1 bv2) (Rmem12 bv0 bv2))
     :pattern ((set14 bv0 bv1 bv2) (Rmem12 bv0 bv2)))))
(assert (forall ((bv2 T6) (bv1 T4))
  (exists ((ev0 T7))
    (! (=> (Rmem12 bv1 bv2) (set14 bv1 ev0 bv2))
       :pattern ((Rmem12 bv1 bv2) (set14 bv1 ev0 bv2))))))
(declare-fun set15 (T8 T6) Bool)
(assert (forall ((bv1 T6) (bv0 T8))
  (! (= (set15 bv0 bv1) (and (R1 bv0 bv1)))
     :pattern ((set15 bv0 bv1))
     :pattern ((R1 bv0 bv1)))))
(declare-fun set16 (T5 T8 T6) Bool)
(assert (forall ((bv2 T6) (bv1 T8) (bv0 T5))
  (! (= (set16 bv0 bv1 bv2) (and (Rmem4 bv0 bv1) (set15 bv1 bv2)))
     :pattern ((set16 bv0 bv1 bv2))
     :pattern ((Rmem4 bv0 bv1) (set15 bv1 bv2)))))
(assert (forall ((bv2 T6) (bv1 T8) (bv0 T5))
  (! (=> (set16 bv0 bv1 bv2) (Rmem13 bv0 bv2))
     :pattern ((set16 bv0 bv1 bv2) (Rmem13 bv0 bv2)))))
(assert (forall ((bv2 T6) (bv1 T5))
  (exists ((ev0 T8))
    (! (=> (Rmem13 bv1 bv2) (set16 bv1 ev0 bv2))
       :pattern ((Rmem13 bv1 bv2) (set16 bv1 ev0 bv2))))))
(assert (= anc_9 x_0))
(assert (= l x_0))
(assert (= l anc_9))
(declare-fun set17 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set17 bv0 bv1) false) :pattern ((set17 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Roas0 l bv0 bv1) (set17 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set17 bv0 bv1)))))
(declare-fun set18 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set18 bv0 bv1) false) :pattern ((set18 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Roa1 l bv0 bv1) (set18 bv0 bv1))
     :pattern ((Roa1 l bv0 bv1))
     :pattern ((set18 bv0 bv1)))))
(declare-fun set19 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set19 bv0 bv1) false) :pattern ((set19 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Robs2 l bv0 bv1) (set19 bv0 bv1))
     :pattern ((Robs2 l bv0 bv1))
     :pattern ((set19 bv0 bv1)))))
(declare-fun set20 (T8 T8) Bool)
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (set20 bv0 bv1) false) :pattern ((set20 bv0 bv1)))))
(assert (forall ((bv1 T8) (bv0 T8))
  (! (= (Rob3 l bv0 bv1) (set20 bv0 bv1))
     :pattern ((Rob3 l bv0 bv1))
     :pattern ((set20 bv0 bv1)))))
(declare-fun set21 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set21 bv0) false) :pattern ((set21 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rmem4 l bv0) (set21 bv0))
     :pattern ((Rmem4 l bv0))
     :pattern ((set21 bv0)))))
(declare-fun set22 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set22 bv0) false) :pattern ((set22 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rhd5 l bv0) (set22 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set22 bv0)))))
(declare-fun set23 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set23 bv0 bv1) false) :pattern ((set23 bv0 bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Roas6 v_15 bv0 bv1) (set23 bv0 bv1))
     :pattern ((Roas6 v_15 bv0 bv1))
     :pattern ((set23 bv0 bv1)))))
(declare-fun set24 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set24 bv0 bv1) false) :pattern ((set24 bv0 bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Roa7 v_15 bv0 bv1) (set24 bv0 bv1))
     :pattern ((Roa7 v_15 bv0 bv1))
     :pattern ((set24 bv0 bv1)))))
(declare-fun set25 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set25 bv0 bv1) false) :pattern ((set25 bv0 bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Robs8 v_15 bv0 bv1) (set25 bv0 bv1))
     :pattern ((Robs8 v_15 bv0 bv1))
     :pattern ((set25 bv0 bv1)))))
(declare-fun set26 (T7 T7) Bool)
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (set26 bv0 bv1) false) :pattern ((set26 bv0 bv1)))))
(assert (forall ((bv1 T7) (bv0 T7))
  (! (= (Rob9 v_15 bv0 bv1) (set26 bv0 bv1))
     :pattern ((Rob9 v_15 bv0 bv1))
     :pattern ((set26 bv0 bv1)))))
(declare-fun set27 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set27 bv0) false) :pattern ((set27 bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rmem10 v_15 bv0) (set27 bv0))
     :pattern ((Rmem10 v_15 bv0))
     :pattern ((set27 bv0)))))
(declare-fun set28 (T7) Bool)
(assert (forall ((bv0 T7)) (! (= (set28 bv0) false) :pattern ((set28 bv0)))))
(assert (forall ((bv0 T7))
  (! (= (Rhd11 v_15 bv0) (set28 bv0))
     :pattern ((Rhd11 v_15 bv0))
     :pattern ((set28 bv0)))))
(assert (not (forall ((bv0 T6))
       (! (= (Rmem12 v_15 bv0) (Rmem13 x_0 bv0))
          :pattern ((Rmem12 v_15 bv0))
          :pattern ((Rmem13 x_0 bv0))))))
(check-sat)

(declare-sort T9)
(declare-const v_15 T9)
(declare-sort T10)
(declare-const x_0 T10)
(declare-const anc_9 T10)
(declare-const l T10)
(declare-sort T11)
(declare-const x T11)
(declare-const xs T10)
(declare-const sv_4103 T10)
(declare-sort T12)
(declare-const anc_13 T12)
(declare-const anc_16 T9)
(declare-fun Rhd13 (T9 T12) Bool)
(declare-fun Rob12 (T9 T12 T12) Bool)
(declare-fun Robs11 (T9 T12 T12) Bool)
(declare-fun Roa10 (T9 T12 T12) Bool)
(declare-fun Rmem9 (T9 T12) Bool)
(declare-fun Roas8 (T9 T12 T12) Bool)
(declare-sort T13)
(declare-fun Rmem7 (T10 T13) Bool)
(declare-fun Rmem6 (T9 T13) Bool)
(declare-fun Rhd5 (T10 T11) Bool)
(declare-fun Rob4 (T10 T11 T11) Bool)
(declare-fun Robs3 (T10 T11 T11) Bool)
(declare-fun Roa2 (T10 T11 T11) Bool)
(declare-fun Rmem1 (T10 T11) Bool)
(declare-fun Roas0 (T10 T11 T11) Bool)
(declare-fun R1 (T11 T13) Bool)
(declare-fun R2 (T12 T13) Bool)
(declare-fun set29 (T12 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T12))
  (! (= (set29 bv0 bv1) (and (R2 bv0 bv1)))
     :pattern ((set29 bv0 bv1))
     :pattern ((R2 bv0 bv1)))))
(declare-fun set30 (T9 T12 T13) Bool)
(assert (forall ((bv2 T13) (bv1 T12) (bv0 T9))
  (! (= (set30 bv0 bv1 bv2) (and (Rmem9 bv0 bv1) (set29 bv1 bv2)))
     :pattern ((set30 bv0 bv1 bv2))
     :pattern ((Rmem9 bv0 bv1) (set29 bv1 bv2)))))
(assert (forall ((bv2 T13) (bv1 T12) (bv0 T9))
  (! (=> (set30 bv0 bv1 bv2) (Rmem6 bv0 bv2))
     :pattern ((set30 bv0 bv1 bv2) (Rmem6 bv0 bv2)))))
(assert (forall ((bv2 T13) (bv1 T9))
  (exists ((ev0 T12))
    (! (=> (Rmem6 bv1 bv2) (set30 bv1 ev0 bv2))
       :pattern ((Rmem6 bv1 bv2) (set30 bv1 ev0 bv2))))))
(declare-fun set31 (T11 T13) Bool)
(assert (forall ((bv1 T13) (bv0 T11))
  (! (= (set31 bv0 bv1) (and (R1 bv0 bv1)))
     :pattern ((set31 bv0 bv1))
     :pattern ((R1 bv0 bv1)))))
(declare-fun set32 (T10 T11 T13) Bool)
(assert (forall ((bv2 T13) (bv1 T11) (bv0 T10))
  (! (= (set32 bv0 bv1 bv2) (and (Rmem1 bv0 bv1) (set31 bv1 bv2)))
     :pattern ((set32 bv0 bv1 bv2))
     :pattern ((Rmem1 bv0 bv1) (set31 bv1 bv2)))))
(assert (forall ((bv2 T13) (bv1 T11) (bv0 T10))
  (! (=> (set32 bv0 bv1 bv2) (Rmem7 bv0 bv2))
     :pattern ((set32 bv0 bv1 bv2) (Rmem7 bv0 bv2)))))
(assert (forall ((bv2 T13) (bv1 T10))
  (exists ((ev0 T11))
    (! (=> (Rmem7 bv1 bv2) (set32 bv1 ev0 bv2))
       :pattern ((Rmem7 bv1 bv2) (set32 bv1 ev0 bv2))))))
(assert (= anc_9 x_0))
(assert (= l x_0))
(assert (= l anc_9))
(declare-fun set33 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set33 bv0) (and (= bv0 x))) :pattern ((set33 bv0)))))
(declare-fun set34 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set34 bv0 bv1) (and (Rmem1 xs bv0) (set33 bv1)))
     :pattern ((set34 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set33 bv1)))))
(declare-fun set35 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set35 bv0 bv1) (or (set34 bv0 bv1) (Roas0 xs bv0 bv1)))
     :pattern ((set35 bv0 bv1))
     :pattern ((set34 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Roas0 l bv0 bv1) (set35 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set35 bv0 bv1)))))
(declare-fun set36 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set36 bv0) (and (= bv0 x))) :pattern ((set36 bv0)))))
(declare-fun set37 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set37 bv0 bv1) (and (Rmem1 xs bv0) (set36 bv1)))
     :pattern ((set37 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set36 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Roa2 l bv0 bv1) (set37 bv0 bv1))
     :pattern ((Roa2 l bv0 bv1))
     :pattern ((set37 bv0 bv1)))))
(declare-fun set38 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set38 bv0) (and (= bv0 x))) :pattern ((set38 bv0)))))
(declare-fun set39 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set39 bv0 bv1) (and (set38 bv0) (Rmem1 xs bv1)))
     :pattern ((set39 bv0 bv1))
     :pattern ((set38 bv0) (Rmem1 xs bv1)))))
(declare-fun set40 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set40 bv0 bv1) (or (set39 bv0 bv1) (Robs3 xs bv0 bv1)))
     :pattern ((set40 bv0 bv1))
     :pattern ((set39 bv0 bv1))
     :pattern ((Robs3 xs bv0 bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Robs3 l bv0 bv1) (set40 bv0 bv1))
     :pattern ((Robs3 l bv0 bv1))
     :pattern ((set40 bv0 bv1)))))
(declare-fun set41 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set41 bv0) (and (= bv0 x))) :pattern ((set41 bv0)))))
(declare-fun set42 (T11 T11) Bool)
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (set42 bv0 bv1) (and (set41 bv0) (Rmem1 xs bv1)))
     :pattern ((set42 bv0 bv1))
     :pattern ((set41 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T11) (bv0 T11))
  (! (= (Rob4 l bv0 bv1) (set42 bv0 bv1))
     :pattern ((Rob4 l bv0 bv1))
     :pattern ((set42 bv0 bv1)))))
(declare-fun set43 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set43 bv0) (and (= bv0 x))) :pattern ((set43 bv0)))))
(declare-fun set44 (T11) Bool)
(assert (forall ((bv0 T11))
  (! (= (set44 bv0) (or (set43 bv0) (Rmem1 xs bv0)))
     :pattern ((set44 bv0))
     :pattern ((set43 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rmem1 l bv0) (set44 bv0))
     :pattern ((Rmem1 l bv0))
     :pattern ((set44 bv0)))))
(declare-fun set45 (T11) Bool)
(assert (forall ((bv0 T11)) (! (= (set45 bv0) (and (= bv0 x))) :pattern ((set45 bv0)))))
(assert (forall ((bv0 T11))
  (! (= (Rhd5 l bv0) (set45 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set45 bv0)))))
(assert (forall ((bv0 T13))
  (! (= (Rmem6 anc_16 bv0) (Rmem7 xs bv0))
     :pattern ((Rmem6 anc_16 bv0))
     :pattern ((Rmem7 xs bv0)))))
(assert (forall ((bv0 T13))
  (! (= (R2 anc_13 bv0) (R1 x bv0))
     :pattern ((R2 anc_13 bv0))
     :pattern ((R1 x bv0)))))
(declare-fun set46 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set46 bv0) (and (= bv0 anc_13))) :pattern ((set46 bv0)))))
(declare-fun set47 (T12 T12) Bool)
(assert (forall ((bv1 T12) (bv0 T12))
  (! (= (set47 bv0 bv1) (and (Rmem9 anc_16 bv0) (set46 bv1)))
     :pattern ((set47 bv0 bv1))
     :pattern ((Rmem9 anc_16 bv0) (set46 bv1)))))
(declare-fun set48 (T12 T12) Bool)
(assert (forall ((bv1 T12) (bv0 T12))
  (! (= (set48 bv0 bv1) (or (set47 bv0 bv1) (Roas8 anc_16 bv0 bv1)))
     :pattern ((set48 bv0 bv1))
     :pattern ((set47 bv0 bv1))
     :pattern ((Roas8 anc_16 bv0 bv1)))))
(assert (forall ((bv1 T12) (bv0 T12))
  (! (= (Roas8 v_15 bv0 bv1) (set48 bv0 bv1))
     :pattern ((Roas8 v_15 bv0 bv1))
     :pattern ((set48 bv0 bv1)))))
(declare-fun set49 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set49 bv0) (and (= bv0 anc_13))) :pattern ((set49 bv0)))))
(declare-fun set50 (T12 T12) Bool)
(assert (forall ((bv1 T12) (bv0 T12))
  (! (= (set50 bv0 bv1) (and (Rmem9 anc_16 bv0) (set49 bv1)))
     :pattern ((set50 bv0 bv1))
     :pattern ((Rmem9 anc_16 bv0) (set49 bv1)))))
(assert (forall ((bv1 T12) (bv0 T12))
  (! (= (Roa10 v_15 bv0 bv1) (set50 bv0 bv1))
     :pattern ((Roa10 v_15 bv0 bv1))
     :pattern ((set50 bv0 bv1)))))
(declare-fun set51 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set51 bv0) (and (= bv0 anc_13))) :pattern ((set51 bv0)))))
(declare-fun set52 (T12 T12) Bool)
(assert (forall ((bv1 T12) (bv0 T12))
  (! (= (set52 bv0 bv1) (and (set51 bv0) (Rmem9 anc_16 bv1)))
     :pattern ((set52 bv0 bv1))
     :pattern ((set51 bv0) (Rmem9 anc_16 bv1)))))
(declare-fun set53 (T12 T12) Bool)
(assert (forall ((bv1 T12) (bv0 T12))
  (! (= (set53 bv0 bv1) (or (set52 bv0 bv1) (Robs11 anc_16 bv0 bv1)))
     :pattern ((set53 bv0 bv1))
     :pattern ((set52 bv0 bv1))
     :pattern ((Robs11 anc_16 bv0 bv1)))))
(assert (forall ((bv1 T12) (bv0 T12))
  (! (= (Robs11 v_15 bv0 bv1) (set53 bv0 bv1))
     :pattern ((Robs11 v_15 bv0 bv1))
     :pattern ((set53 bv0 bv1)))))
(declare-fun set54 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set54 bv0) (and (= bv0 anc_13))) :pattern ((set54 bv0)))))
(declare-fun set55 (T12 T12) Bool)
(assert (forall ((bv1 T12) (bv0 T12))
  (! (= (set55 bv0 bv1) (and (set54 bv0) (Rmem9 anc_16 bv1)))
     :pattern ((set55 bv0 bv1))
     :pattern ((set54 bv0) (Rmem9 anc_16 bv1)))))
(assert (forall ((bv1 T12) (bv0 T12))
  (! (= (Rob12 v_15 bv0 bv1) (set55 bv0 bv1))
     :pattern ((Rob12 v_15 bv0 bv1))
     :pattern ((set55 bv0 bv1)))))
(declare-fun set56 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set56 bv0) (and (= bv0 anc_13))) :pattern ((set56 bv0)))))
(declare-fun set57 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set57 bv0) (or (set56 bv0) (Rmem9 anc_16 bv0)))
     :pattern ((set57 bv0))
     :pattern ((set56 bv0))
     :pattern ((Rmem9 anc_16 bv0)))))
(assert (forall ((bv0 T12))
  (! (= (Rmem9 v_15 bv0) (set57 bv0))
     :pattern ((Rmem9 v_15 bv0))
     :pattern ((set57 bv0)))))
(declare-fun set58 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set58 bv0) (and (= bv0 anc_13))) :pattern ((set58 bv0)))))
(assert (forall ((bv0 T12))
  (! (= (Rhd13 v_15 bv0) (set58 bv0))
     :pattern ((Rhd13 v_15 bv0))
     :pattern ((set58 bv0)))))
(assert (not (forall ((bv0 T13))
       (! (= (Rmem6 v_15 bv0) (Rmem7 x_0 bv0))
          :pattern ((Rmem6 v_15 bv0))
          :pattern ((Rmem7 x_0 bv0))))))
(check-sat)

(declare-sort T14)
(declare-const v T14)
(declare-const acc T14)
(declare-sort T15)
(declare-const y T15)
(declare-const anc_7 T14)
(declare-sort T16)
(declare-const sv_4112 T16)
(declare-const xs T16)
(declare-const x T15)
(declare-const b T14)
(declare-const l T16)
(declare-const anc_1 T14)
(declare-const anc_0 T16)
(declare-const x_3 T14)
(declare-const x_2 T16)
(declare-fun Rhd5 (T16 T15) Bool)
(declare-fun Rob4 (T16 T15 T15) Bool)
(declare-fun Robs3 (T16 T15 T15) Bool)
(declare-fun Roa2 (T16 T15 T15) Bool)
(declare-fun Rmem1 (T16 T15) Bool)
(declare-fun Roas0 (T16 T15 T15) Bool)
(declare-sort T17)
(declare-fun R (T15 T17) Bool)
(declare-fun qRm (T14 T17) Bool)
(declare-fun qRo (T14 T17 T17) Bool)
(declare-fun set59 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set59 bv0) (or (R x bv0) (qRm b bv0)))
     :pattern ((set59 bv0))
     :pattern ((R x bv0))
     :pattern ((qRm b bv0)))))
(assert (forall ((bv0 T17))
  (! (= (qRm anc_7 bv0) (set59 bv0))
     :pattern ((qRm anc_7 bv0))
     :pattern ((set59 bv0)))))
(declare-fun set60 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set60 bv0 bv1) (and (R x bv0) (qRm b bv1)))
     :pattern ((set60 bv0 bv1))
     :pattern ((R x bv0) (qRm b bv1)))))
(declare-fun set61 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set61 bv0 bv1) (or (set60 bv0 bv1) (qRo b bv0 bv1)))
     :pattern ((set61 bv0 bv1))
     :pattern ((set60 bv0 bv1))
     :pattern ((qRo b bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (qRo anc_7 bv0 bv1) (set61 bv0 bv1))
     :pattern ((qRo anc_7 bv0 bv1))
     :pattern ((set61 bv0 bv1)))))
(declare-fun set62 (T15) Bool)
(assert (forall ((bv0 T15)) (! (= (set62 bv0) (and (= bv0 x))) :pattern ((set62 bv0)))))
(declare-fun set63 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set63 bv0 bv1) (and (Rmem1 xs bv0) (set62 bv1)))
     :pattern ((set63 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set62 bv1)))))
(declare-fun set64 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set64 bv0 bv1) (or (set63 bv0 bv1) (Roas0 xs bv0 bv1)))
     :pattern ((set64 bv0 bv1))
     :pattern ((set63 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Roas0 l bv0 bv1) (set64 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set64 bv0 bv1)))))
(declare-fun set65 (T15) Bool)
(assert (forall ((bv0 T15)) (! (= (set65 bv0) (and (= bv0 x))) :pattern ((set65 bv0)))))
(declare-fun set66 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set66 bv0 bv1) (and (Rmem1 xs bv0) (set65 bv1)))
     :pattern ((set66 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set65 bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Roa2 l bv0 bv1) (set66 bv0 bv1))
     :pattern ((Roa2 l bv0 bv1))
     :pattern ((set66 bv0 bv1)))))
(declare-fun set67 (T15) Bool)
(assert (forall ((bv0 T15)) (! (= (set67 bv0) (and (= bv0 x))) :pattern ((set67 bv0)))))
(declare-fun set68 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set68 bv0 bv1) (and (set67 bv0) (Rmem1 xs bv1)))
     :pattern ((set68 bv0 bv1))
     :pattern ((set67 bv0) (Rmem1 xs bv1)))))
(declare-fun set69 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set69 bv0 bv1) (or (set68 bv0 bv1) (Robs3 xs bv0 bv1)))
     :pattern ((set69 bv0 bv1))
     :pattern ((set68 bv0 bv1))
     :pattern ((Robs3 xs bv0 bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Robs3 l bv0 bv1) (set69 bv0 bv1))
     :pattern ((Robs3 l bv0 bv1))
     :pattern ((set69 bv0 bv1)))))
(declare-fun set70 (T15) Bool)
(assert (forall ((bv0 T15)) (! (= (set70 bv0) (and (= bv0 x))) :pattern ((set70 bv0)))))
(declare-fun set71 (T15 T15) Bool)
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (set71 bv0 bv1) (and (set70 bv0) (Rmem1 xs bv1)))
     :pattern ((set71 bv0 bv1))
     :pattern ((set70 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T15) (bv0 T15))
  (! (= (Rob4 l bv0 bv1) (set71 bv0 bv1))
     :pattern ((Rob4 l bv0 bv1))
     :pattern ((set71 bv0 bv1)))))
(declare-fun set72 (T15) Bool)
(assert (forall ((bv0 T15)) (! (= (set72 bv0) (and (= bv0 x))) :pattern ((set72 bv0)))))
(declare-fun set73 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set73 bv0) (or (set72 bv0) (Rmem1 xs bv0)))
     :pattern ((set73 bv0))
     :pattern ((set72 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T15))
  (! (= (Rmem1 l bv0) (set73 bv0))
     :pattern ((Rmem1 l bv0))
     :pattern ((set73 bv0)))))
(declare-fun set74 (T15) Bool)
(assert (forall ((bv0 T15)) (! (= (set74 bv0) (and (= bv0 x))) :pattern ((set74 bv0)))))
(assert (forall ((bv0 T15))
  (! (= (Rhd5 l bv0) (set74 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set74 bv0)))))
(assert (= b x_3))
(assert (= b anc_1))
(assert (= l x_2))
(assert (= l anc_0))
(assert (= anc_1 x_3))
(assert (= anc_0 x_2))
(declare-fun set75 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set75 bv0) (or (R y bv0) (qRm acc bv0)))
     :pattern ((set75 bv0))
     :pattern ((R y bv0))
     :pattern ((qRm acc bv0)))))
(assert (forall ((bv0 T17))
  (! (= (qRm v bv0) (set75 bv0)) :pattern ((qRm v bv0)) :pattern ((set75 bv0)))))
(declare-fun set76 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set76 bv0 bv1) (and (R y bv0) (qRm acc bv1)))
     :pattern ((set76 bv0 bv1))
     :pattern ((R y bv0) (qRm acc bv1)))))
(declare-fun set77 (T17 T17) Bool)
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (set77 bv0 bv1) (or (set76 bv0 bv1) (qRo acc bv0 bv1)))
     :pattern ((set77 bv0 bv1))
     :pattern ((set76 bv0 bv1))
     :pattern ((qRo acc bv0 bv1)))))
(assert (forall ((bv1 T17) (bv0 T17))
  (! (= (qRo v bv0 bv1) (set77 bv0 bv1))
     :pattern ((qRo v bv0 bv1))
     :pattern ((set77 bv0 bv1)))))
(declare-fun set78 (T17) Bool)
(assert (forall ((bv0 T17))
  (! (= (set78 bv0) (or (R y bv0) (qRm acc bv0)))
     :pattern ((set78 bv0))
     :pattern ((R y bv0))
     :pattern ((qRm acc bv0)))))
(assert (not (forall ((bv0 T17))
       (! (= (qRm v bv0) (set78 bv0))
          :pattern ((qRm v bv0))
          :pattern ((set78 bv0))))))
(check-sat)

(declare-sort T18)
(declare-const v T18)
(declare-const acc T18)
(declare-sort T19)
(declare-const y T19)
(declare-const anc_7 T18)
(declare-sort T20)
(declare-const sv_4112 T20)
(declare-const xs T20)
(declare-const x T19)
(declare-const b T18)
(declare-const l T20)
(declare-const anc_1 T18)
(declare-const anc_0 T20)
(declare-const x_3 T18)
(declare-const x_2 T20)
(declare-fun Rhd5 (T20 T19) Bool)
(declare-fun Rob4 (T20 T19 T19) Bool)
(declare-fun Robs3 (T20 T19 T19) Bool)
(declare-fun Roa2 (T20 T19 T19) Bool)
(declare-fun Rmem1 (T20 T19) Bool)
(declare-fun Roas0 (T20 T19 T19) Bool)
(declare-sort T21)
(declare-fun R (T19 T21) Bool)
(declare-fun qRm (T18 T21) Bool)
(declare-fun qRo (T18 T21 T21) Bool)
(declare-fun set79 (T21) Bool)
(assert (forall ((bv0 T21))
  (! (= (set79 bv0) (or (R x bv0) (qRm b bv0)))
     :pattern ((set79 bv0))
     :pattern ((R x bv0))
     :pattern ((qRm b bv0)))))
(assert (forall ((bv0 T21))
  (! (= (qRm anc_7 bv0) (set79 bv0))
     :pattern ((qRm anc_7 bv0))
     :pattern ((set79 bv0)))))
(declare-fun set80 (T21 T21) Bool)
(assert (forall ((bv1 T21) (bv0 T21))
  (! (= (set80 bv0 bv1) (and (R x bv0) (qRm b bv1)))
     :pattern ((set80 bv0 bv1))
     :pattern ((R x bv0) (qRm b bv1)))))
(declare-fun set81 (T21 T21) Bool)
(assert (forall ((bv1 T21) (bv0 T21))
  (! (= (set81 bv0 bv1) (or (set80 bv0 bv1) (qRo b bv0 bv1)))
     :pattern ((set81 bv0 bv1))
     :pattern ((set80 bv0 bv1))
     :pattern ((qRo b bv0 bv1)))))
(assert (forall ((bv1 T21) (bv0 T21))
  (! (= (qRo anc_7 bv0 bv1) (set81 bv0 bv1))
     :pattern ((qRo anc_7 bv0 bv1))
     :pattern ((set81 bv0 bv1)))))
(declare-fun set82 (T19) Bool)
(assert (forall ((bv0 T19)) (! (= (set82 bv0) (and (= bv0 x))) :pattern ((set82 bv0)))))
(declare-fun set83 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set83 bv0 bv1) (and (Rmem1 xs bv0) (set82 bv1)))
     :pattern ((set83 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set82 bv1)))))
(declare-fun set84 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set84 bv0 bv1) (or (set83 bv0 bv1) (Roas0 xs bv0 bv1)))
     :pattern ((set84 bv0 bv1))
     :pattern ((set83 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Roas0 l bv0 bv1) (set84 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set84 bv0 bv1)))))
(declare-fun set85 (T19) Bool)
(assert (forall ((bv0 T19)) (! (= (set85 bv0) (and (= bv0 x))) :pattern ((set85 bv0)))))
(declare-fun set86 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set86 bv0 bv1) (and (Rmem1 xs bv0) (set85 bv1)))
     :pattern ((set86 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set85 bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Roa2 l bv0 bv1) (set86 bv0 bv1))
     :pattern ((Roa2 l bv0 bv1))
     :pattern ((set86 bv0 bv1)))))
(declare-fun set87 (T19) Bool)
(assert (forall ((bv0 T19)) (! (= (set87 bv0) (and (= bv0 x))) :pattern ((set87 bv0)))))
(declare-fun set88 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set88 bv0 bv1) (and (set87 bv0) (Rmem1 xs bv1)))
     :pattern ((set88 bv0 bv1))
     :pattern ((set87 bv0) (Rmem1 xs bv1)))))
(declare-fun set89 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set89 bv0 bv1) (or (set88 bv0 bv1) (Robs3 xs bv0 bv1)))
     :pattern ((set89 bv0 bv1))
     :pattern ((set88 bv0 bv1))
     :pattern ((Robs3 xs bv0 bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Robs3 l bv0 bv1) (set89 bv0 bv1))
     :pattern ((Robs3 l bv0 bv1))
     :pattern ((set89 bv0 bv1)))))
(declare-fun set90 (T19) Bool)
(assert (forall ((bv0 T19)) (! (= (set90 bv0) (and (= bv0 x))) :pattern ((set90 bv0)))))
(declare-fun set91 (T19 T19) Bool)
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (set91 bv0 bv1) (and (set90 bv0) (Rmem1 xs bv1)))
     :pattern ((set91 bv0 bv1))
     :pattern ((set90 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T19) (bv0 T19))
  (! (= (Rob4 l bv0 bv1) (set91 bv0 bv1))
     :pattern ((Rob4 l bv0 bv1))
     :pattern ((set91 bv0 bv1)))))
(declare-fun set92 (T19) Bool)
(assert (forall ((bv0 T19)) (! (= (set92 bv0) (and (= bv0 x))) :pattern ((set92 bv0)))))
(declare-fun set93 (T19) Bool)
(assert (forall ((bv0 T19))
  (! (= (set93 bv0) (or (set92 bv0) (Rmem1 xs bv0)))
     :pattern ((set93 bv0))
     :pattern ((set92 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T19))
  (! (= (Rmem1 l bv0) (set93 bv0))
     :pattern ((Rmem1 l bv0))
     :pattern ((set93 bv0)))))
(declare-fun set94 (T19) Bool)
(assert (forall ((bv0 T19)) (! (= (set94 bv0) (and (= bv0 x))) :pattern ((set94 bv0)))))
(assert (forall ((bv0 T19))
  (! (= (Rhd5 l bv0) (set94 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set94 bv0)))))
(assert (= b x_3))
(assert (= b anc_1))
(assert (= l x_2))
(assert (= l anc_0))
(assert (= anc_1 x_3))
(assert (= anc_0 x_2))
(declare-fun set95 (T21) Bool)
(assert (forall ((bv0 T21))
  (! (= (set95 bv0) (or (R y bv0) (qRm acc bv0)))
     :pattern ((set95 bv0))
     :pattern ((R y bv0))
     :pattern ((qRm acc bv0)))))
(assert (forall ((bv0 T21))
  (! (= (qRm v bv0) (set95 bv0)) :pattern ((qRm v bv0)) :pattern ((set95 bv0)))))
(declare-fun set96 (T21 T21) Bool)
(assert (forall ((bv1 T21) (bv0 T21))
  (! (= (set96 bv0 bv1) (and (R y bv0) (qRm acc bv1)))
     :pattern ((set96 bv0 bv1))
     :pattern ((R y bv0) (qRm acc bv1)))))
(declare-fun set97 (T21 T21) Bool)
(assert (forall ((bv1 T21) (bv0 T21))
  (! (= (set97 bv0 bv1) (or (set96 bv0 bv1) (qRo acc bv0 bv1)))
     :pattern ((set97 bv0 bv1))
     :pattern ((set96 bv0 bv1))
     :pattern ((qRo acc bv0 bv1)))))
(assert (forall ((bv1 T21) (bv0 T21))
  (! (= (qRo v bv0 bv1) (set97 bv0 bv1))
     :pattern ((qRo v bv0 bv1))
     :pattern ((set97 bv0 bv1)))))
(declare-fun set98 (T21 T21) Bool)
(assert (forall ((bv1 T21) (bv0 T21))
  (! (= (set98 bv0 bv1) (and (R y bv0) (qRm acc bv1)))
     :pattern ((set98 bv0 bv1))
     :pattern ((R y bv0) (qRm acc bv1)))))
(declare-fun set99 (T21 T21) Bool)
(assert (forall ((bv1 T21) (bv0 T21))
  (! (= (set99 bv0 bv1) (or (set98 bv0 bv1) (qRo acc bv0 bv1)))
     :pattern ((set99 bv0 bv1))
     :pattern ((set98 bv0 bv1))
     :pattern ((qRo acc bv0 bv1)))))
(assert (not (forall ((bv1 T21) (bv0 T21))
       (! (= (qRo v bv0 bv1) (set99 bv0 bv1))
          :pattern ((qRo v bv0 bv1))
          :pattern ((set99 bv0 bv1))))))
(check-sat)

(declare-sort T22)
(declare-const v T22)
(declare-const x_3 T22)
(declare-sort T23)
(declare-const x_2 T23)
(declare-const anc_0 T23)
(declare-const anc_1 T22)
(declare-const l T23)
(declare-const b T22)
(declare-const sv_4109 T23)
(declare-sort T24)
(declare-fun Rmem6 (T23 T24) Bool)
(declare-sort T25)
(declare-fun Rhd5 (T23 T25) Bool)
(declare-fun Rmem4 (T23 T25) Bool)
(declare-fun Rob3 (T23 T25 T25) Bool)
(declare-fun Robs2 (T23 T25 T25) Bool)
(declare-fun Roa1 (T23 T25 T25) Bool)
(declare-fun Roas0 (T23 T25 T25) Bool)
(declare-fun R (T25 T24) Bool)
(declare-fun qRm (T22 T24) Bool)
(declare-fun qRo (T22 T24 T24) Bool)
(declare-fun set100 (T25 T24) Bool)
(assert (forall ((bv1 T24) (bv0 T25))
  (! (= (set100 bv0 bv1) (and (R bv0 bv1)))
     :pattern ((set100 bv0 bv1))
     :pattern ((R bv0 bv1)))))
(declare-fun set101 (T23 T25 T24) Bool)
(assert (forall ((bv2 T24) (bv1 T25) (bv0 T23))
  (! (= (set101 bv0 bv1 bv2) (and (Rmem4 bv0 bv1) (set100 bv1 bv2)))
     :pattern ((set101 bv0 bv1 bv2))
     :pattern ((Rmem4 bv0 bv1) (set100 bv1 bv2)))))
(assert (forall ((bv2 T24) (bv1 T25) (bv0 T23))
  (! (=> (set101 bv0 bv1 bv2) (Rmem6 bv0 bv2))
     :pattern ((set101 bv0 bv1 bv2) (Rmem6 bv0 bv2)))))
(assert (forall ((bv2 T24) (bv1 T23))
  (exists ((ev0 T25))
    (! (=> (Rmem6 bv1 bv2) (set101 bv1 ev0 bv2))
       :pattern ((Rmem6 bv1 bv2) (set101 bv1 ev0 bv2))))))
(assert (= anc_1 x_3))
(assert (= anc_0 x_2))
(assert (= b x_3))
(assert (= b anc_1))
(assert (= l x_2))
(assert (= l anc_0))
(declare-fun set102 (T25 T25) Bool)
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (set102 bv0 bv1) false) :pattern ((set102 bv0 bv1)))))
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (Roas0 l bv0 bv1) (set102 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set102 bv0 bv1)))))
(declare-fun set103 (T25 T25) Bool)
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (set103 bv0 bv1) false) :pattern ((set103 bv0 bv1)))))
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (Roa1 l bv0 bv1) (set103 bv0 bv1))
     :pattern ((Roa1 l bv0 bv1))
     :pattern ((set103 bv0 bv1)))))
(declare-fun set104 (T25 T25) Bool)
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (set104 bv0 bv1) false) :pattern ((set104 bv0 bv1)))))
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (Robs2 l bv0 bv1) (set104 bv0 bv1))
     :pattern ((Robs2 l bv0 bv1))
     :pattern ((set104 bv0 bv1)))))
(declare-fun set105 (T25 T25) Bool)
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (set105 bv0 bv1) false) :pattern ((set105 bv0 bv1)))))
(assert (forall ((bv1 T25) (bv0 T25))
  (! (= (Rob3 l bv0 bv1) (set105 bv0 bv1))
     :pattern ((Rob3 l bv0 bv1))
     :pattern ((set105 bv0 bv1)))))
(declare-fun set106 (T25) Bool)
(assert (forall ((bv0 T25)) (! (= (set106 bv0) false) :pattern ((set106 bv0)))))
(assert (forall ((bv0 T25))
  (! (= (Rmem4 l bv0) (set106 bv0))
     :pattern ((Rmem4 l bv0))
     :pattern ((set106 bv0)))))
(declare-fun set107 (T25) Bool)
(assert (forall ((bv0 T25)) (! (= (set107 bv0) false) :pattern ((set107 bv0)))))
(assert (forall ((bv0 T25))
  (! (= (Rhd5 l bv0) (set107 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set107 bv0)))))
(assert (= v x_3))
(assert (= v anc_1))
(assert (= v b))
(declare-fun set108 (T24) Bool)
(assert (forall ((bv0 T24))
  (! (= (set108 bv0) (or (Rmem6 x_2 bv0) (qRm x_3 bv0)))
     :pattern ((set108 bv0))
     :pattern ((Rmem6 x_2 bv0))
     :pattern ((qRm x_3 bv0)))))
(assert (not (forall ((bv0 T24))
       (! (= (qRm v bv0) (set108 bv0))
          :pattern ((qRm v bv0))
          :pattern ((set108 bv0))))))
(check-sat)

(declare-sort T26)
(declare-const v T26)
(declare-const x_3 T26)
(declare-sort T27)
(declare-const x_2 T27)
(declare-const anc_0 T27)
(declare-const anc_1 T26)
(declare-const l T27)
(declare-const b T26)
(declare-const sv_4109 T27)
(declare-sort T28)
(declare-fun Rmem7 (T27 T28) Bool)
(declare-fun Roas6 (T27 T28 T28) Bool)
(declare-sort T29)
(declare-fun Rhd5 (T27 T29) Bool)
(declare-fun Rmem4 (T27 T29) Bool)
(declare-fun Rob3 (T27 T29 T29) Bool)
(declare-fun Robs2 (T27 T29 T29) Bool)
(declare-fun Roa1 (T27 T29 T29) Bool)
(declare-fun Roas0 (T27 T29 T29) Bool)
(declare-fun R (T29 T28) Bool)
(declare-fun qRm (T26 T28) Bool)
(declare-fun qRo (T26 T28 T28) Bool)
(declare-fun set109 (T29 T29 T28 T28) Bool)
(assert (forall ((bv3 T28) (bv2 T28) (bv1 T29) (bv0 T29))
  (! (= (set109 bv0 bv1 bv2 bv3) (and (R bv0 bv2) (R bv1 bv3)))
     :pattern ((set109 bv0 bv1 bv2 bv3))
     :pattern ((R bv0 bv2) (R bv1 bv3)))))
(declare-fun set110 (T27 T29 T29 T28 T28) Bool)
(assert (forall ((bv4 T28) (bv3 T28) (bv2 T29) (bv1 T29) (bv0 T27))
  (! (= (set110 bv0 bv1 bv2 bv3 bv4)
        (and (Roas0 bv0 bv1 bv2) (set109 bv1 bv2 bv3 bv4)))
     :pattern ((set110 bv0 bv1 bv2 bv3 bv4))
     :pattern ((Roas0 bv0 bv1 bv2) (set109 bv1 bv2 bv3 bv4)))))
(assert (forall ((bv4 T28) (bv3 T28) (bv2 T29) (bv1 T29) (bv0 T27))
  (! (=> (set110 bv0 bv1 bv2 bv3 bv4) (Roas6 bv0 bv3 bv4))
     :pattern ((set110 bv0 bv1 bv2 bv3 bv4) (Roas6 bv0 bv3 bv4)))))
(assert (forall ((bv4 T28) (bv3 T28) (bv2 T27))
  (exists ((ev1 T29) (ev0 T29))
    (! (=> (Roas6 bv2 bv3 bv4) (set110 bv2 ev0 ev1 bv3 bv4))
       :pattern ((Roas6 bv2 bv3 bv4) (set110 bv2 ev0 ev1 bv3 bv4))))))
(declare-fun set111 (T29 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T29))
  (! (= (set111 bv0 bv1) (and (R bv0 bv1)))
     :pattern ((set111 bv0 bv1))
     :pattern ((R bv0 bv1)))))
(declare-fun set112 (T27 T29 T28) Bool)
(assert (forall ((bv2 T28) (bv1 T29) (bv0 T27))
  (! (= (set112 bv0 bv1 bv2) (and (Rmem4 bv0 bv1) (set111 bv1 bv2)))
     :pattern ((set112 bv0 bv1 bv2))
     :pattern ((Rmem4 bv0 bv1) (set111 bv1 bv2)))))
(assert (forall ((bv2 T28) (bv1 T29) (bv0 T27))
  (! (=> (set112 bv0 bv1 bv2) (Rmem7 bv0 bv2))
     :pattern ((set112 bv0 bv1 bv2) (Rmem7 bv0 bv2)))))
(assert (forall ((bv2 T28) (bv1 T27))
  (exists ((ev0 T29))
    (! (=> (Rmem7 bv1 bv2) (set112 bv1 ev0 bv2))
       :pattern ((Rmem7 bv1 bv2) (set112 bv1 ev0 bv2))))))
(assert (= anc_1 x_3))
(assert (= anc_0 x_2))
(assert (= b x_3))
(assert (= b anc_1))
(assert (= l x_2))
(assert (= l anc_0))
(declare-fun set113 (T29 T29) Bool)
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (set113 bv0 bv1) false) :pattern ((set113 bv0 bv1)))))
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (Roas0 l bv0 bv1) (set113 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set113 bv0 bv1)))))
(declare-fun set114 (T29 T29) Bool)
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (set114 bv0 bv1) false) :pattern ((set114 bv0 bv1)))))
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (Roa1 l bv0 bv1) (set114 bv0 bv1))
     :pattern ((Roa1 l bv0 bv1))
     :pattern ((set114 bv0 bv1)))))
(declare-fun set115 (T29 T29) Bool)
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (set115 bv0 bv1) false) :pattern ((set115 bv0 bv1)))))
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (Robs2 l bv0 bv1) (set115 bv0 bv1))
     :pattern ((Robs2 l bv0 bv1))
     :pattern ((set115 bv0 bv1)))))
(declare-fun set116 (T29 T29) Bool)
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (set116 bv0 bv1) false) :pattern ((set116 bv0 bv1)))))
(assert (forall ((bv1 T29) (bv0 T29))
  (! (= (Rob3 l bv0 bv1) (set116 bv0 bv1))
     :pattern ((Rob3 l bv0 bv1))
     :pattern ((set116 bv0 bv1)))))
(declare-fun set117 (T29) Bool)
(assert (forall ((bv0 T29)) (! (= (set117 bv0) false) :pattern ((set117 bv0)))))
(assert (forall ((bv0 T29))
  (! (= (Rmem4 l bv0) (set117 bv0))
     :pattern ((Rmem4 l bv0))
     :pattern ((set117 bv0)))))
(declare-fun set118 (T29) Bool)
(assert (forall ((bv0 T29)) (! (= (set118 bv0) false) :pattern ((set118 bv0)))))
(assert (forall ((bv0 T29))
  (! (= (Rhd5 l bv0) (set118 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set118 bv0)))))
(assert (= v x_3))
(assert (= v anc_1))
(assert (= v b))
(declare-fun set119 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set119 bv0 bv1) (and (Rmem7 x_2 bv0) (qRm x_3 bv1)))
     :pattern ((set119 bv0 bv1))
     :pattern ((Rmem7 x_2 bv0) (qRm x_3 bv1)))))
(declare-fun set120 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set120 bv0 bv1) (or (qRo x_3 bv0 bv1) (set119 bv0 bv1)))
     :pattern ((set120 bv0 bv1))
     :pattern ((qRo x_3 bv0 bv1))
     :pattern ((set119 bv0 bv1)))))
(declare-fun set121 (T28 T28) Bool)
(assert (forall ((bv1 T28) (bv0 T28))
  (! (= (set121 bv0 bv1) (or (Roas6 x_2 bv0 bv1) (set120 bv0 bv1)))
     :pattern ((set121 bv0 bv1))
     :pattern ((Roas6 x_2 bv0 bv1))
     :pattern ((set120 bv0 bv1)))))
(assert (not (forall ((bv1 T28) (bv0 T28))
       (! (= (qRo v bv0 bv1) (set121 bv0 bv1))
          :pattern ((qRo v bv0 bv1))
          :pattern ((set121 bv0 bv1))))))
(check-sat)

(declare-sort T30)
(declare-const v T30)
(declare-const x_3 T30)
(declare-sort T31)
(declare-const x_2 T31)
(declare-const anc_0 T31)
(declare-const anc_1 T30)
(declare-const l T31)
(declare-const b T30)
(declare-sort T32)
(declare-const x T32)
(declare-const xs T31)
(declare-const sv_4112 T31)
(declare-const anc_7 T30)
(declare-sort T33)
(declare-fun Roas7 (T31 T33 T33) Bool)
(declare-fun Rmem6 (T31 T33) Bool)
(declare-fun Rhd5 (T31 T32) Bool)
(declare-fun Rob4 (T31 T32 T32) Bool)
(declare-fun Robs3 (T31 T32 T32) Bool)
(declare-fun Roa2 (T31 T32 T32) Bool)
(declare-fun Rmem1 (T31 T32) Bool)
(declare-fun Roas0 (T31 T32 T32) Bool)
(declare-fun R (T32 T33) Bool)
(declare-fun qRm (T30 T33) Bool)
(declare-fun qRo (T30 T33 T33) Bool)
(declare-fun set122 (T32 T33) Bool)
(assert (forall ((bv1 T33) (bv0 T32))
  (! (= (set122 bv0 bv1) (and (R bv0 bv1)))
     :pattern ((set122 bv0 bv1))
     :pattern ((R bv0 bv1)))))
(declare-fun set123 (T31 T32 T33) Bool)
(assert (forall ((bv2 T33) (bv1 T32) (bv0 T31))
  (! (= (set123 bv0 bv1 bv2) (and (Rmem1 bv0 bv1) (set122 bv1 bv2)))
     :pattern ((set123 bv0 bv1 bv2))
     :pattern ((Rmem1 bv0 bv1) (set122 bv1 bv2)))))
(assert (forall ((bv2 T33) (bv1 T32) (bv0 T31))
  (! (=> (set123 bv0 bv1 bv2) (Rmem6 bv0 bv2))
     :pattern ((set123 bv0 bv1 bv2) (Rmem6 bv0 bv2)))))
(assert (forall ((bv2 T33) (bv1 T31))
  (exists ((ev0 T32))
    (! (=> (Rmem6 bv1 bv2) (set123 bv1 ev0 bv2))
       :pattern ((Rmem6 bv1 bv2) (set123 bv1 ev0 bv2))))))
(declare-fun set124 (T32 T32 T33 T33) Bool)
(assert (forall ((bv3 T33) (bv2 T33) (bv1 T32) (bv0 T32))
  (! (= (set124 bv0 bv1 bv2 bv3) (and (R bv0 bv2) (R bv1 bv3)))
     :pattern ((set124 bv0 bv1 bv2 bv3))
     :pattern ((R bv0 bv2) (R bv1 bv3)))))
(declare-fun set125 (T31 T32 T32 T33 T33) Bool)
(assert (forall ((bv4 T33) (bv3 T33) (bv2 T32) (bv1 T32) (bv0 T31))
  (! (= (set125 bv0 bv1 bv2 bv3 bv4)
        (and (Roas0 bv0 bv1 bv2) (set124 bv1 bv2 bv3 bv4)))
     :pattern ((set125 bv0 bv1 bv2 bv3 bv4))
     :pattern ((Roas0 bv0 bv1 bv2) (set124 bv1 bv2 bv3 bv4)))))
(assert (forall ((bv4 T33) (bv3 T33) (bv2 T32) (bv1 T32) (bv0 T31))
  (! (=> (set125 bv0 bv1 bv2 bv3 bv4) (Roas7 bv0 bv3 bv4))
     :pattern ((set125 bv0 bv1 bv2 bv3 bv4) (Roas7 bv0 bv3 bv4)))))
(assert (forall ((bv4 T33) (bv3 T33) (bv2 T31))
  (exists ((ev1 T32) (ev0 T32))
    (! (=> (Roas7 bv2 bv3 bv4) (set125 bv2 ev0 ev1 bv3 bv4))
       :pattern ((Roas7 bv2 bv3 bv4) (set125 bv2 ev0 ev1 bv3 bv4))))))
(assert (= anc_1 x_3))
(assert (= anc_0 x_2))
(assert (= b x_3))
(assert (= b anc_1))
(assert (= l x_2))
(assert (= l anc_0))
(declare-fun set126 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set126 bv0) (and (= bv0 x))) :pattern ((set126 bv0)))))
(declare-fun set127 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set127 bv0 bv1) (and (Rmem1 xs bv0) (set126 bv1)))
     :pattern ((set127 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set126 bv1)))))
(declare-fun set128 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set128 bv0 bv1) (or (set127 bv0 bv1) (Roas0 xs bv0 bv1)))
     :pattern ((set128 bv0 bv1))
     :pattern ((set127 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (Roas0 l bv0 bv1) (set128 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set128 bv0 bv1)))))
(declare-fun set129 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set129 bv0) (and (= bv0 x))) :pattern ((set129 bv0)))))
(declare-fun set130 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set130 bv0 bv1) (and (Rmem1 xs bv0) (set129 bv1)))
     :pattern ((set130 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set129 bv1)))))
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (Roa2 l bv0 bv1) (set130 bv0 bv1))
     :pattern ((Roa2 l bv0 bv1))
     :pattern ((set130 bv0 bv1)))))
(declare-fun set131 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set131 bv0) (and (= bv0 x))) :pattern ((set131 bv0)))))
(declare-fun set132 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set132 bv0 bv1) (and (set131 bv0) (Rmem1 xs bv1)))
     :pattern ((set132 bv0 bv1))
     :pattern ((set131 bv0) (Rmem1 xs bv1)))))
(declare-fun set133 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set133 bv0 bv1) (or (set132 bv0 bv1) (Robs3 xs bv0 bv1)))
     :pattern ((set133 bv0 bv1))
     :pattern ((set132 bv0 bv1))
     :pattern ((Robs3 xs bv0 bv1)))))
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (Robs3 l bv0 bv1) (set133 bv0 bv1))
     :pattern ((Robs3 l bv0 bv1))
     :pattern ((set133 bv0 bv1)))))
(declare-fun set134 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set134 bv0) (and (= bv0 x))) :pattern ((set134 bv0)))))
(declare-fun set135 (T32 T32) Bool)
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (set135 bv0 bv1) (and (set134 bv0) (Rmem1 xs bv1)))
     :pattern ((set135 bv0 bv1))
     :pattern ((set134 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T32) (bv0 T32))
  (! (= (Rob4 l bv0 bv1) (set135 bv0 bv1))
     :pattern ((Rob4 l bv0 bv1))
     :pattern ((set135 bv0 bv1)))))
(declare-fun set136 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set136 bv0) (and (= bv0 x))) :pattern ((set136 bv0)))))
(declare-fun set137 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set137 bv0) (or (set136 bv0) (Rmem1 xs bv0)))
     :pattern ((set137 bv0))
     :pattern ((set136 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T32))
  (! (= (Rmem1 l bv0) (set137 bv0))
     :pattern ((Rmem1 l bv0))
     :pattern ((set137 bv0)))))
(declare-fun set138 (T32) Bool)
(assert (forall ((bv0 T32))
  (! (= (set138 bv0) (and (= bv0 x))) :pattern ((set138 bv0)))))
(assert (forall ((bv0 T32))
  (! (= (Rhd5 l bv0) (set138 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set138 bv0)))))
(declare-fun set139 (T33) Bool)
(assert (forall ((bv0 T33))
  (! (= (set139 bv0) (or (R x bv0) (qRm b bv0)))
     :pattern ((set139 bv0))
     :pattern ((R x bv0))
     :pattern ((qRm b bv0)))))
(assert (forall ((bv0 T33))
  (! (= (qRm anc_7 bv0) (set139 bv0))
     :pattern ((qRm anc_7 bv0))
     :pattern ((set139 bv0)))))
(declare-fun set140 (T33 T33) Bool)
(assert (forall ((bv1 T33) (bv0 T33))
  (! (= (set140 bv0 bv1) (and (R x bv0) (qRm b bv1)))
     :pattern ((set140 bv0 bv1))
     :pattern ((R x bv0) (qRm b bv1)))))
(declare-fun set141 (T33 T33) Bool)
(assert (forall ((bv1 T33) (bv0 T33))
  (! (= (set141 bv0 bv1) (or (set140 bv0 bv1) (qRo b bv0 bv1)))
     :pattern ((set141 bv0 bv1))
     :pattern ((set140 bv0 bv1))
     :pattern ((qRo b bv0 bv1)))))
(assert (forall ((bv1 T33) (bv0 T33))
  (! (= (qRo anc_7 bv0 bv1) (set141 bv0 bv1))
     :pattern ((qRo anc_7 bv0 bv1))
     :pattern ((set141 bv0 bv1)))))
(declare-fun set142 (T33) Bool)
(assert (forall ((bv0 T33))
  (! (= (set142 bv0) (or (Rmem6 xs bv0) (qRm anc_7 bv0)))
     :pattern ((set142 bv0))
     :pattern ((Rmem6 xs bv0))
     :pattern ((qRm anc_7 bv0)))))
(assert (forall ((bv0 T33))
  (! (= (qRm v bv0) (set142 bv0))
     :pattern ((qRm v bv0))
     :pattern ((set142 bv0)))))
(declare-fun set143 (T33 T33) Bool)
(assert (forall ((bv1 T33) (bv0 T33))
  (! (= (set143 bv0 bv1) (and (Rmem6 xs bv0) (qRm anc_7 bv1)))
     :pattern ((set143 bv0 bv1))
     :pattern ((Rmem6 xs bv0) (qRm anc_7 bv1)))))
(declare-fun set144 (T33 T33) Bool)
(assert (forall ((bv1 T33) (bv0 T33))
  (! (= (set144 bv0 bv1) (or (qRo anc_7 bv0 bv1) (set143 bv0 bv1)))
     :pattern ((set144 bv0 bv1))
     :pattern ((qRo anc_7 bv0 bv1))
     :pattern ((set143 bv0 bv1)))))
(declare-fun set145 (T33 T33) Bool)
(assert (forall ((bv1 T33) (bv0 T33))
  (! (= (set145 bv0 bv1) (or (Roas7 xs bv0 bv1) (set144 bv0 bv1)))
     :pattern ((set145 bv0 bv1))
     :pattern ((Roas7 xs bv0 bv1))
     :pattern ((set144 bv0 bv1)))))
(assert (forall ((bv1 T33) (bv0 T33))
  (! (= (qRo v bv0 bv1) (set145 bv0 bv1))
     :pattern ((qRo v bv0 bv1))
     :pattern ((set145 bv0 bv1)))))
(declare-fun set146 (T33) Bool)
(assert (forall ((bv0 T33))
  (! (= (set146 bv0) (or (Rmem6 x_2 bv0) (qRm x_3 bv0)))
     :pattern ((set146 bv0))
     :pattern ((Rmem6 x_2 bv0))
     :pattern ((qRm x_3 bv0)))))
(assert (not (forall ((bv0 T33))
       (! (= (qRm v bv0) (set146 bv0))
          :pattern ((qRm v bv0))
          :pattern ((set146 bv0))))))
(check-sat)

(declare-sort T34)
(declare-const v T34)
(declare-const x_3 T34)
(declare-sort T35)
(declare-const x_2 T35)
(declare-const anc_0 T35)
(declare-const anc_1 T34)
(declare-const l T35)
(declare-const b T34)
(declare-sort T36)
(declare-const x T36)
(declare-const xs T35)
(declare-const sv_4112 T35)
(declare-const anc_7 T34)
(declare-sort T37)
(declare-fun Roas7 (T35 T37 T37) Bool)
(declare-fun Rmem6 (T35 T37) Bool)
(declare-fun Rhd5 (T35 T36) Bool)
(declare-fun Rob4 (T35 T36 T36) Bool)
(declare-fun Robs3 (T35 T36 T36) Bool)
(declare-fun Roa2 (T35 T36 T36) Bool)
(declare-fun Rmem1 (T35 T36) Bool)
(declare-fun Roas0 (T35 T36 T36) Bool)
(declare-fun R (T36 T37) Bool)
(declare-fun qRm (T34 T37) Bool)
(declare-fun qRo (T34 T37 T37) Bool)
(declare-fun set147 (T36 T37) Bool)
(assert (forall ((bv1 T37) (bv0 T36))
  (! (= (set147 bv0 bv1) (and (R bv0 bv1)))
     :pattern ((set147 bv0 bv1))
     :pattern ((R bv0 bv1)))))
(declare-fun set148 (T35 T36 T37) Bool)
(assert (forall ((bv2 T37) (bv1 T36) (bv0 T35))
  (! (= (set148 bv0 bv1 bv2) (and (Rmem1 bv0 bv1) (set147 bv1 bv2)))
     :pattern ((set148 bv0 bv1 bv2))
     :pattern ((Rmem1 bv0 bv1) (set147 bv1 bv2)))))
(assert (forall ((bv2 T37) (bv1 T36) (bv0 T35))
  (! (=> (set148 bv0 bv1 bv2) (Rmem6 bv0 bv2))
     :pattern ((set148 bv0 bv1 bv2) (Rmem6 bv0 bv2)))))
(assert (forall ((bv2 T37) (bv1 T35))
  (exists ((ev0 T36))
    (! (=> (Rmem6 bv1 bv2) (set148 bv1 ev0 bv2))
       :pattern ((Rmem6 bv1 bv2) (set148 bv1 ev0 bv2))))))
(declare-fun set149 (T36 T36 T37 T37) Bool)
(assert (forall ((bv3 T37) (bv2 T37) (bv1 T36) (bv0 T36))
  (! (= (set149 bv0 bv1 bv2 bv3) (and (R bv0 bv2) (R bv1 bv3)))
     :pattern ((set149 bv0 bv1 bv2 bv3))
     :pattern ((R bv0 bv2) (R bv1 bv3)))))
(declare-fun set150 (T35 T36 T36 T37 T37) Bool)
(assert (forall ((bv4 T37) (bv3 T37) (bv2 T36) (bv1 T36) (bv0 T35))
  (! (= (set150 bv0 bv1 bv2 bv3 bv4)
        (and (Roas0 bv0 bv1 bv2) (set149 bv1 bv2 bv3 bv4)))
     :pattern ((set150 bv0 bv1 bv2 bv3 bv4))
     :pattern ((Roas0 bv0 bv1 bv2) (set149 bv1 bv2 bv3 bv4)))))
(assert (forall ((bv4 T37) (bv3 T37) (bv2 T36) (bv1 T36) (bv0 T35))
  (! (=> (set150 bv0 bv1 bv2 bv3 bv4) (Roas7 bv0 bv3 bv4))
     :pattern ((set150 bv0 bv1 bv2 bv3 bv4) (Roas7 bv0 bv3 bv4)))))
(assert (forall ((bv4 T37) (bv3 T37) (bv2 T35))
  (exists ((ev1 T36) (ev0 T36))
    (! (=> (Roas7 bv2 bv3 bv4) (set150 bv2 ev0 ev1 bv3 bv4))
       :pattern ((Roas7 bv2 bv3 bv4) (set150 bv2 ev0 ev1 bv3 bv4))))))
(assert (= anc_1 x_3))
(assert (= anc_0 x_2))
(assert (= b x_3))
(assert (= b anc_1))
(assert (= l x_2))
(assert (= l anc_0))
(declare-fun set151 (T36) Bool)
(assert (forall ((bv0 T36))
  (! (= (set151 bv0) (and (= bv0 x))) :pattern ((set151 bv0)))))
(declare-fun set152 (T36 T36) Bool)
(assert (forall ((bv1 T36) (bv0 T36))
  (! (= (set152 bv0 bv1) (and (Rmem1 xs bv0) (set151 bv1)))
     :pattern ((set152 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set151 bv1)))))
(declare-fun set153 (T36 T36) Bool)
(assert (forall ((bv1 T36) (bv0 T36))
  (! (= (set153 bv0 bv1) (or (set152 bv0 bv1) (Roas0 xs bv0 bv1)))
     :pattern ((set153 bv0 bv1))
     :pattern ((set152 bv0 bv1))
     :pattern ((Roas0 xs bv0 bv1)))))
(assert (forall ((bv1 T36) (bv0 T36))
  (! (= (Roas0 l bv0 bv1) (set153 bv0 bv1))
     :pattern ((Roas0 l bv0 bv1))
     :pattern ((set153 bv0 bv1)))))
(declare-fun set154 (T36) Bool)
(assert (forall ((bv0 T36))
  (! (= (set154 bv0) (and (= bv0 x))) :pattern ((set154 bv0)))))
(declare-fun set155 (T36 T36) Bool)
(assert (forall ((bv1 T36) (bv0 T36))
  (! (= (set155 bv0 bv1) (and (Rmem1 xs bv0) (set154 bv1)))
     :pattern ((set155 bv0 bv1))
     :pattern ((Rmem1 xs bv0) (set154 bv1)))))
(assert (forall ((bv1 T36) (bv0 T36))
  (! (= (Roa2 l bv0 bv1) (set155 bv0 bv1))
     :pattern ((Roa2 l bv0 bv1))
     :pattern ((set155 bv0 bv1)))))
(declare-fun set156 (T36) Bool)
(assert (forall ((bv0 T36))
  (! (= (set156 bv0) (and (= bv0 x))) :pattern ((set156 bv0)))))
(declare-fun set157 (T36 T36) Bool)
(assert (forall ((bv1 T36) (bv0 T36))
  (! (= (set157 bv0 bv1) (and (set156 bv0) (Rmem1 xs bv1)))
     :pattern ((set157 bv0 bv1))
     :pattern ((set156 bv0) (Rmem1 xs bv1)))))
(declare-fun set158 (T36 T36) Bool)
(assert (forall ((bv1 T36) (bv0 T36))
  (! (= (set158 bv0 bv1) (or (set157 bv0 bv1) (Robs3 xs bv0 bv1)))
     :pattern ((set158 bv0 bv1))
     :pattern ((set157 bv0 bv1))
     :pattern ((Robs3 xs bv0 bv1)))))
(assert (forall ((bv1 T36) (bv0 T36))
  (! (= (Robs3 l bv0 bv1) (set158 bv0 bv1))
     :pattern ((Robs3 l bv0 bv1))
     :pattern ((set158 bv0 bv1)))))
(declare-fun set159 (T36) Bool)
(assert (forall ((bv0 T36))
  (! (= (set159 bv0) (and (= bv0 x))) :pattern ((set159 bv0)))))
(declare-fun set160 (T36 T36) Bool)
(assert (forall ((bv1 T36) (bv0 T36))
  (! (= (set160 bv0 bv1) (and (set159 bv0) (Rmem1 xs bv1)))
     :pattern ((set160 bv0 bv1))
     :pattern ((set159 bv0) (Rmem1 xs bv1)))))
(assert (forall ((bv1 T36) (bv0 T36))
  (! (= (Rob4 l bv0 bv1) (set160 bv0 bv1))
     :pattern ((Rob4 l bv0 bv1))
     :pattern ((set160 bv0 bv1)))))
(declare-fun set161 (T36) Bool)
(assert (forall ((bv0 T36))
  (! (= (set161 bv0) (and (= bv0 x))) :pattern ((set161 bv0)))))
(declare-fun set162 (T36) Bool)
(assert (forall ((bv0 T36))
  (! (= (set162 bv0) (or (set161 bv0) (Rmem1 xs bv0)))
     :pattern ((set162 bv0))
     :pattern ((set161 bv0))
     :pattern ((Rmem1 xs bv0)))))
(assert (forall ((bv0 T36))
  (! (= (Rmem1 l bv0) (set162 bv0))
     :pattern ((Rmem1 l bv0))
     :pattern ((set162 bv0)))))
(declare-fun set163 (T36) Bool)
(assert (forall ((bv0 T36))
  (! (= (set163 bv0) (and (= bv0 x))) :pattern ((set163 bv0)))))
(assert (forall ((bv0 T36))
  (! (= (Rhd5 l bv0) (set163 bv0))
     :pattern ((Rhd5 l bv0))
     :pattern ((set163 bv0)))))
(declare-fun set164 (T37) Bool)
(assert (forall ((bv0 T37))
  (! (= (set164 bv0) (or (R x bv0) (qRm b bv0)))
     :pattern ((set164 bv0))
     :pattern ((R x bv0))
     :pattern ((qRm b bv0)))))
(assert (forall ((bv0 T37))
  (! (= (qRm anc_7 bv0) (set164 bv0))
     :pattern ((qRm anc_7 bv0))
     :pattern ((set164 bv0)))))
(declare-fun set165 (T37 T37) Bool)
(assert (forall ((bv1 T37) (bv0 T37))
  (! (= (set165 bv0 bv1) (and (R x bv0) (qRm b bv1)))
     :pattern ((set165 bv0 bv1))
     :pattern ((R x bv0) (qRm b bv1)))))
(declare-fun set166 (T37 T37) Bool)
(assert (forall ((bv1 T37) (bv0 T37))
  (! (= (set166 bv0 bv1) (or (set165 bv0 bv1) (qRo b bv0 bv1)))
     :pattern ((set166 bv0 bv1))
     :pattern ((set165 bv0 bv1))
     :pattern ((qRo b bv0 bv1)))))
(assert (forall ((bv1 T37) (bv0 T37))
  (! (= (qRo anc_7 bv0 bv1) (set166 bv0 bv1))
     :pattern ((qRo anc_7 bv0 bv1))
     :pattern ((set166 bv0 bv1)))))
(declare-fun set167 (T37) Bool)
(assert (forall ((bv0 T37))
  (! (= (set167 bv0) (or (Rmem6 xs bv0) (qRm anc_7 bv0)))
     :pattern ((set167 bv0))
     :pattern ((Rmem6 xs bv0))
     :pattern ((qRm anc_7 bv0)))))
(assert (forall ((bv0 T37))
  (! (= (qRm v bv0) (set167 bv0))
     :pattern ((qRm v bv0))
     :pattern ((set167 bv0)))))
(declare-fun set168 (T37 T37) Bool)
(assert (forall ((bv1 T37) (bv0 T37))
  (! (= (set168 bv0 bv1) (and (Rmem6 xs bv0) (qRm anc_7 bv1)))
     :pattern ((set168 bv0 bv1))
     :pattern ((Rmem6 xs bv0) (qRm anc_7 bv1)))))
(declare-fun set169 (T37 T37) Bool)
(assert (forall ((bv1 T37) (bv0 T37))
  (! (= (set169 bv0 bv1) (or (qRo anc_7 bv0 bv1) (set168 bv0 bv1)))
     :pattern ((set169 bv0 bv1))
     :pattern ((qRo anc_7 bv0 bv1))
     :pattern ((set168 bv0 bv1)))))
(declare-fun set170 (T37 T37) Bool)
(assert (forall ((bv1 T37) (bv0 T37))
  (! (= (set170 bv0 bv1) (or (Roas7 xs bv0 bv1) (set169 bv0 bv1)))
     :pattern ((set170 bv0 bv1))
     :pattern ((Roas7 xs bv0 bv1))
     :pattern ((set169 bv0 bv1)))))
(assert (forall ((bv1 T37) (bv0 T37))
  (! (= (qRo v bv0 bv1) (set170 bv0 bv1))
     :pattern ((qRo v bv0 bv1))
     :pattern ((set170 bv0 bv1)))))
(declare-fun set171 (T37 T37) Bool)
(assert (forall ((bv1 T37) (bv0 T37))
  (! (= (set171 bv0 bv1) (and (Rmem6 x_2 bv0) (qRm x_3 bv1)))
     :pattern ((set171 bv0 bv1))
     :pattern ((Rmem6 x_2 bv0) (qRm x_3 bv1)))))
(declare-fun set172 (T37 T37) Bool)
(assert (forall ((bv1 T37) (bv0 T37))
  (! (= (set172 bv0 bv1) (or (qRo x_3 bv0 bv1) (set171 bv0 bv1)))
     :pattern ((set172 bv0 bv1))
     :pattern ((qRo x_3 bv0 bv1))
     :pattern ((set171 bv0 bv1)))))
(declare-fun set173 (T37 T37) Bool)
(assert (forall ((bv1 T37) (bv0 T37))
  (! (= (set173 bv0 bv1) (or (Roas7 x_2 bv0 bv1) (set172 bv0 bv1)))
     :pattern ((set173 bv0 bv1))
     :pattern ((Roas7 x_2 bv0 bv1))
     :pattern ((set172 bv0 bv1)))))
(assert (not (forall ((bv1 T37) (bv0 T37))
       (! (= (qRo v bv0 bv1) (set173 bv0 bv1))
          :pattern ((qRo v bv0 bv1))
          :pattern ((set173 bv0 bv1))))))
(check-sat)

