(declare-sort T0)
(declare-const v_37 T0)
(declare-const x_11 T0)
(declare-const e T0)
(declare-sort T1)
(declare-const id T1)
(declare-const |e'| T0)
(declare-const sv_4105 T0)
(declare-sort T2)
(declare-const |fv_e'| T2)
(declare-const |id'| T1)
(declare-const anc_1025I T1)
(declare-const anc_1028I T0)
(declare-const anc_1031I T0)
(declare-fun Rmem1 (T2 T1) Bool)
(declare-fun Rfv0 (T0 T1) Bool)
(assert (= e x_11))
(declare-fun set0 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set0 bv0) (and (= bv0 id))) :pattern ((set0 bv0)))))
(declare-fun set1 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set1 bv0) (and (Rfv0 |e'| bv0) (not (set0 bv0))))
     :pattern ((set1 bv0))
     :pattern ((Rfv0 |e'| bv0))
     :pattern ((set0 bv0)))))
(assert (forall ((bv0 T1))
  (! (= (Rfv0 e bv0) (set1 bv0)) :pattern ((Rfv0 e bv0)) :pattern ((set1 bv0)))))
(declare-fun set2 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set2 bv0) (and (= bv0 id))) :pattern ((set2 bv0)))))
(declare-fun set3 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set3 bv0) (and (= bv0 id))) :pattern ((set3 bv0)))))
(declare-fun set4 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set4 bv0) (and (Rfv0 |e'| bv0) (not (set3 bv0))))
     :pattern ((set4 bv0))
     :pattern ((Rfv0 |e'| bv0))
     :pattern ((set3 bv0)))))
(declare-fun set5 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set5 bv0) (or (set4 bv0) (Rfv0 anc_1028I bv0)))
     :pattern ((set5 bv0))
     :pattern ((set4 bv0))
     :pattern ((Rfv0 anc_1028I bv0)))))
(declare-fun set6 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set6 bv0) (and (= bv0 id))) :pattern ((set6 bv0)))))
(assert (let ((a!1 (or (forall ((bv0 T1))
                 (! (= (set2 bv0) (Rfv0 |e'| bv0))
                    :pattern ((set2 bv0))
                    :pattern ((Rfv0 |e'| bv0))))
               (forall ((bv0 T1))
                 (! (=> (set2 bv0) (Rfv0 |e'| bv0))
                    :pattern ((set2 bv0))
                    :pattern ((Rfv0 |e'| bv0))))))
      (a!3 (or (forall ((bv0 T1))
                 (! (= (set6 bv0) (Rfv0 |e'| bv0))
                    :pattern ((set6 bv0))
                    :pattern ((Rfv0 |e'| bv0))))
               (forall ((bv0 T1))
                 (! (=> (set6 bv0) (Rfv0 |e'| bv0))
                    :pattern ((set6 bv0))
                    :pattern ((Rfv0 |e'| bv0)))))))
(let ((a!2 (and a!1
                (forall ((bv0 T1))
                  (! (= (Rfv0 anc_1031I bv0) (set5 bv0))
                     :pattern ((Rfv0 anc_1031I bv0))
                     :pattern ((set5 bv0))))))
      (a!4 (and (not a!3)
                (forall ((bv0 T1))
                  (! (= (Rfv0 anc_1031I bv0) (Rfv0 |e'| bv0))
                     :pattern ((Rfv0 anc_1031I bv0))
                     :pattern ((Rfv0 |e'| bv0)))))))
  (or a!2 a!4))))
(declare-fun set7 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set7 bv0) (and (= bv0 |id'|))) :pattern ((set7 bv0)))))
(assert (forall ((bv0 T1))
  (! (= (Rfv0 anc_1028I bv0) (set7 bv0))
     :pattern ((Rfv0 anc_1028I bv0))
     :pattern ((set7 bv0)))))
(declare-fun set8 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set8 bv0) (and (= bv0 anc_1025I))) :pattern ((set8 bv0)))))
(declare-fun set9 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set9 bv0) (and (= bv0 id))) :pattern ((set9 bv0)))))
(assert (not (forall ((bv0 T1))
       (! (= (set8 bv0) (set9 bv0)) :pattern ((set8 bv0)) :pattern ((set9 bv0))))))
(declare-fun set10 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set10 bv0) (and (= bv0 anc_1025I))) :pattern ((set10 bv0)))))
(declare-fun set11 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set11 bv0) (and (Rmem1 |fv_e'| bv0) (not (set10 bv0))))
     :pattern ((set11 bv0))
     :pattern ((Rmem1 |fv_e'| bv0))
     :pattern ((set10 bv0)))))
(assert (forall ((bv0 T1))
  (! (= (set11 bv0) (Rmem1 |fv_e'| bv0))
     :pattern ((set11 bv0))
     :pattern ((Rmem1 |fv_e'| bv0)))))
(assert (= anc_1025I |id'|))
(declare-fun set12 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set12 bv0) (and (= bv0 |id'|))) :pattern ((set12 bv0)))))
(declare-fun set13 (T1) Bool)
(assert (forall ((bv0 T1)) (! (= (set13 bv0) (and (= bv0 id))) :pattern ((set13 bv0)))))
(assert (not (forall ((bv0 T1))
       (! (= (set12 bv0) (set13 bv0))
          :pattern ((set12 bv0))
          :pattern ((set13 bv0))))))
(declare-fun set14 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set14 bv0) (and (= bv0 |id'|))) :pattern ((set14 bv0)))))
(declare-fun set15 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set15 bv0) (and (Rmem1 |fv_e'| bv0) (not (set14 bv0))))
     :pattern ((set15 bv0))
     :pattern ((Rmem1 |fv_e'| bv0))
     :pattern ((set14 bv0)))))
(assert (forall ((bv0 T1))
  (! (= (set15 bv0) (Rmem1 |fv_e'| bv0))
     :pattern ((set15 bv0))
     :pattern ((Rmem1 |fv_e'| bv0)))))
(assert (forall ((bv0 T1))
  (! (= (Rmem1 |fv_e'| bv0) (Rfv0 |e'| bv0))
     :pattern ((Rmem1 |fv_e'| bv0))
     :pattern ((Rfv0 |e'| bv0)))))
(declare-fun set16 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set16 bv0) (and (= bv0 anc_1025I))) :pattern ((set16 bv0)))))
(declare-fun set17 (T1) Bool)
(assert (forall ((bv0 T1))
  (! (= (set17 bv0) (and (Rfv0 anc_1031I bv0) (not (set16 bv0))))
     :pattern ((set17 bv0))
     :pattern ((Rfv0 anc_1031I bv0))
     :pattern ((set16 bv0)))))
(assert (forall ((bv0 T1))
  (! (= (Rfv0 v_37 bv0) (set17 bv0))
     :pattern ((Rfv0 v_37 bv0))
     :pattern ((set17 bv0)))))
(assert (not (forall ((bv0 T1))
       (! (= (Rfv0 v_37 bv0) (Rfv0 x_11 bv0))
          :pattern ((Rfv0 v_37 bv0))
          :pattern ((Rfv0 x_11 bv0))))))
(check-sat)

(declare-sort T3)
(declare-const v_37 T3)
(declare-const x_10 T3)
(declare-sort T4)
(declare-const x_9 T4)
(declare-const x_8 T3)
(declare-const anc_1035I T3)
(declare-const anc_1036I T4)
(declare-const anc_1037I T3)
(declare-const e1 T3)
(declare-const id T4)
(declare-const e2 T3)
(declare-const e21 T3)
(declare-const e22 T3)
(declare-const sv_4122 T3)
(declare-const anc_1046I T3)
(declare-const anc_1050I T3)
(declare-fun Rfv0 (T3 T4) Bool)
(assert (= anc_1037I x_10))
(assert (= anc_1036I x_9))
(assert (= anc_1035I x_8))
(assert (= e2 x_10))
(assert (= e2 anc_1037I))
(assert (= id x_9))
(assert (= id anc_1036I))
(assert (= e1 x_8))
(assert (= e1 anc_1035I))
(declare-fun set18 (T4) Bool)
(assert (forall ((bv0 T4))
  (! (= (set18 bv0) (or (Rfv0 e21 bv0) (Rfv0 e22 bv0)))
     :pattern ((set18 bv0))
     :pattern ((Rfv0 e21 bv0))
     :pattern ((Rfv0 e22 bv0)))))
(assert (forall ((bv0 T4))
  (! (= (Rfv0 e2 bv0) (set18 bv0))
     :pattern ((Rfv0 e2 bv0))
     :pattern ((set18 bv0)))))
(declare-fun set19 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set19 bv0) (and (= bv0 id))) :pattern ((set19 bv0)))))
(declare-fun set20 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set20 bv0) (and (= bv0 id))) :pattern ((set20 bv0)))))
(declare-fun set21 (T4) Bool)
(assert (forall ((bv0 T4))
  (! (= (set21 bv0) (and (Rfv0 e22 bv0) (not (set20 bv0))))
     :pattern ((set21 bv0))
     :pattern ((Rfv0 e22 bv0))
     :pattern ((set20 bv0)))))
(declare-fun set22 (T4) Bool)
(assert (forall ((bv0 T4))
  (! (= (set22 bv0) (or (set21 bv0) (Rfv0 e1 bv0)))
     :pattern ((set22 bv0))
     :pattern ((set21 bv0))
     :pattern ((Rfv0 e1 bv0)))))
(declare-fun set23 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set23 bv0) (and (= bv0 id))) :pattern ((set23 bv0)))))
(assert (let ((a!1 (or (forall ((bv0 T4))
                 (! (= (set19 bv0) (Rfv0 e22 bv0))
                    :pattern ((set19 bv0))
                    :pattern ((Rfv0 e22 bv0))))
               (forall ((bv0 T4))
                 (! (=> (set19 bv0) (Rfv0 e22 bv0))
                    :pattern ((set19 bv0))
                    :pattern ((Rfv0 e22 bv0))))))
      (a!3 (or (forall ((bv0 T4))
                 (! (= (set23 bv0) (Rfv0 e22 bv0))
                    :pattern ((set23 bv0))
                    :pattern ((Rfv0 e22 bv0))))
               (forall ((bv0 T4))
                 (! (=> (set23 bv0) (Rfv0 e22 bv0))
                    :pattern ((set23 bv0))
                    :pattern ((Rfv0 e22 bv0)))))))
(let ((a!2 (and a!1
                (forall ((bv0 T4))
                  (! (= (Rfv0 anc_1050I bv0) (set22 bv0))
                     :pattern ((Rfv0 anc_1050I bv0))
                     :pattern ((set22 bv0))))))
      (a!4 (and (not a!3)
                (forall ((bv0 T4))
                  (! (= (Rfv0 anc_1050I bv0) (Rfv0 e22 bv0))
                     :pattern ((Rfv0 anc_1050I bv0))
                     :pattern ((Rfv0 e22 bv0)))))))
  (or a!2 a!4))))
(declare-fun set24 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set24 bv0) (and (= bv0 id))) :pattern ((set24 bv0)))))
(declare-fun set25 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set25 bv0) (and (= bv0 id))) :pattern ((set25 bv0)))))
(declare-fun set26 (T4) Bool)
(assert (forall ((bv0 T4))
  (! (= (set26 bv0) (and (Rfv0 e21 bv0) (not (set25 bv0))))
     :pattern ((set26 bv0))
     :pattern ((Rfv0 e21 bv0))
     :pattern ((set25 bv0)))))
(declare-fun set27 (T4) Bool)
(assert (forall ((bv0 T4))
  (! (= (set27 bv0) (or (set26 bv0) (Rfv0 e1 bv0)))
     :pattern ((set27 bv0))
     :pattern ((set26 bv0))
     :pattern ((Rfv0 e1 bv0)))))
(declare-fun set28 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set28 bv0) (and (= bv0 id))) :pattern ((set28 bv0)))))
(assert (let ((a!1 (or (forall ((bv0 T4))
                 (! (= (set24 bv0) (Rfv0 e21 bv0))
                    :pattern ((set24 bv0))
                    :pattern ((Rfv0 e21 bv0))))
               (forall ((bv0 T4))
                 (! (=> (set24 bv0) (Rfv0 e21 bv0))
                    :pattern ((set24 bv0))
                    :pattern ((Rfv0 e21 bv0))))))
      (a!3 (or (forall ((bv0 T4))
                 (! (= (set28 bv0) (Rfv0 e21 bv0))
                    :pattern ((set28 bv0))
                    :pattern ((Rfv0 e21 bv0))))
               (forall ((bv0 T4))
                 (! (=> (set28 bv0) (Rfv0 e21 bv0))
                    :pattern ((set28 bv0))
                    :pattern ((Rfv0 e21 bv0)))))))
(let ((a!2 (and a!1
                (forall ((bv0 T4))
                  (! (= (Rfv0 anc_1046I bv0) (set27 bv0))
                     :pattern ((Rfv0 anc_1046I bv0))
                     :pattern ((set27 bv0))))))
      (a!4 (and (not a!3)
                (forall ((bv0 T4))
                  (! (= (Rfv0 anc_1046I bv0) (Rfv0 e21 bv0))
                     :pattern ((Rfv0 anc_1046I bv0))
                     :pattern ((Rfv0 e21 bv0)))))))
  (or a!2 a!4))))
(declare-fun set29 (T4) Bool)
(assert (forall ((bv0 T4))
  (! (= (set29 bv0) (or (Rfv0 anc_1046I bv0) (Rfv0 anc_1050I bv0)))
     :pattern ((set29 bv0))
     :pattern ((Rfv0 anc_1046I bv0))
     :pattern ((Rfv0 anc_1050I bv0)))))
(assert (forall ((bv0 T4))
  (! (= (Rfv0 v_37 bv0) (set29 bv0))
     :pattern ((Rfv0 v_37 bv0))
     :pattern ((set29 bv0)))))
(declare-fun set30 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set30 bv0) (and (= bv0 x_9))) :pattern ((set30 bv0)))))
(declare-fun set31 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set31 bv0) (and (= bv0 x_9))) :pattern ((set31 bv0)))))
(declare-fun set32 (T4) Bool)
(assert (forall ((bv0 T4))
  (! (= (set32 bv0) (and (Rfv0 x_10 bv0) (not (set31 bv0))))
     :pattern ((set32 bv0))
     :pattern ((Rfv0 x_10 bv0))
     :pattern ((set31 bv0)))))
(declare-fun set33 (T4) Bool)
(assert (forall ((bv0 T4))
  (! (= (set33 bv0) (or (set32 bv0) (Rfv0 x_8 bv0)))
     :pattern ((set33 bv0))
     :pattern ((set32 bv0))
     :pattern ((Rfv0 x_8 bv0)))))
(declare-fun set34 (T4) Bool)
(assert (forall ((bv0 T4)) (! (= (set34 bv0) (and (= bv0 x_9))) :pattern ((set34 bv0)))))
(assert (let ((a!1 (or (forall ((bv0 T4))
                 (! (= (set30 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set30 bv0))
                    :pattern ((Rfv0 x_10 bv0))))
               (forall ((bv0 T4))
                 (! (=> (set30 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set30 bv0))
                    :pattern ((Rfv0 x_10 bv0))))))
      (a!3 (or (forall ((bv0 T4))
                 (! (= (set34 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set34 bv0))
                    :pattern ((Rfv0 x_10 bv0))))
               (forall ((bv0 T4))
                 (! (=> (set34 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set34 bv0))
                    :pattern ((Rfv0 x_10 bv0)))))))
(let ((a!2 (and a!1
                (forall ((bv0 T4))
                  (! (= (Rfv0 v_37 bv0) (set33 bv0))
                     :pattern ((Rfv0 v_37 bv0))
                     :pattern ((set33 bv0))))))
      (a!4 (and (not a!3)
                (forall ((bv0 T4))
                  (! (= (Rfv0 v_37 bv0) (Rfv0 x_10 bv0))
                     :pattern ((Rfv0 v_37 bv0))
                     :pattern ((Rfv0 x_10 bv0)))))))
  (not (or a!2 a!4)))))
(check-sat)

(declare-sort T5)
(declare-const v_37 T5)
(declare-const x_10 T5)
(declare-sort T6)
(declare-const x_9 T6)
(declare-const x_8 T5)
(declare-const anc_1035I T5)
(declare-const anc_1036I T6)
(declare-const anc_1037I T5)
(declare-const e1 T5)
(declare-const id T6)
(declare-const e2 T5)
(declare-const |id'| T6)
(declare-const sv_4112 T5)
(declare-const anc_1039I T6)
(declare-const anc_1040I T6)
(declare-const anc_1041I Bool)
(declare-const sv_4116 Bool)
(declare-fun Rfv0 (T5 T6) Bool)
(assert (= anc_1037I x_10))
(assert (= anc_1036I x_9))
(assert (= anc_1035I x_8))
(assert (= e2 x_10))
(assert (= e2 anc_1037I))
(assert (= id x_9))
(assert (= id anc_1036I))
(assert (= e1 x_8))
(assert (= e1 anc_1035I))
(declare-fun set35 (T6) Bool)
(assert (forall ((bv0 T6))
  (! (= (set35 bv0) (and (= bv0 |id'|))) :pattern ((set35 bv0)))))
(assert (forall ((bv0 T6))
  (! (= (Rfv0 e2 bv0) (set35 bv0))
     :pattern ((Rfv0 e2 bv0))
     :pattern ((set35 bv0)))))
(declare-fun set36 (T6) Bool)
(assert (forall ((bv0 T6))
  (! (= (set36 bv0) (and (= bv0 anc_1039I))) :pattern ((set36 bv0)))))
(declare-fun set37 (T6) Bool)
(assert (forall ((bv0 T6))
  (! (= (set37 bv0) (and (= bv0 anc_1040I))) :pattern ((set37 bv0)))))
(assert (= (= anc_1041I true)
   (forall ((bv0 T6))
     (! (= (set36 bv0) (set37 bv0))
        :pattern ((set36 bv0))
        :pattern ((set37 bv0))))))
(assert (= anc_1040I |id'|))
(assert (= anc_1039I x_9))
(assert (= anc_1039I anc_1036I))
(assert (= anc_1039I id))
(assert (= anc_1041I true))
(assert (= v_37 x_8))
(assert (= v_37 anc_1035I))
(assert (= v_37 e1))
(declare-fun set38 (T6) Bool)
(assert (forall ((bv0 T6)) (! (= (set38 bv0) (and (= bv0 x_9))) :pattern ((set38 bv0)))))
(declare-fun set39 (T6) Bool)
(assert (forall ((bv0 T6)) (! (= (set39 bv0) (and (= bv0 x_9))) :pattern ((set39 bv0)))))
(declare-fun set40 (T6) Bool)
(assert (forall ((bv0 T6))
  (! (= (set40 bv0) (and (Rfv0 x_10 bv0) (not (set39 bv0))))
     :pattern ((set40 bv0))
     :pattern ((Rfv0 x_10 bv0))
     :pattern ((set39 bv0)))))
(declare-fun set41 (T6) Bool)
(assert (forall ((bv0 T6))
  (! (= (set41 bv0) (or (set40 bv0) (Rfv0 x_8 bv0)))
     :pattern ((set41 bv0))
     :pattern ((set40 bv0))
     :pattern ((Rfv0 x_8 bv0)))))
(declare-fun set42 (T6) Bool)
(assert (forall ((bv0 T6)) (! (= (set42 bv0) (and (= bv0 x_9))) :pattern ((set42 bv0)))))
(assert (let ((a!1 (or (forall ((bv0 T6))
                 (! (= (set38 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set38 bv0))
                    :pattern ((Rfv0 x_10 bv0))))
               (forall ((bv0 T6))
                 (! (=> (set38 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set38 bv0))
                    :pattern ((Rfv0 x_10 bv0))))))
      (a!3 (or (forall ((bv0 T6))
                 (! (= (set42 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set42 bv0))
                    :pattern ((Rfv0 x_10 bv0))))
               (forall ((bv0 T6))
                 (! (=> (set42 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set42 bv0))
                    :pattern ((Rfv0 x_10 bv0)))))))
(let ((a!2 (and a!1
                (forall ((bv0 T6))
                  (! (= (Rfv0 v_37 bv0) (set41 bv0))
                     :pattern ((Rfv0 v_37 bv0))
                     :pattern ((set41 bv0))))))
      (a!4 (and (not a!3)
                (forall ((bv0 T6))
                  (! (= (Rfv0 v_37 bv0) (Rfv0 x_10 bv0))
                     :pattern ((Rfv0 v_37 bv0))
                     :pattern ((Rfv0 x_10 bv0)))))))
  (not (or a!2 a!4)))))
(check-sat)

(declare-sort T7)
(declare-const v_37 T7)
(declare-const x_10 T7)
(declare-sort T8)
(declare-const x_9 T8)
(declare-const x_8 T7)
(declare-const anc_1035I T7)
(declare-const anc_1036I T8)
(declare-const anc_1037I T7)
(declare-const e1 T7)
(declare-const id T8)
(declare-const e2 T7)
(declare-const |id'| T8)
(declare-const sv_4112 T7)
(declare-const anc_1039I T8)
(declare-const anc_1040I T8)
(declare-const anc_1041I Bool)
(declare-const sv_4119 Bool)
(declare-fun Rfv0 (T7 T8) Bool)
(assert (= anc_1037I x_10))
(assert (= anc_1036I x_9))
(assert (= anc_1035I x_8))
(assert (= e2 x_10))
(assert (= e2 anc_1037I))
(assert (= id x_9))
(assert (= id anc_1036I))
(assert (= e1 x_8))
(assert (= e1 anc_1035I))
(declare-fun set43 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set43 bv0) (and (= bv0 |id'|))) :pattern ((set43 bv0)))))
(assert (forall ((bv0 T8))
  (! (= (Rfv0 e2 bv0) (set43 bv0))
     :pattern ((Rfv0 e2 bv0))
     :pattern ((set43 bv0)))))
(declare-fun set44 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set44 bv0) (and (= bv0 anc_1039I))) :pattern ((set44 bv0)))))
(declare-fun set45 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set45 bv0) (and (= bv0 anc_1040I))) :pattern ((set45 bv0)))))
(assert (= (= anc_1041I true)
   (forall ((bv0 T8))
     (! (= (set44 bv0) (set45 bv0))
        :pattern ((set44 bv0))
        :pattern ((set45 bv0))))))
(assert (= anc_1040I |id'|))
(assert (= anc_1039I x_9))
(assert (= anc_1039I anc_1036I))
(assert (= anc_1039I id))
(assert (= anc_1041I false))
(assert (= v_37 x_10))
(assert (= v_37 anc_1037I))
(assert (= v_37 e2))
(declare-fun set46 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set46 bv0) (and (= bv0 x_9))) :pattern ((set46 bv0)))))
(declare-fun set47 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set47 bv0) (and (= bv0 x_9))) :pattern ((set47 bv0)))))
(declare-fun set48 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set48 bv0) (and (Rfv0 x_10 bv0) (not (set47 bv0))))
     :pattern ((set48 bv0))
     :pattern ((Rfv0 x_10 bv0))
     :pattern ((set47 bv0)))))
(declare-fun set49 (T8) Bool)
(assert (forall ((bv0 T8))
  (! (= (set49 bv0) (or (set48 bv0) (Rfv0 x_8 bv0)))
     :pattern ((set49 bv0))
     :pattern ((set48 bv0))
     :pattern ((Rfv0 x_8 bv0)))))
(declare-fun set50 (T8) Bool)
(assert (forall ((bv0 T8)) (! (= (set50 bv0) (and (= bv0 x_9))) :pattern ((set50 bv0)))))
(assert (let ((a!1 (or (forall ((bv0 T8))
                 (! (= (set46 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set46 bv0))
                    :pattern ((Rfv0 x_10 bv0))))
               (forall ((bv0 T8))
                 (! (=> (set46 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set46 bv0))
                    :pattern ((Rfv0 x_10 bv0))))))
      (a!3 (or (forall ((bv0 T8))
                 (! (= (set50 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set50 bv0))
                    :pattern ((Rfv0 x_10 bv0))))
               (forall ((bv0 T8))
                 (! (=> (set50 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set50 bv0))
                    :pattern ((Rfv0 x_10 bv0)))))))
(let ((a!2 (and a!1
                (forall ((bv0 T8))
                  (! (= (Rfv0 v_37 bv0) (set49 bv0))
                     :pattern ((Rfv0 v_37 bv0))
                     :pattern ((set49 bv0))))))
      (a!4 (and (not a!3)
                (forall ((bv0 T8))
                  (! (= (Rfv0 v_37 bv0) (Rfv0 x_10 bv0))
                     :pattern ((Rfv0 v_37 bv0))
                     :pattern ((Rfv0 x_10 bv0)))))))
  (not (or a!2 a!4)))))
(check-sat)

(declare-sort T9)
(declare-const v_37 T9)
(declare-const x_10 T9)
(declare-sort T10)
(declare-const x_9 T10)
(declare-const x_8 T9)
(declare-const anc_1035I T9)
(declare-const anc_1036I T10)
(declare-const anc_1037I T9)
(declare-const e1 T9)
(declare-const id T10)
(declare-const e2 T9)
(declare-const |id'| T10)
(declare-const |e2'| T9)
(declare-const sv_4126 T9)
(declare-const anc_1052I T10)
(declare-const anc_1053I T10)
(declare-const anc_1054I Bool)
(declare-const sv_4130 Bool)
(declare-fun Rfv0 (T9 T10) Bool)
(assert (= anc_1037I x_10))
(assert (= anc_1036I x_9))
(assert (= anc_1035I x_8))
(assert (= e2 x_10))
(assert (= e2 anc_1037I))
(assert (= id x_9))
(assert (= id anc_1036I))
(assert (= e1 x_8))
(assert (= e1 anc_1035I))
(declare-fun set51 (T10) Bool)
(assert (forall ((bv0 T10))
  (! (= (set51 bv0) (and (= bv0 |id'|))) :pattern ((set51 bv0)))))
(declare-fun set52 (T10) Bool)
(assert (forall ((bv0 T10))
  (! (= (set52 bv0) (and (Rfv0 |e2'| bv0) (not (set51 bv0))))
     :pattern ((set52 bv0))
     :pattern ((Rfv0 |e2'| bv0))
     :pattern ((set51 bv0)))))
(assert (forall ((bv0 T10))
  (! (= (Rfv0 e2 bv0) (set52 bv0))
     :pattern ((Rfv0 e2 bv0))
     :pattern ((set52 bv0)))))
(declare-fun set53 (T10) Bool)
(assert (forall ((bv0 T10))
  (! (= (set53 bv0) (and (= bv0 anc_1052I))) :pattern ((set53 bv0)))))
(declare-fun set54 (T10) Bool)
(assert (forall ((bv0 T10))
  (! (= (set54 bv0) (and (= bv0 anc_1053I))) :pattern ((set54 bv0)))))
(assert (= (= anc_1054I true)
   (forall ((bv0 T10))
     (! (= (set53 bv0) (set54 bv0))
        :pattern ((set53 bv0))
        :pattern ((set54 bv0))))))
(assert (= anc_1053I x_9))
(assert (= anc_1053I anc_1036I))
(assert (= anc_1053I id))
(assert (= anc_1052I |id'|))
(assert (= anc_1054I true))
(assert (= v_37 x_10))
(assert (= v_37 anc_1037I))
(assert (= v_37 e2))
(declare-fun set55 (T10) Bool)
(assert (forall ((bv0 T10))
  (! (= (set55 bv0) (and (= bv0 x_9))) :pattern ((set55 bv0)))))
(declare-fun set56 (T10) Bool)
(assert (forall ((bv0 T10))
  (! (= (set56 bv0) (and (= bv0 x_9))) :pattern ((set56 bv0)))))
(declare-fun set57 (T10) Bool)
(assert (forall ((bv0 T10))
  (! (= (set57 bv0) (and (Rfv0 x_10 bv0) (not (set56 bv0))))
     :pattern ((set57 bv0))
     :pattern ((Rfv0 x_10 bv0))
     :pattern ((set56 bv0)))))
(declare-fun set58 (T10) Bool)
(assert (forall ((bv0 T10))
  (! (= (set58 bv0) (or (set57 bv0) (Rfv0 x_8 bv0)))
     :pattern ((set58 bv0))
     :pattern ((set57 bv0))
     :pattern ((Rfv0 x_8 bv0)))))
(declare-fun set59 (T10) Bool)
(assert (forall ((bv0 T10))
  (! (= (set59 bv0) (and (= bv0 x_9))) :pattern ((set59 bv0)))))
(assert (let ((a!1 (or (forall ((bv0 T10))
                 (! (= (set55 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set55 bv0))
                    :pattern ((Rfv0 x_10 bv0))))
               (forall ((bv0 T10))
                 (! (=> (set55 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set55 bv0))
                    :pattern ((Rfv0 x_10 bv0))))))
      (a!3 (or (forall ((bv0 T10))
                 (! (= (set59 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set59 bv0))
                    :pattern ((Rfv0 x_10 bv0))))
               (forall ((bv0 T10))
                 (! (=> (set59 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set59 bv0))
                    :pattern ((Rfv0 x_10 bv0)))))))
(let ((a!2 (and a!1
                (forall ((bv0 T10))
                  (! (= (Rfv0 v_37 bv0) (set58 bv0))
                     :pattern ((Rfv0 v_37 bv0))
                     :pattern ((set58 bv0))))))
      (a!4 (and (not a!3)
                (forall ((bv0 T10))
                  (! (= (Rfv0 v_37 bv0) (Rfv0 x_10 bv0))
                     :pattern ((Rfv0 v_37 bv0))
                     :pattern ((Rfv0 x_10 bv0)))))))
  (not (or a!2 a!4)))))
(check-sat)

(declare-sort T11)
(declare-const v_37 T11)
(declare-const x_10 T11)
(declare-sort T12)
(declare-const x_9 T12)
(declare-const x_8 T11)
(declare-const anc_1035I T11)
(declare-const anc_1036I T12)
(declare-const anc_1037I T11)
(declare-const e1 T11)
(declare-const id T12)
(declare-const e2 T11)
(declare-const |id'| T12)
(declare-const |e2'| T11)
(declare-const sv_4126 T11)
(declare-const anc_1052I T12)
(declare-const anc_1053I T12)
(declare-const anc_1054I Bool)
(declare-const sv_4133 Bool)
(declare-sort T13)
(declare-const fv_e1 T13)
(declare-const anc_1057I Bool)
(declare-const sv_4137 Bool)
(declare-const anc_1062I T11)
(declare-fun Rmem1 (T13 T12) Bool)
(declare-fun Rfv0 (T11 T12) Bool)
(assert (= anc_1037I x_10))
(assert (= anc_1036I x_9))
(assert (= anc_1035I x_8))
(assert (= e2 x_10))
(assert (= e2 anc_1037I))
(assert (= id x_9))
(assert (= id anc_1036I))
(assert (= e1 x_8))
(assert (= e1 anc_1035I))
(declare-fun set60 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set60 bv0) (and (= bv0 |id'|))) :pattern ((set60 bv0)))))
(declare-fun set61 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set61 bv0) (and (Rfv0 |e2'| bv0) (not (set60 bv0))))
     :pattern ((set61 bv0))
     :pattern ((Rfv0 |e2'| bv0))
     :pattern ((set60 bv0)))))
(assert (forall ((bv0 T12))
  (! (= (Rfv0 e2 bv0) (set61 bv0))
     :pattern ((Rfv0 e2 bv0))
     :pattern ((set61 bv0)))))
(declare-fun set62 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set62 bv0) (and (= bv0 anc_1052I))) :pattern ((set62 bv0)))))
(declare-fun set63 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set63 bv0) (and (= bv0 anc_1053I))) :pattern ((set63 bv0)))))
(assert (= (= anc_1054I true)
   (forall ((bv0 T12))
     (! (= (set62 bv0) (set63 bv0))
        :pattern ((set62 bv0))
        :pattern ((set63 bv0))))))
(assert (= anc_1053I x_9))
(assert (= anc_1053I anc_1036I))
(assert (= anc_1053I id))
(assert (= anc_1052I |id'|))
(assert (= anc_1054I false))
(declare-fun set64 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set64 bv0) (and (= bv0 |id'|))) :pattern ((set64 bv0)))))
(assert (let ((a!1 (or (forall ((bv0 T12))
                 (! (= (set64 bv0) (Rmem1 fv_e1 bv0))
                    :pattern ((set64 bv0))
                    :pattern ((Rmem1 fv_e1 bv0))))
               (forall ((bv0 T12))
                 (! (=> (set64 bv0) (Rmem1 fv_e1 bv0))
                    :pattern ((set64 bv0))
                    :pattern ((Rmem1 fv_e1 bv0)))))))
  (= (= anc_1057I true) a!1)))
(assert (forall ((bv0 T12))
  (! (= (Rmem1 fv_e1 bv0) (Rfv0 e1 bv0))
     :pattern ((Rmem1 fv_e1 bv0))
     :pattern ((Rfv0 e1 bv0)))))
(assert (= anc_1057I true))
(assert (forall ((bv0 T12))
  (! (= (Rfv0 anc_1062I bv0) (Rfv0 e2 bv0))
     :pattern ((Rfv0 anc_1062I bv0))
     :pattern ((Rfv0 e2 bv0)))))
(declare-fun set65 (T12) Bool)
(assert (forall ((bv0 T12)) (! (= (set65 bv0) (and (= bv0 id))) :pattern ((set65 bv0)))))
(declare-fun set66 (T12) Bool)
(assert (forall ((bv0 T12)) (! (= (set66 bv0) (and (= bv0 id))) :pattern ((set66 bv0)))))
(declare-fun set67 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set67 bv0) (and (Rfv0 anc_1062I bv0) (not (set66 bv0))))
     :pattern ((set67 bv0))
     :pattern ((Rfv0 anc_1062I bv0))
     :pattern ((set66 bv0)))))
(declare-fun set68 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set68 bv0) (or (set67 bv0) (Rfv0 e1 bv0)))
     :pattern ((set68 bv0))
     :pattern ((set67 bv0))
     :pattern ((Rfv0 e1 bv0)))))
(declare-fun set69 (T12) Bool)
(assert (forall ((bv0 T12)) (! (= (set69 bv0) (and (= bv0 id))) :pattern ((set69 bv0)))))
(assert (let ((a!1 (or (forall ((bv0 T12))
                 (! (= (set65 bv0) (Rfv0 anc_1062I bv0))
                    :pattern ((set65 bv0))
                    :pattern ((Rfv0 anc_1062I bv0))))
               (forall ((bv0 T12))
                 (! (=> (set65 bv0) (Rfv0 anc_1062I bv0))
                    :pattern ((set65 bv0))
                    :pattern ((Rfv0 anc_1062I bv0))))))
      (a!3 (or (forall ((bv0 T12))
                 (! (= (set69 bv0) (Rfv0 anc_1062I bv0))
                    :pattern ((set69 bv0))
                    :pattern ((Rfv0 anc_1062I bv0))))
               (forall ((bv0 T12))
                 (! (=> (set69 bv0) (Rfv0 anc_1062I bv0))
                    :pattern ((set69 bv0))
                    :pattern ((Rfv0 anc_1062I bv0)))))))
(let ((a!2 (and a!1
                (forall ((bv0 T12))
                  (! (= (Rfv0 v_37 bv0) (set68 bv0))
                     :pattern ((Rfv0 v_37 bv0))
                     :pattern ((set68 bv0))))))
      (a!4 (and (not a!3)
                (forall ((bv0 T12))
                  (! (= (Rfv0 v_37 bv0) (Rfv0 anc_1062I bv0))
                     :pattern ((Rfv0 v_37 bv0))
                     :pattern ((Rfv0 anc_1062I bv0)))))))
  (or a!2 a!4))))
(declare-fun set70 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set70 bv0) (and (= bv0 x_9))) :pattern ((set70 bv0)))))
(declare-fun set71 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set71 bv0) (and (= bv0 x_9))) :pattern ((set71 bv0)))))
(declare-fun set72 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set72 bv0) (and (Rfv0 x_10 bv0) (not (set71 bv0))))
     :pattern ((set72 bv0))
     :pattern ((Rfv0 x_10 bv0))
     :pattern ((set71 bv0)))))
(declare-fun set73 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set73 bv0) (or (set72 bv0) (Rfv0 x_8 bv0)))
     :pattern ((set73 bv0))
     :pattern ((set72 bv0))
     :pattern ((Rfv0 x_8 bv0)))))
(declare-fun set74 (T12) Bool)
(assert (forall ((bv0 T12))
  (! (= (set74 bv0) (and (= bv0 x_9))) :pattern ((set74 bv0)))))
(assert (let ((a!1 (or (forall ((bv0 T12))
                 (! (= (set70 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set70 bv0))
                    :pattern ((Rfv0 x_10 bv0))))
               (forall ((bv0 T12))
                 (! (=> (set70 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set70 bv0))
                    :pattern ((Rfv0 x_10 bv0))))))
      (a!3 (or (forall ((bv0 T12))
                 (! (= (set74 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set74 bv0))
                    :pattern ((Rfv0 x_10 bv0))))
               (forall ((bv0 T12))
                 (! (=> (set74 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set74 bv0))
                    :pattern ((Rfv0 x_10 bv0)))))))
(let ((a!2 (and a!1
                (forall ((bv0 T12))
                  (! (= (Rfv0 v_37 bv0) (set73 bv0))
                     :pattern ((Rfv0 v_37 bv0))
                     :pattern ((set73 bv0))))))
      (a!4 (and (not a!3)
                (forall ((bv0 T12))
                  (! (= (Rfv0 v_37 bv0) (Rfv0 x_10 bv0))
                     :pattern ((Rfv0 v_37 bv0))
                     :pattern ((Rfv0 x_10 bv0)))))))
  (not (or a!2 a!4)))))
(check-sat)

(declare-sort T14)
(declare-const v_37 T14)
(declare-const x_10 T14)
(declare-sort T15)
(declare-const x_9 T15)
(declare-const x_8 T14)
(declare-const anc_1035I T14)
(declare-const anc_1036I T15)
(declare-const anc_1037I T14)
(declare-const e1 T14)
(declare-const id T15)
(declare-const e2 T14)
(declare-const |id'| T15)
(declare-const |e2'| T14)
(declare-const sv_4126 T14)
(declare-const anc_1052I T15)
(declare-const anc_1053I T15)
(declare-const anc_1054I Bool)
(declare-const sv_4133 Bool)
(declare-sort T16)
(declare-const fv_e1 T16)
(declare-const anc_1057I Bool)
(declare-const sv_4141 Bool)
(declare-const anc_1064I T15)
(declare-const anc_1068I T14)
(declare-fun Rmem1 (T16 T15) Bool)
(declare-fun Rfv0 (T14 T15) Bool)
(assert (= anc_1037I x_10))
(assert (= anc_1036I x_9))
(assert (= anc_1035I x_8))
(assert (= e2 x_10))
(assert (= e2 anc_1037I))
(assert (= id x_9))
(assert (= id anc_1036I))
(assert (= e1 x_8))
(assert (= e1 anc_1035I))
(declare-fun set75 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set75 bv0) (and (= bv0 |id'|))) :pattern ((set75 bv0)))))
(declare-fun set76 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set76 bv0) (and (Rfv0 |e2'| bv0) (not (set75 bv0))))
     :pattern ((set76 bv0))
     :pattern ((Rfv0 |e2'| bv0))
     :pattern ((set75 bv0)))))
(assert (forall ((bv0 T15))
  (! (= (Rfv0 e2 bv0) (set76 bv0))
     :pattern ((Rfv0 e2 bv0))
     :pattern ((set76 bv0)))))
(declare-fun set77 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set77 bv0) (and (= bv0 anc_1052I))) :pattern ((set77 bv0)))))
(declare-fun set78 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set78 bv0) (and (= bv0 anc_1053I))) :pattern ((set78 bv0)))))
(assert (= (= anc_1054I true)
   (forall ((bv0 T15))
     (! (= (set77 bv0) (set78 bv0))
        :pattern ((set77 bv0))
        :pattern ((set78 bv0))))))
(assert (= anc_1053I x_9))
(assert (= anc_1053I anc_1036I))
(assert (= anc_1053I id))
(assert (= anc_1052I |id'|))
(assert (= anc_1054I false))
(declare-fun set79 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set79 bv0) (and (= bv0 |id'|))) :pattern ((set79 bv0)))))
(assert (let ((a!1 (or (forall ((bv0 T15))
                 (! (= (set79 bv0) (Rmem1 fv_e1 bv0))
                    :pattern ((set79 bv0))
                    :pattern ((Rmem1 fv_e1 bv0))))
               (forall ((bv0 T15))
                 (! (=> (set79 bv0) (Rmem1 fv_e1 bv0))
                    :pattern ((set79 bv0))
                    :pattern ((Rmem1 fv_e1 bv0)))))))
  (= (= anc_1057I true) a!1)))
(assert (forall ((bv0 T15))
  (! (= (Rmem1 fv_e1 bv0) (Rfv0 e1 bv0))
     :pattern ((Rmem1 fv_e1 bv0))
     :pattern ((Rfv0 e1 bv0)))))
(assert (= anc_1057I false))
(declare-fun set80 (T15) Bool)
(assert (forall ((bv0 T15)) (! (= (set80 bv0) (and (= bv0 id))) :pattern ((set80 bv0)))))
(declare-fun set81 (T15) Bool)
(assert (forall ((bv0 T15)) (! (= (set81 bv0) (and (= bv0 id))) :pattern ((set81 bv0)))))
(declare-fun set82 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set82 bv0) (and (Rfv0 |e2'| bv0) (not (set81 bv0))))
     :pattern ((set82 bv0))
     :pattern ((Rfv0 |e2'| bv0))
     :pattern ((set81 bv0)))))
(declare-fun set83 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set83 bv0) (or (set82 bv0) (Rfv0 e1 bv0)))
     :pattern ((set83 bv0))
     :pattern ((set82 bv0))
     :pattern ((Rfv0 e1 bv0)))))
(declare-fun set84 (T15) Bool)
(assert (forall ((bv0 T15)) (! (= (set84 bv0) (and (= bv0 id))) :pattern ((set84 bv0)))))
(assert (let ((a!1 (or (forall ((bv0 T15))
                 (! (= (set80 bv0) (Rfv0 |e2'| bv0))
                    :pattern ((set80 bv0))
                    :pattern ((Rfv0 |e2'| bv0))))
               (forall ((bv0 T15))
                 (! (=> (set80 bv0) (Rfv0 |e2'| bv0))
                    :pattern ((set80 bv0))
                    :pattern ((Rfv0 |e2'| bv0))))))
      (a!3 (or (forall ((bv0 T15))
                 (! (= (set84 bv0) (Rfv0 |e2'| bv0))
                    :pattern ((set84 bv0))
                    :pattern ((Rfv0 |e2'| bv0))))
               (forall ((bv0 T15))
                 (! (=> (set84 bv0) (Rfv0 |e2'| bv0))
                    :pattern ((set84 bv0))
                    :pattern ((Rfv0 |e2'| bv0)))))))
(let ((a!2 (and a!1
                (forall ((bv0 T15))
                  (! (= (Rfv0 anc_1068I bv0) (set83 bv0))
                     :pattern ((Rfv0 anc_1068I bv0))
                     :pattern ((set83 bv0))))))
      (a!4 (and (not a!3)
                (forall ((bv0 T15))
                  (! (= (Rfv0 anc_1068I bv0) (Rfv0 |e2'| bv0))
                     :pattern ((Rfv0 anc_1068I bv0))
                     :pattern ((Rfv0 |e2'| bv0)))))))
  (or a!2 a!4))))
(assert (= anc_1064I |id'|))
(declare-fun set85 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set85 bv0) (and (= bv0 anc_1064I))) :pattern ((set85 bv0)))))
(declare-fun set86 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set86 bv0) (and (Rfv0 anc_1068I bv0) (not (set85 bv0))))
     :pattern ((set86 bv0))
     :pattern ((Rfv0 anc_1068I bv0))
     :pattern ((set85 bv0)))))
(assert (forall ((bv0 T15))
  (! (= (Rfv0 v_37 bv0) (set86 bv0))
     :pattern ((Rfv0 v_37 bv0))
     :pattern ((set86 bv0)))))
(declare-fun set87 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set87 bv0) (and (= bv0 x_9))) :pattern ((set87 bv0)))))
(declare-fun set88 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set88 bv0) (and (= bv0 x_9))) :pattern ((set88 bv0)))))
(declare-fun set89 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set89 bv0) (and (Rfv0 x_10 bv0) (not (set88 bv0))))
     :pattern ((set89 bv0))
     :pattern ((Rfv0 x_10 bv0))
     :pattern ((set88 bv0)))))
(declare-fun set90 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set90 bv0) (or (set89 bv0) (Rfv0 x_8 bv0)))
     :pattern ((set90 bv0))
     :pattern ((set89 bv0))
     :pattern ((Rfv0 x_8 bv0)))))
(declare-fun set91 (T15) Bool)
(assert (forall ((bv0 T15))
  (! (= (set91 bv0) (and (= bv0 x_9))) :pattern ((set91 bv0)))))
(assert (let ((a!1 (or (forall ((bv0 T15))
                 (! (= (set87 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set87 bv0))
                    :pattern ((Rfv0 x_10 bv0))))
               (forall ((bv0 T15))
                 (! (=> (set87 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set87 bv0))
                    :pattern ((Rfv0 x_10 bv0))))))
      (a!3 (or (forall ((bv0 T15))
                 (! (= (set91 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set91 bv0))
                    :pattern ((Rfv0 x_10 bv0))))
               (forall ((bv0 T15))
                 (! (=> (set91 bv0) (Rfv0 x_10 bv0))
                    :pattern ((set91 bv0))
                    :pattern ((Rfv0 x_10 bv0)))))))
(let ((a!2 (and a!1
                (forall ((bv0 T15))
                  (! (= (Rfv0 v_37 bv0) (set90 bv0))
                     :pattern ((Rfv0 v_37 bv0))
                     :pattern ((set90 bv0))))))
      (a!4 (and (not a!3)
                (forall ((bv0 T15))
                  (! (= (Rfv0 v_37 bv0) (Rfv0 x_10 bv0))
                     :pattern ((Rfv0 v_37 bv0))
                     :pattern ((Rfv0 x_10 bv0)))))))
  (not (or a!2 a!4)))))
(check-sat)

